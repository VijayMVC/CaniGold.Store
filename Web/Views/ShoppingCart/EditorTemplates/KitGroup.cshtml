@model KitGroupViewModel
@{
	var kitGroupNeedsFieldset =
			!Model.IsReadOnly
			&& (Model.KitGroupType == KitGroupData.SINGLE_SELECT_RADIO_LIST
				|| Model.KitGroupType == KitGroupData.MULTI_SELECT_CHECKBOX_LIST);

	var kitGroupNeedsForAttribute =
			!Model.IsReadOnly
			&& (Model.KitGroupType == KitGroupData.SINGLE_SELECT_DROPDOWN_LIST
				|| Model.KitGroupType == KitGroupData.FILE_OPTION
				|| Model.KitGroupType == KitGroupData.TEXT_AREA
				|| Model.KitGroupType == KitGroupData.TEXT_OPTION);

	var modelDescriptionOrImageExists =
			!string.IsNullOrWhiteSpace(Model.Description)
			|| !string.IsNullOrWhiteSpace(Model.ImageUrl);

	string forAttributeControlType;
	switch(Model.KitGroupType)
	{
		case KitGroupData.SINGLE_SELECT_DROPDOWN_LIST:
			forAttributeControlType = "dropdown";
			break;
		case KitGroupData.FILE_OPTION:
			forAttributeControlType = "upload";
			break;
		case KitGroupData.TEXT_AREA:
			forAttributeControlType = "textarea";
			break;
		default:
			forAttributeControlType = "textoption";
			break;
	}

	var forAttributeValue = string.Format("kitgroup-{0}-{1}", forAttributeControlType, Model.Id);
}
<div class="kit-group js-kit-group">
	@Html.HiddenFor(model => model.Id)
	@if(kitGroupNeedsFieldset)
	{
		@:<fieldset>
	}
	<div class="panel panel-default">
		<div class="panel-heading kit-panel-heading" id="heading-@Model.Id">
			<div class="panel-title">
				<button class="@Html.AttributeBool(modelDescriptionOrImageExists, "kit-panel-title-link")" data-toggle="collapse" href="#description-@Model.Id" aria-expanded="false" aria-controls="description-@Model.Id">
					@if(modelDescriptionOrImageExists)
					{
						<div class="kit-description-toggle">
							<i class="fa fa-chevron-down expand-control"></i>
							<i class="fa fa-chevron-up collapse-control"></i>
						</div>
					}
					@if(Model.IsRequired)
					{
						if(kitGroupNeedsFieldset)
						{
							@:<legend>
						}
							<label id="kitgroup-label-@Model.Id"
								   class="form-label form-label-required"
								   for="@Html.AttributeBool(kitGroupNeedsForAttribute, forAttributeValue)">
								<span class="form-label-prefix form-label-prefix-required">
									@Html.StringResource("label.requiredPrefix")
								</span>
								<span class="form-label-wrap">@Model.Name</span>
								<span class="form-label-suffix form-label-suffix-required">@Html.StringResource("label.requiredSuffix")</span>
							</label>
						if(kitGroupNeedsFieldset)
						{
							@:</legend>
						}
					}
					else
					{
						if(kitGroupNeedsFieldset)
						{
							@:<legend>
						}
							<label id="kitgroup-label-@Model.Id"
								   class="form-label form-label-optional"
								   for="@Html.AttributeBool(kitGroupNeedsForAttribute, forAttributeValue)">
								<span class="form-label-prefix form-label-prefix-optional">
									@Html.StringResource("label.optionalPrefix")
								</span>
								<span class="form-label-wrap">@Model.Name</span>
								<span class="form-label-suffix form-label-suffix-optional">@Html.StringResource("label.optionalSuffix")</span>
							</label>
						if(kitGroupNeedsFieldset)
						{
							@:</legend>
						}
					}
					@if(!string.IsNullOrWhiteSpace(Model.Summary))
					{
						<span class="whats-this js-whats-this" data-content="@Model.Summary" data-placement="auto top" rel="popover">
							<i class="fa fa-question-circle"></i>
						</span>
					}
				</button>
			</div>
		</div>
		<div class="panel-body">
			@if(modelDescriptionOrImageExists)
			{
				<div id="description-@Model.Id" class="panel-collapse collapse">
					<div class="kit-group-description" tabindex="0">@Html.Raw(Model.Description)</div>
					@if(!string.IsNullOrWhiteSpace(Model.ImageUrl))
					{
						<div class="kit-group-image-wrap">
							<img src="@Model.ImageUrl"
								 class="kit-group-image img-responsive" />
						</div>
					}
				</div>
			}
			@if(Model.IsReadOnly)
			{
				<ul class="read-only-kit-item-list">
					@foreach(var item in Model.Items)
					{
						<li>
							<span class="js-kit-name-display" data-kit-item-id="@item.Id">
								@item.NameDisplay
							</span>
							@if(!string.IsNullOrEmpty(item.ImageUrl)
								|| !string.IsNullOrWhiteSpace(Model.Description)
								|| !string.IsNullOrEmpty(item.OutOfStockMessage))
							{
								<div class="kit-item-info clearfix">
									@if(!string.IsNullOrEmpty(item.ImageUrl))
									{
										<div class="kit-item-image-wrap">
											<img src="@item.ImageUrl"
												 class="kit-item-image img-responsive" alt="" />
										</div>
									}
									@if(!string.IsNullOrWhiteSpace(item.Description)
										|| !string.IsNullOrEmpty(item.OutOfStockMessage))
									{
										<div class="kit-item-description" tabindex="0">
											@if(!string.IsNullOrWhiteSpace(item.Description))
											{
												<div class="kit-item-description">
													@Html.Raw(item.Description)
												</div>
											}
											@if(!string.IsNullOrEmpty(item.OutOfStockMessage))
											{
												<div class="stock-hint out-stock-hint kit-item-out-of-stock">
													@Html.Raw(item.OutOfStockMessage)
												</div>
											}
										</div>
									}
								</div>
							}
						</li>
					}
				</ul>
			}
			else
			{
				if(Model.KitGroupType == KitGroupData.SINGLE_SELECT_DROPDOWN_LIST)
				{
					var kitItemsList = Model.Items
						.Select(item => new SelectListItem()
						{
							Text = item.NameDisplay,
							Value = item.Id.ToString(),
							Selected = item.IsSelected
						});

					<div class="form-group kit-form-group">
						@Html.DropDownListFor(
							expression: model => model.SelectedItemId,
							selectList: kitItemsList,
							htmlAttributes: new
							{
								id = string.Format("kitgroup-dropdown-{0}", Model.Id),
								@class = "form-control js-kit-select",
								aria_controls = "customizedPrice"
							})
					</div>

					foreach(var item in Model.Items)
					{
						if(!string.IsNullOrEmpty(item.ImageUrl)
							|| !string.IsNullOrWhiteSpace(item.Description)
							|| !string.IsNullOrEmpty(item.OutOfStockMessage))
						{
							<div class="kit-item-info clearfix js-kit-item-info @Html.AttributeBool(!item.IsSelected, "off")" data-kit-item-id="@item.Id">
								@if(!string.IsNullOrEmpty(item.ImageUrl))
								{
									<div class="kit-item-image-wrap">
										<img src="@item.ImageUrl"
											 class="kit-item-image img-responsive" alt="" />
									</div>
								}
								@if(!string.IsNullOrWhiteSpace(item.Description)
									|| !string.IsNullOrEmpty(item.OutOfStockMessage))
								{
									<div class="kit-item-description" tabindex="0">
										@if(!string.IsNullOrWhiteSpace(item.Description))
										{
											<div class="kit-item-description">
												@Html.Raw(item.Description)
											</div>
										}
										@if(!string.IsNullOrEmpty(item.OutOfStockMessage))
										{
											<div class="stock-hint out-stock-hint kit-item-out-of-stock">
												@Html.Raw(item.OutOfStockMessage)
											</div>
										}
									</div>
								}
							</div>

						}
					}
				}

				if(Model.KitGroupType == KitGroupData.SINGLE_SELECT_RADIO_LIST)
				{
					<div class="form-group kit-form-group">
						@foreach(var item in Model.Items)
						{
							<div class="radio">
								@Html.RadioButtonFor(
								expression: model => model.SelectedItemId,
								value: item.Id,
								htmlAttributes: new
								{
									@class = "js-kit-radio",
									@aria_controls = "customizedPrice",
									id = string.Format("kitgroup-radio-{0}-item-{1}", Model.Id, item.Id)
								})
								<label class="js-kit-name-display" data-kit-item-id="@item.Id" for="@string.Format("kitgroup-radio-{0}-item-{1}", Model.Id, item.Id)">
									@item.NameDisplay
								</label>
								@if(!string.IsNullOrEmpty(item.ImageUrl)
									|| !string.IsNullOrWhiteSpace(Model.Description)
									|| !string.IsNullOrEmpty(item.OutOfStockMessage))
								{
									<div class="kit-item-info clearfix">
										@if(!string.IsNullOrEmpty(item.ImageUrl))
										{
										<div class="kit-item-image-wrap">
											<img src="@item.ImageUrl"
													class="kit-item-image img-responsive" alt="" />
										</div>
										}
										@if(!string.IsNullOrWhiteSpace(item.Description)
											|| !string.IsNullOrEmpty(item.OutOfStockMessage))
										{
											<div class="kit-item-description" tabindex="0">
												@if(!string.IsNullOrWhiteSpace(item.Description))
												{
													<div class="kit-item-description">
														@Html.Raw(item.Description)
													</div>
												}
												@if(!string.IsNullOrEmpty(item.OutOfStockMessage))
												{
													<div class="stock-hint out-stock-hint kit-item-out-of-stock">
														@Html.Raw(item.OutOfStockMessage)
													</div>
												}
											</div>
										}
									</div>
								}
							</div>
						}
					</div>
				}

				if(Model.KitGroupType == KitGroupData.MULTI_SELECT_CHECKBOX_LIST)
				{
					var editorTemplateName = EditorTemplateNames.KitItemMultiSelectCheckbox;
					<div class="form-group kit-form-group">
						@Html.EditorForMany(
							expression: model => Model.Items,
							templateName: EditorTemplateNames.KitItemMultiSelectCheckbox,
							fieldName: "Items")
					</div>
				}

				if(Model.KitGroupType == KitGroupData.TEXT_OPTION)
				{
					@Html.EditorForMany(
						expression: model => Model.Items,
						templateName: EditorTemplateNames.KitItemTextOption,
						fieldName: "Items",
						additionalViewData: new
						{
							htmlAttributes = new
							{
								id = string.Format("kitgroup-textoption-{0}", Model.Id)
							}
						})
				}

				if(Model.KitGroupType == KitGroupData.TEXT_AREA)
				{
					@Html.EditorForMany(
						expression: model => Model.Items,
						templateName: EditorTemplateNames.KitItemTextArea,
						fieldName: "Items",
						additionalViewData: new
						{
							htmlAttributes = new
							{
								id = string.Format("kitgroup-textarea-{0}", Model.Id)
							}
						})
				}

				if(Model.KitGroupType == KitGroupData.FILE_OPTION)
				{
					@Html.EditorForMany(
						expression: model => Model.Items,
						templateName: EditorTemplateNames.KitItemFileUpload,
						fieldName: "Items",
						additionalViewData: new
						{
							htmlAttributes = new
							{
								id = string.Format("kitgroup-upload-{0}", Model.Id)
							}
						})
				}
			}
		</div>
	</div>
	@if(kitGroupNeedsFieldset)
	{
		@:</fieldset>
	}
</div>
