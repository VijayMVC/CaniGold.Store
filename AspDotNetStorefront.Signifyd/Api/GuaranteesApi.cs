// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
/* 
 * Signifyd API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AspDotNetStorefront.Signifyd.Client;
using AspDotNetStorefront.Signifyd.Model;

namespace AspDotNetStorefront.Signifyd.Api
{
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public interface IGuaranteesApi : IApiAccessor
	{
		#region Synchronous Operations
		/// <summary>
		/// Cancel Guarantee
		/// </summary>
		/// <remarks>
		/// A Guarantee can be canceled for orders that no longer require a guarantee fraud protection. Example: Your customer cancels the order and you issue a refund, you run out of stock for the ordered item, or you cancel the order. This is equivalent to clicking the “cancel guarantee request” button in the case console. Before canceling a guarantee request you should check the Guarantee Disposition using GET a Case. In some instances the Guarantee may have a declined decision, in which case it does not need to be cancelled.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The id for the case whose guarantee is being cancelled.</param>
		/// <param name="body"></param>
		/// <returns>GuaranteeRequest</returns>
		GuaranteeRequest CancelGuarantee(int? caseId, CancelGuaranteeRequest body);

		/// <summary>
		/// Cancel Guarantee
		/// </summary>
		/// <remarks>
		/// A Guarantee can be canceled for orders that no longer require a guarantee fraud protection. Example: Your customer cancels the order and you issue a refund, you run out of stock for the ordered item, or you cancel the order. This is equivalent to clicking the “cancel guarantee request” button in the case console. Before canceling a guarantee request you should check the Guarantee Disposition using GET a Case. In some instances the Guarantee may have a declined decision, in which case it does not need to be cancelled.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The id for the case whose guarantee is being cancelled.</param>
		/// <param name="body"></param>
		/// <returns>ApiResponse of GuaranteeRequest</returns>
		ApiResponse<GuaranteeRequest> CancelGuaranteeWithHttpInfo(int? caseId, CancelGuaranteeRequest body);
		/// <summary>
		/// Create guarantee
		/// </summary>
		/// <remarks>
		/// A case can be manually submitted for Guarantee. This is equivalent to clicking the Guarantee button in the case console. Note that you have 7 days from the order date to submit a case for Guarantee.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>GuaranteeRequest</returns>
		GuaranteeRequest CreateGuarantee(CreateGuaranteeRequest body);

		/// <summary>
		/// Create guarantee
		/// </summary>
		/// <remarks>
		/// A case can be manually submitted for Guarantee. This is equivalent to clicking the Guarantee button in the case console. Note that you have 7 days from the order date to submit a case for Guarantee.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>ApiResponse of GuaranteeRequest</returns>
		ApiResponse<GuaranteeRequest> CreateGuaranteeWithHttpInfo(CreateGuaranteeRequest body);
		#endregion Synchronous Operations
		#region Asynchronous Operations
		/// <summary>
		/// Cancel Guarantee
		/// </summary>
		/// <remarks>
		/// A Guarantee can be canceled for orders that no longer require a guarantee fraud protection. Example: Your customer cancels the order and you issue a refund, you run out of stock for the ordered item, or you cancel the order. This is equivalent to clicking the “cancel guarantee request” button in the case console. Before canceling a guarantee request you should check the Guarantee Disposition using GET a Case. In some instances the Guarantee may have a declined decision, in which case it does not need to be cancelled.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The id for the case whose guarantee is being cancelled.</param>
		/// <param name="body"></param>
		/// <returns>Task of GuaranteeRequest</returns>
		System.Threading.Tasks.Task<GuaranteeRequest> CancelGuaranteeAsync(int? caseId, CancelGuaranteeRequest body);

		/// <summary>
		/// Cancel Guarantee
		/// </summary>
		/// <remarks>
		/// A Guarantee can be canceled for orders that no longer require a guarantee fraud protection. Example: Your customer cancels the order and you issue a refund, you run out of stock for the ordered item, or you cancel the order. This is equivalent to clicking the “cancel guarantee request” button in the case console. Before canceling a guarantee request you should check the Guarantee Disposition using GET a Case. In some instances the Guarantee may have a declined decision, in which case it does not need to be cancelled.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The id for the case whose guarantee is being cancelled.</param>
		/// <param name="body"></param>
		/// <returns>Task of ApiResponse (GuaranteeRequest)</returns>
		System.Threading.Tasks.Task<ApiResponse<GuaranteeRequest>> CancelGuaranteeAsyncWithHttpInfo(int? caseId, CancelGuaranteeRequest body);
		/// <summary>
		/// Create guarantee
		/// </summary>
		/// <remarks>
		/// A case can be manually submitted for Guarantee. This is equivalent to clicking the Guarantee button in the case console. Note that you have 7 days from the order date to submit a case for Guarantee.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>Task of GuaranteeRequest</returns>
		System.Threading.Tasks.Task<GuaranteeRequest> CreateGuaranteeAsync(CreateGuaranteeRequest body);

		/// <summary>
		/// Create guarantee
		/// </summary>
		/// <remarks>
		/// A case can be manually submitted for Guarantee. This is equivalent to clicking the Guarantee button in the case console. Note that you have 7 days from the order date to submit a case for Guarantee.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>Task of ApiResponse (GuaranteeRequest)</returns>
		System.Threading.Tasks.Task<ApiResponse<GuaranteeRequest>> CreateGuaranteeAsyncWithHttpInfo(CreateGuaranteeRequest body);
		#endregion Asynchronous Operations
	}

	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class GuaranteesApi : IGuaranteesApi
	{
		private AspDotNetStorefront.Signifyd.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Initializes a new instance of the <see cref="GuaranteesApi"/> class.
		/// </summary>
		/// <returns></returns>
		public GuaranteesApi(String basePath)
		{
			this.Configuration = new Configuration(new ApiClient(basePath));

			ExceptionFactory = AspDotNetStorefront.Signifyd.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if(Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="GuaranteesApi"/> class
		/// using Configuration object
		/// </summary>
		/// <param name="configuration">An instance of Configuration</param>
		/// <returns></returns>
		public GuaranteesApi(Configuration configuration = null)
		{
			if(configuration == null) // use the default one in Configuration
				this.Configuration = Configuration.Default;
			else
				this.Configuration = configuration;

			ExceptionFactory = AspDotNetStorefront.Signifyd.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if(Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public String GetBasePath()
		{
			return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public Configuration Configuration { get; set; }

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public AspDotNetStorefront.Signifyd.Client.ExceptionFactory ExceptionFactory
		{
			get
			{
				if(_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				{
					throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

		/// <summary>
		/// Cancel Guarantee A Guarantee can be canceled for orders that no longer require a guarantee fraud protection. Example: Your customer cancels the order and you issue a refund, you run out of stock for the ordered item, or you cancel the order. This is equivalent to clicking the “cancel guarantee request” button in the case console. Before canceling a guarantee request you should check the Guarantee Disposition using GET a Case. In some instances the Guarantee may have a declined decision, in which case it does not need to be cancelled.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The id for the case whose guarantee is being cancelled.</param>
		/// <param name="body"></param>
		/// <returns>GuaranteeRequest</returns>
		public GuaranteeRequest CancelGuarantee(int? caseId, CancelGuaranteeRequest body)
		{
			ApiResponse<GuaranteeRequest> localVarResponse = CancelGuaranteeWithHttpInfo(caseId, body);
			return localVarResponse.Data;
		}

		/// <summary>
		/// Cancel Guarantee A Guarantee can be canceled for orders that no longer require a guarantee fraud protection. Example: Your customer cancels the order and you issue a refund, you run out of stock for the ordered item, or you cancel the order. This is equivalent to clicking the “cancel guarantee request” button in the case console. Before canceling a guarantee request you should check the Guarantee Disposition using GET a Case. In some instances the Guarantee may have a declined decision, in which case it does not need to be cancelled.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The id for the case whose guarantee is being cancelled.</param>
		/// <param name="body"></param>
		/// <returns>ApiResponse of GuaranteeRequest</returns>
		public ApiResponse<GuaranteeRequest> CancelGuaranteeWithHttpInfo(int? caseId, CancelGuaranteeRequest body)
		{
			// verify the required parameter 'caseId' is set
			if(caseId == null)
				throw new ApiException(400, "Missing required parameter 'caseId' when calling GuaranteesApi->CancelGuarantee");
			// verify the required parameter 'body' is set
			if(body == null)
				throw new ApiException(400, "Missing required parameter 'body' when calling GuaranteesApi->CancelGuarantee");

			var localVarPath = "/cases/{caseId}/guarantee";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if(caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
			if(body != null && body.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
			}
			else
			{
				localVarPostBody = body; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("CancelGuarantee", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<GuaranteeRequest>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(GuaranteeRequest)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GuaranteeRequest)));
		}

		/// <summary>
		/// Cancel Guarantee A Guarantee can be canceled for orders that no longer require a guarantee fraud protection. Example: Your customer cancels the order and you issue a refund, you run out of stock for the ordered item, or you cancel the order. This is equivalent to clicking the “cancel guarantee request” button in the case console. Before canceling a guarantee request you should check the Guarantee Disposition using GET a Case. In some instances the Guarantee may have a declined decision, in which case it does not need to be cancelled.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The id for the case whose guarantee is being cancelled.</param>
		/// <param name="body"></param>
		/// <returns>Task of GuaranteeRequest</returns>
		public async System.Threading.Tasks.Task<GuaranteeRequest> CancelGuaranteeAsync(int? caseId, CancelGuaranteeRequest body)
		{
			ApiResponse<GuaranteeRequest> localVarResponse = await CancelGuaranteeAsyncWithHttpInfo(caseId, body);
			return localVarResponse.Data;

		}

		/// <summary>
		/// Cancel Guarantee A Guarantee can be canceled for orders that no longer require a guarantee fraud protection. Example: Your customer cancels the order and you issue a refund, you run out of stock for the ordered item, or you cancel the order. This is equivalent to clicking the “cancel guarantee request” button in the case console. Before canceling a guarantee request you should check the Guarantee Disposition using GET a Case. In some instances the Guarantee may have a declined decision, in which case it does not need to be cancelled.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The id for the case whose guarantee is being cancelled.</param>
		/// <param name="body"></param>
		/// <returns>Task of ApiResponse (GuaranteeRequest)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<GuaranteeRequest>> CancelGuaranteeAsyncWithHttpInfo(int? caseId, CancelGuaranteeRequest body)
		{
			// verify the required parameter 'caseId' is set
			if(caseId == null)
				throw new ApiException(400, "Missing required parameter 'caseId' when calling GuaranteesApi->CancelGuarantee");
			// verify the required parameter 'body' is set
			if(body == null)
				throw new ApiException(400, "Missing required parameter 'body' when calling GuaranteesApi->CancelGuarantee");

			var localVarPath = "/cases/{caseId}/guarantee";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if(caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter
			if(body != null && body.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
			}
			else
			{
				localVarPostBody = body; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("CancelGuarantee", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<GuaranteeRequest>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(GuaranteeRequest)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GuaranteeRequest)));
		}

		/// <summary>
		/// Create guarantee A case can be manually submitted for Guarantee. This is equivalent to clicking the Guarantee button in the case console. Note that you have 7 days from the order date to submit a case for Guarantee.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>GuaranteeRequest</returns>
		public GuaranteeRequest CreateGuarantee(CreateGuaranteeRequest body)
		{
			ApiResponse<GuaranteeRequest> localVarResponse = CreateGuaranteeWithHttpInfo(body);
			return localVarResponse.Data;
		}

		/// <summary>
		/// Create guarantee A case can be manually submitted for Guarantee. This is equivalent to clicking the Guarantee button in the case console. Note that you have 7 days from the order date to submit a case for Guarantee.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>ApiResponse of GuaranteeRequest</returns>
		public ApiResponse<GuaranteeRequest> CreateGuaranteeWithHttpInfo(CreateGuaranteeRequest body)
		{
			// verify the required parameter 'body' is set
			if(body == null)
				throw new ApiException(400, "Missing required parameter 'body' when calling GuaranteesApi->CreateGuarantee");

			var localVarPath = "/guarantees";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if(body != null && body.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
			}
			else
			{
				localVarPostBody = body; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("CreateGuarantee", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<GuaranteeRequest>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(GuaranteeRequest)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GuaranteeRequest)));
		}

		/// <summary>
		/// Create guarantee A case can be manually submitted for Guarantee. This is equivalent to clicking the Guarantee button in the case console. Note that you have 7 days from the order date to submit a case for Guarantee.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>Task of GuaranteeRequest</returns>
		public async System.Threading.Tasks.Task<GuaranteeRequest> CreateGuaranteeAsync(CreateGuaranteeRequest body)
		{
			ApiResponse<GuaranteeRequest> localVarResponse = await CreateGuaranteeAsyncWithHttpInfo(body);
			return localVarResponse.Data;

		}

		/// <summary>
		/// Create guarantee A case can be manually submitted for Guarantee. This is equivalent to clicking the Guarantee button in the case console. Note that you have 7 days from the order date to submit a case for Guarantee.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>Task of ApiResponse (GuaranteeRequest)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<GuaranteeRequest>> CreateGuaranteeAsyncWithHttpInfo(CreateGuaranteeRequest body)
		{
			// verify the required parameter 'body' is set
			if(body == null)
				throw new ApiException(400, "Missing required parameter 'body' when calling GuaranteesApi->CreateGuarantee");

			var localVarPath = "/guarantees";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if(body != null && body.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
			}
			else
			{
				localVarPostBody = body; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("CreateGuarantee", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<GuaranteeRequest>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(GuaranteeRequest)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GuaranteeRequest)));
		}

	}
}
