// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
/* 
 * Signifyd API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AspDotNetStorefront.Signifyd.Client;
using AspDotNetStorefront.Signifyd.Model;

namespace AspDotNetStorefront.Signifyd.Api
{
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public interface ICasesApi : IApiAccessor
	{
		#region Synchronous Operations
		/// <summary>
		/// Create a Case
		/// </summary>
		/// <remarks>
		/// To send Signifyd an order for review you&#39;ll need to create a case. If you are on a complete plan this will also automatically submit the order for guarantee. For the best decision results we recommend sending as much data as you have available. We have labeled fields as required if we believe they are necessary to provide a more accurate decision.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>CreateACaseResponse</returns>
		CreateACaseResponse CreateACase(CaseCreation body);

		/// <summary>
		/// Create a Case
		/// </summary>
		/// <remarks>
		/// To send Signifyd an order for review you&#39;ll need to create a case. If you are on a complete plan this will also automatically submit the order for guarantee. For the best decision results we recommend sending as much data as you have available. We have labeled fields as required if we believe they are necessary to provide a more accurate decision.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>ApiResponse of CreateACaseResponse</returns>
		ApiResponse<CreateACaseResponse> CreateACaseWithHttpInfo(CaseCreation body);
		/// <summary>
		/// Get a Case
		/// </summary>
		/// <remarks>
		/// Endpoint for retrieving individual cases by investigation id, the unique case identifier returned when creating a case.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The unique identifier for the case that you want to retrieve.  This identifier is issued upon case creation.</param>
		/// <returns>ModelCase</returns>
		ModelCase GetACase(int? caseId);

		/// <summary>
		/// Get a Case
		/// </summary>
		/// <remarks>
		/// Endpoint for retrieving individual cases by investigation id, the unique case identifier returned when creating a case.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The unique identifier for the case that you want to retrieve.  This identifier is issued upon case creation.</param>
		/// <returns>ApiResponse of ModelCase</returns>
		ApiResponse<ModelCase> GetACaseWithHttpInfo(int? caseId);
		#endregion Synchronous Operations
		#region Asynchronous Operations
		/// <summary>
		/// Create a Case
		/// </summary>
		/// <remarks>
		/// To send Signifyd an order for review you&#39;ll need to create a case. If you are on a complete plan this will also automatically submit the order for guarantee. For the best decision results we recommend sending as much data as you have available. We have labeled fields as required if we believe they are necessary to provide a more accurate decision.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>Task of CreateACaseResponse</returns>
		System.Threading.Tasks.Task<CreateACaseResponse> CreateACaseAsync(CaseCreation body);

		/// <summary>
		/// Create a Case
		/// </summary>
		/// <remarks>
		/// To send Signifyd an order for review you&#39;ll need to create a case. If you are on a complete plan this will also automatically submit the order for guarantee. For the best decision results we recommend sending as much data as you have available. We have labeled fields as required if we believe they are necessary to provide a more accurate decision.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>Task of ApiResponse (CreateACaseResponse)</returns>
		System.Threading.Tasks.Task<ApiResponse<CreateACaseResponse>> CreateACaseAsyncWithHttpInfo(CaseCreation body);
		/// <summary>
		/// Get a Case
		/// </summary>
		/// <remarks>
		/// Endpoint for retrieving individual cases by investigation id, the unique case identifier returned when creating a case.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The unique identifier for the case that you want to retrieve.  This identifier is issued upon case creation.</param>
		/// <returns>Task of ModelCase</returns>
		System.Threading.Tasks.Task<ModelCase> GetACaseAsync(int? caseId);

		/// <summary>
		/// Get a Case
		/// </summary>
		/// <remarks>
		/// Endpoint for retrieving individual cases by investigation id, the unique case identifier returned when creating a case.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The unique identifier for the case that you want to retrieve.  This identifier is issued upon case creation.</param>
		/// <returns>Task of ApiResponse (ModelCase)</returns>
		System.Threading.Tasks.Task<ApiResponse<ModelCase>> GetACaseAsyncWithHttpInfo(int? caseId);
		#endregion Asynchronous Operations
	}

	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class CasesApi : ICasesApi
	{
		private AspDotNetStorefront.Signifyd.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Initializes a new instance of the <see cref="CasesApi"/> class.
		/// </summary>
		/// <returns></returns>
		public CasesApi(String basePath)
		{
			this.Configuration = new Configuration(new ApiClient(basePath));

			ExceptionFactory = AspDotNetStorefront.Signifyd.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if(Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="CasesApi"/> class
		/// using Configuration object
		/// </summary>
		/// <param name="configuration">An instance of Configuration</param>
		/// <returns></returns>
		public CasesApi(Configuration configuration = null)
		{
			if(configuration == null) // use the default one in Configuration
				this.Configuration = Configuration.Default;
			else
				this.Configuration = configuration;

			ExceptionFactory = AspDotNetStorefront.Signifyd.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if(Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public String GetBasePath()
		{
			return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
		}

		/// <summary>
		/// Sets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		[Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
		public void SetBasePath(String basePath)
		{
			// do nothing
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public Configuration Configuration { get; set; }

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public AspDotNetStorefront.Signifyd.Client.ExceptionFactory ExceptionFactory
		{
			get
			{
				if(_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				{
					throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

		/// <summary>
		/// Gets the default header.
		/// </summary>
		/// <returns>Dictionary of HTTP header</returns>
		[Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
		public Dictionary<String, String> DefaultHeader()
		{
			return this.Configuration.DefaultHeader;
		}

		/// <summary>
		/// Add default header.
		/// </summary>
		/// <param name="key">Header field name.</param>
		/// <param name="value">Header field value.</param>
		/// <returns></returns>
		[Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
		public void AddDefaultHeader(string key, string value)
		{
			this.Configuration.AddDefaultHeader(key, value);
		}

		/// <summary>
		/// Create a Case To send Signifyd an order for review you&#39;ll need to create a case. If you are on a complete plan this will also automatically submit the order for guarantee. For the best decision results we recommend sending as much data as you have available. We have labeled fields as required if we believe they are necessary to provide a more accurate decision.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>CreateACaseResponse</returns>
		public CreateACaseResponse CreateACase(CaseCreation body)
		{
			ApiResponse<CreateACaseResponse> localVarResponse = CreateACaseWithHttpInfo(body);
			return localVarResponse.Data;
		}

		/// <summary>
		/// Create a Case To send Signifyd an order for review you&#39;ll need to create a case. If you are on a complete plan this will also automatically submit the order for guarantee. For the best decision results we recommend sending as much data as you have available. We have labeled fields as required if we believe they are necessary to provide a more accurate decision.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>ApiResponse of CreateACaseResponse</returns>
		public ApiResponse<CreateACaseResponse> CreateACaseWithHttpInfo(CaseCreation body)
		{
			// verify the required parameter 'body' is set
			if(body == null)
				throw new ApiException(400, "Missing required parameter 'body' when calling CasesApi->CreateACase");

			var localVarPath = "/cases";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if(body != null && body.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
			}
			else
			{
				localVarPostBody = body; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("CreateACase", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<CreateACaseResponse>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(CreateACaseResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateACaseResponse)));
		}

		/// <summary>
		/// Create a Case To send Signifyd an order for review you&#39;ll need to create a case. If you are on a complete plan this will also automatically submit the order for guarantee. For the best decision results we recommend sending as much data as you have available. We have labeled fields as required if we believe they are necessary to provide a more accurate decision.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>Task of CreateACaseResponse</returns>
		public async System.Threading.Tasks.Task<CreateACaseResponse> CreateACaseAsync(CaseCreation body)
		{
			ApiResponse<CreateACaseResponse> localVarResponse = await CreateACaseAsyncWithHttpInfo(body);
			return localVarResponse.Data;

		}

		/// <summary>
		/// Create a Case To send Signifyd an order for review you&#39;ll need to create a case. If you are on a complete plan this will also automatically submit the order for guarantee. For the best decision results we recommend sending as much data as you have available. We have labeled fields as required if we believe they are necessary to provide a more accurate decision.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>Task of ApiResponse (CreateACaseResponse)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<CreateACaseResponse>> CreateACaseAsyncWithHttpInfo(CaseCreation body)
		{
			// verify the required parameter 'body' is set
			if(body == null)
				throw new ApiException(400, "Missing required parameter 'body' when calling CasesApi->CreateACase");

			var localVarPath = "/cases";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if(body != null && body.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
			}
			else
			{
				localVarPostBody = body; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("CreateACase", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<CreateACaseResponse>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(CreateACaseResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateACaseResponse)));
		}

		/// <summary>
		/// Get a Case Endpoint for retrieving individual cases by investigation id, the unique case identifier returned when creating a case.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The unique identifier for the case that you want to retrieve.  This identifier is issued upon case creation.</param>
		/// <returns>ModelCase</returns>
		public ModelCase GetACase(int? caseId)
		{
			ApiResponse<ModelCase> localVarResponse = GetACaseWithHttpInfo(caseId);
			return localVarResponse.Data;
		}

		/// <summary>
		/// Get a Case Endpoint for retrieving individual cases by investigation id, the unique case identifier returned when creating a case.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The unique identifier for the case that you want to retrieve.  This identifier is issued upon case creation.</param>
		/// <returns>ApiResponse of ModelCase</returns>
		public ApiResponse<ModelCase> GetACaseWithHttpInfo(int? caseId)
		{
			// verify the required parameter 'caseId' is set
			if(caseId == null)
				throw new ApiException(400, "Missing required parameter 'caseId' when calling CasesApi->GetACase");

			var localVarPath = "/cases/{caseId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if(caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("GetACase", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<ModelCase>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(ModelCase)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelCase)));
		}

		/// <summary>
		/// Get a Case Endpoint for retrieving individual cases by investigation id, the unique case identifier returned when creating a case.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The unique identifier for the case that you want to retrieve.  This identifier is issued upon case creation.</param>
		/// <returns>Task of ModelCase</returns>
		public async System.Threading.Tasks.Task<ModelCase> GetACaseAsync(int? caseId)
		{
			ApiResponse<ModelCase> localVarResponse = await GetACaseAsyncWithHttpInfo(caseId);
			return localVarResponse.Data;

		}

		/// <summary>
		/// Get a Case Endpoint for retrieving individual cases by investigation id, the unique case identifier returned when creating a case.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="caseId">The unique identifier for the case that you want to retrieve.  This identifier is issued upon case creation.</param>
		/// <returns>Task of ApiResponse (ModelCase)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<ModelCase>> GetACaseAsyncWithHttpInfo(int? caseId)
		{
			// verify the required parameter 'caseId' is set
			if(caseId == null)
				throw new ApiException(400, "Missing required parameter 'caseId' when calling CasesApi->GetACase");

			var localVarPath = "/cases/{caseId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if(caseId != null) localVarPathParams.Add("caseId", Configuration.ApiClient.ParameterToString(caseId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("GetACase", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<ModelCase>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(ModelCase)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelCase)));
		}

	}
}
