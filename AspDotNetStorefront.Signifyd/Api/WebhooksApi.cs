// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
/* 
 * Signifyd API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AspDotNetStorefront.Signifyd.Client;
using AspDotNetStorefront.Signifyd.Model;

namespace AspDotNetStorefront.Signifyd.Api
{
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public interface IWebhooksApi : IApiAccessor
	{
		/// <summary>
		/// Create
		/// </summary>
		/// <remarks>
		/// Create multiple webhooks events for a team.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body">Create new webhook events for team accounts. Creating a webhook for events that already exist will result in an error. Use the update method to modify existing webhook events.</param>
		/// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
		List<Webhook> Create(WebhookRequestContainer body);

		/// <summary>
		/// Delete
		/// </summary>
		/// <remarks>
		/// Delete an existing webhook identified by its numeric id.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>ApiResponse of Object(void)</returns>
		void Delete(int hookId);

		/// <summary>
		/// List
		/// </summary>
		/// <remarks>
		/// Retrieve a list of the current webhooks for a team identified by the API key used.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
		List<Webhook> List();

		/// <summary>
		/// Update
		/// </summary>
		/// <remarks>
		/// Update existing webhook events for a team en masse, overwriting existing topics with new URLs. Existing webhooks whose events were not specified in the request will remain intact.
		/// </remarks>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
		List<Webhook> Update(WebhookRequestContainer body);
	}

	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class WebhooksApi : IWebhooksApi
	{
		private AspDotNetStorefront.Signifyd.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Initializes a new instance of the <see cref="WebhooksApi"/> class.
		/// </summary>
		/// <returns></returns>
		public WebhooksApi(String basePath)
		{
			this.Configuration = new Configuration(new ApiClient(basePath));

			ExceptionFactory = AspDotNetStorefront.Signifyd.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if(Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="WebhooksApi"/> class
		/// using Configuration object
		/// </summary>
		/// <param name="configuration">An instance of Configuration</param>
		/// <returns></returns>
		public WebhooksApi(Configuration configuration = null)
		{
			if(configuration == null) // use the default one in Configuration
				this.Configuration = Configuration.Default;
			else
				this.Configuration = configuration;

			ExceptionFactory = AspDotNetStorefront.Signifyd.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if(Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public String GetBasePath()
		{
			return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public Configuration Configuration { get; set; }

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public AspDotNetStorefront.Signifyd.Client.ExceptionFactory ExceptionFactory
		{
			get
			{
				if(_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				{
					throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

		/// <summary>
		/// Create multiple webhooks events for a team.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body">Create new webhook events for team accounts. Creating a webhook for events that already exist will result in an error. Use the update method to modify existing webhook events.</param>
		/// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
		public List<Webhook> Create(WebhookRequestContainer body)
		{
			// verify the required parameter 'body' is set
			if(body == null)
				throw new ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->Create1");

			var localVarPath = "/teams/webhooks";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if(body != null && body.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
			}
			else
			{
				localVarPostBody = body; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
				Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("Create1", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<List<Webhook>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<Webhook>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Webhook>)))
				.Data;
		}

		/// <summary>
		/// Delete an existing webhook identified by its numeric id.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>ApiResponse of Object(void)</returns>
		public void Delete(int hookId)
		{

			var localVarPath = "/teams/webhooks/{hookId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			localVarPathParams.Add("hookId", Configuration.ApiClient.ParameterToString(hookId)); // path parameter

			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
				Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("DeleteManageAWebhook", localVarResponse);
				if(exception != null) throw exception;
			}
		}

		/// <summary>
		/// Retrieve a list of the current webhooks for a team identified by the API key used.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
		public List<Webhook> List()
		{

			var localVarPath = "/teams/webhooks";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
				Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("List", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<List<Webhook>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<Webhook>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Webhook>)))
				.Data;
		}

		/// <summary>
		/// Update existing webhook events for a team en masse, overwriting existing topics with new URLs. Existing webhooks whose events were not specified in the request will remain intact.
		/// </summary>
		/// <exception cref="AspDotNetStorefront.Signifyd.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="body"></param>
		/// <returns>ApiResponse of List&lt;Webhook&gt;</returns>
		public List<Webhook> Update(WebhookRequestContainer body)
		{
			// verify the required parameter 'body' is set
			if(body == null)
				throw new ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->Update1");

			var localVarPath = "/teams/webhooks";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new Dictionary<String, String>();
			var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
				"application/json"
			};
			String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
				"application/json"
			};
			String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if(localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if(body != null && body.GetType() != typeof(byte[]))
			{
				localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
			}
			else
			{
				localVarPostBody = body; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
				Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
				localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if(ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("Update1", localVarResponse);
				if(exception != null) throw exception;
			}

			return new ApiResponse<List<Webhook>>(localVarStatusCode,
				localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
				(List<Webhook>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Webhook>)))
				.Data;
		}
	}
}
