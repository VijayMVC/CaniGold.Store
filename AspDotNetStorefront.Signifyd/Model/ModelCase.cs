// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
/* 
 * Signifyd API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AspDotNetStorefront.Signifyd.Client.SwaggerDateConverter;

namespace AspDotNetStorefront.Signifyd.Model
{
    /// <summary>
    /// ModelCase
    /// </summary>
    [DataContract]
    public partial class ModelCase :  IEquatable<ModelCase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelCase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelCase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelCase" /> class.
        /// </summary>
        /// <param name="GuaranteeEligible">boolean value indicating if a guarantee can be requested for this Case.  If a guarantee has already been requested for this case, then this value will be &#39;false&#39;. (required).</param>
        /// <param name="Status">Status (required).</param>
        /// <param name="CaseId">The unique identifier assigned to the case when it is created. (required).</param>
        /// <param name="Score">A value from 0-1000 indicating the likelihood that the order/transaction is fraud. 0 indicates the highest risk, 1000 inidicates the lowest risk. (required).</param>
        /// <param name="Uuid">A universally unique id assigned to the case. (required).</param>
        /// <param name="Headline">The headline (aka name) assigned to the case. (required).</param>
        /// <param name="OrderId">The unique identifier for the order that was provided when the case was created. (required).</param>
        /// <param name="OrderAmount">The total price of the order, including shipping price and taxes. (required).</param>
        /// <param name="AssociatedTeam">The id for the team with which this case is associated. (required).</param>
        /// <param name="ReviewDisposition">ReviewDisposition (required).</param>
        /// <param name="CreatedAt">The date and time when the case was created. (required).</param>
        /// <param name="UpdatedAt">The date and time when the case was last updated. A (required).</param>
        /// <param name="GuaranteeDisposition">GuaranteeDisposition.</param>
        /// <param name="InvestigationId">DEPRECATED.  See caseId..</param>
        /// <param name="OrderDate">The date and time when the order was placed..</param>
        public ModelCase(bool? GuaranteeEligible = default(bool?), CaseStatus Status = default(CaseStatus), double? CaseId = default(double?), double? Score = default(double?), string Uuid = default(string), string Headline = default(string), string OrderId = default(string), double? OrderAmount = default(double?), Team AssociatedTeam = default(Team), ReviewDisposition ReviewDisposition = default(ReviewDisposition), string CreatedAt = default(string), string UpdatedAt = default(string), GuaranteeDisposition GuaranteeDisposition = default(GuaranteeDisposition), double? InvestigationId = default(double?), string OrderDate = default(string))
        {
            // to ensure "GuaranteeEligible" is required (not null)
            if (GuaranteeEligible == null)
            {
                throw new InvalidDataException("GuaranteeEligible is a required property for ModelCase and cannot be null");
            }
            else
            {
                this.GuaranteeEligible = GuaranteeEligible;
            }
            // to ensure "Status" is required (not null)
            this.Status = Status;

            // to ensure "CaseId" is required (not null)
            if (CaseId == null)
            {
                throw new InvalidDataException("CaseId is a required property for ModelCase and cannot be null");
            }
            else
            {
                this.CaseId = CaseId;
            }
            // to ensure "Score" is required (not null)
            if (Score == null)
            {
                throw new InvalidDataException("Score is a required property for ModelCase and cannot be null");
            }
            else
            {
                this.Score = Score;
            }
            // to ensure "Uuid" is required (not null)
            if (Uuid == null)
            {
                throw new InvalidDataException("Uuid is a required property for ModelCase and cannot be null");
            }
            else
            {
                this.Uuid = Uuid;
            }
            // to ensure "Headline" is required (not null)
            if (Headline == null)
            {
                throw new InvalidDataException("Headline is a required property for ModelCase and cannot be null");
            }
            else
            {
                this.Headline = Headline;
            }
            // to ensure "OrderId" is required (not null)
            if (OrderId == null)
            {
                throw new InvalidDataException("OrderId is a required property for ModelCase and cannot be null");
            }
            else
            {
                this.OrderId = OrderId;
            }
            // to ensure "OrderAmount" is required (not null)
            if (OrderAmount == null)
            {
                throw new InvalidDataException("OrderAmount is a required property for ModelCase and cannot be null");
            }
            else
            {
                this.OrderAmount = OrderAmount;
            }
            // to ensure "AssociatedTeam" is required (not null)
            if (AssociatedTeam == null)
            {
                throw new InvalidDataException("AssociatedTeam is a required property for ModelCase and cannot be null");
            }
            else
            {
                this.AssociatedTeam = AssociatedTeam;
            }
            // to ensure "ReviewDisposition" is required (not null)
            this.ReviewDisposition = ReviewDisposition;

            // to ensure "CreatedAt" is required (not null)
            if (CreatedAt == null)
            {
                throw new InvalidDataException("CreatedAt is a required property for ModelCase and cannot be null");
            }
            else
            {
                this.CreatedAt = CreatedAt;
            }
            // to ensure "UpdatedAt" is required (not null)
            if (UpdatedAt == null)
            {
                throw new InvalidDataException("UpdatedAt is a required property for ModelCase and cannot be null");
            }
            else
            {
                this.UpdatedAt = UpdatedAt;
            }
            this.GuaranteeDisposition = GuaranteeDisposition;
            this.InvestigationId = InvestigationId;
            this.OrderDate = OrderDate;
        }
        
        /// <summary>
        /// boolean value indicating if a guarantee can be requested for this Case.  If a guarantee has already been requested for this case, then this value will be &#39;false&#39;.
        /// </summary>
        /// <value>boolean value indicating if a guarantee can be requested for this Case.  If a guarantee has already been requested for this case, then this value will be &#39;false&#39;.</value>
        [DataMember(Name="guaranteeEligible", EmitDefaultValue=false)]
        public bool? GuaranteeEligible { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public CaseStatus Status { get; set; }

        /// <summary>
        /// The unique identifier assigned to the case when it is created.
        /// </summary>
        /// <value>The unique identifier assigned to the case when it is created.</value>
        [DataMember(Name="caseId", EmitDefaultValue=false)]
        public double? CaseId { get; set; }

        /// <summary>
        /// A value from 0-1000 indicating the likelihood that the order/transaction is fraud. 0 indicates the highest risk, 1000 inidicates the lowest risk.
        /// </summary>
        /// <value>A value from 0-1000 indicating the likelihood that the order/transaction is fraud. 0 indicates the highest risk, 1000 inidicates the lowest risk.</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// A universally unique id assigned to the case.
        /// </summary>
        /// <value>A universally unique id assigned to the case.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// The headline (aka name) assigned to the case.
        /// </summary>
        /// <value>The headline (aka name) assigned to the case.</value>
        [DataMember(Name="headline", EmitDefaultValue=false)]
        public string Headline { get; set; }

        /// <summary>
        /// The unique identifier for the order that was provided when the case was created.
        /// </summary>
        /// <value>The unique identifier for the order that was provided when the case was created.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// The total price of the order, including shipping price and taxes.
        /// </summary>
        /// <value>The total price of the order, including shipping price and taxes.</value>
        [DataMember(Name="orderAmount", EmitDefaultValue=false)]
        public double? OrderAmount { get; set; }

        /// <summary>
        /// The id for the team with which this case is associated.
        /// </summary>
        /// <value>The id for the team with which this case is associated.</value>
        [DataMember(Name="associatedTeam", EmitDefaultValue=false)]
        public Team AssociatedTeam { get; set; }

        /// <summary>
        /// Gets or Sets ReviewDisposition
        /// </summary>
        [DataMember(Name="reviewDisposition", EmitDefaultValue=false)]
        public ReviewDisposition ReviewDisposition { get; set; }

        /// <summary>
        /// The date and time when the case was created.
        /// </summary>
        /// <value>The date and time when the case was created.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The date and time when the case was last updated. A
        /// </summary>
        /// <value>The date and time when the case was last updated. A</value>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets GuaranteeDisposition
        /// </summary>
        [DataMember(Name="guaranteeDisposition", EmitDefaultValue=false)]
        public GuaranteeDisposition GuaranteeDisposition { get; set; }

        /// <summary>
        /// DEPRECATED.  See caseId.
        /// </summary>
        /// <value>DEPRECATED.  See caseId.</value>
        [DataMember(Name="investigationId", EmitDefaultValue=false)]
        public double? InvestigationId { get; set; }

        /// <summary>
        /// The date and time when the order was placed.
        /// </summary>
        /// <value>The date and time when the order was placed.</value>
        [DataMember(Name="orderDate", EmitDefaultValue=false)]
        public string OrderDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelCase {\n");
            sb.Append("  GuaranteeEligible: ").Append(GuaranteeEligible).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CaseId: ").Append(CaseId).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderAmount: ").Append(OrderAmount).Append("\n");
            sb.Append("  AssociatedTeam: ").Append(AssociatedTeam).Append("\n");
            sb.Append("  ReviewDisposition: ").Append(ReviewDisposition).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  GuaranteeDisposition: ").Append(GuaranteeDisposition).Append("\n");
            sb.Append("  InvestigationId: ").Append(InvestigationId).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ModelCase);
        }

        /// <summary>
        /// Returns true if ModelCase instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelCase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelCase other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GuaranteeEligible == other.GuaranteeEligible ||
                    this.GuaranteeEligible != null &&
                    this.GuaranteeEligible.Equals(other.GuaranteeEligible)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.CaseId == other.CaseId ||
                    this.CaseId != null &&
                    this.CaseId.Equals(other.CaseId)
                ) && 
                (
                    this.Score == other.Score ||
                    this.Score != null &&
                    this.Score.Equals(other.Score)
                ) && 
                (
                    this.Uuid == other.Uuid ||
                    this.Uuid != null &&
                    this.Uuid.Equals(other.Uuid)
                ) && 
                (
                    this.Headline == other.Headline ||
                    this.Headline != null &&
                    this.Headline.Equals(other.Headline)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.OrderAmount == other.OrderAmount ||
                    this.OrderAmount != null &&
                    this.OrderAmount.Equals(other.OrderAmount)
                ) && 
                (
                    this.AssociatedTeam == other.AssociatedTeam ||
                    this.AssociatedTeam != null &&
                    this.AssociatedTeam.Equals(other.AssociatedTeam)
                ) && 
                (
                    this.ReviewDisposition == other.ReviewDisposition ||
                    this.ReviewDisposition.Equals(other.ReviewDisposition)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    this.GuaranteeDisposition == other.GuaranteeDisposition ||
                    this.GuaranteeDisposition.Equals(other.GuaranteeDisposition)
                ) && 
                (
                    this.InvestigationId == other.InvestigationId ||
                    this.InvestigationId != null &&
                    this.InvestigationId.Equals(other.InvestigationId)
                ) && 
                (
                    this.OrderDate == other.OrderDate ||
                    this.OrderDate != null &&
                    this.OrderDate.Equals(other.OrderDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GuaranteeEligible != null)
                    hash = hash * 59 + this.GuaranteeEligible.GetHashCode();
                hash = hash * 59 + this.Status.GetHashCode();
                if (this.CaseId != null)
                    hash = hash * 59 + this.CaseId.GetHashCode();
                if (this.Score != null)
                    hash = hash * 59 + this.Score.GetHashCode();
                if (this.Uuid != null)
                    hash = hash * 59 + this.Uuid.GetHashCode();
                if (this.Headline != null)
                    hash = hash * 59 + this.Headline.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.OrderAmount != null)
                    hash = hash * 59 + this.OrderAmount.GetHashCode();
                if (this.AssociatedTeam != null)
                    hash = hash * 59 + this.AssociatedTeam.GetHashCode();
                hash = hash * 59 + this.ReviewDisposition.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                hash = hash * 59 + this.GuaranteeDisposition.GetHashCode();
                if (this.InvestigationId != null)
                    hash = hash * 59 + this.InvestigationId.GetHashCode();
                if (this.OrderDate != null)
                    hash = hash * 59 + this.OrderDate.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
