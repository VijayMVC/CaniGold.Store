// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
/* 
 * Signifyd API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AspDotNetStorefront.Signifyd.Client.SwaggerDateConverter;

namespace AspDotNetStorefront.Signifyd.Model
{
    /// <summary>
    /// DeliveryAddress
    /// </summary>
    [DataContract]
    public partial class DeliveryAddress :  IEquatable<DeliveryAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryAddress" /> class.
        /// </summary>
        /// <param name="IsDeliverable">Indicates whether the Postal Service can deliver mail to this address..</param>
        /// <param name="IsReceivingMail">Indicates if the address is currently receiving mail. Possible values are true, false, or null..</param>
        /// <param name="Type">This indicates the US Postal Service opinion about whether this address is primarily a “Business” or “Residential”..</param>
        /// <param name="DeliveryPoint">Only valid for US address LocationType. Indicates to the US Postal Service whether deliver of mail requires special handling. One of: CommercialMailDrop, POBoxThrowback, POBox, MultiUnit, SingleUnit..</param>
        /// <param name="StreetAddress">The street number and street name..</param>
        /// <param name="Unit">The unit or apartment number..</param>
        /// <param name="City">The city name..</param>
        /// <param name="ProvinceCode">The code or abbreviation for the province..</param>
        /// <param name="PostalCode">The postal code..</param>
        /// <param name="CountryCode">The two-letter ISO-3166 country code. If left blank, we will assume US..</param>
        /// <param name="Latitude">The latitude of the address. Used when address details are not provided. Ignored otherwise..</param>
        /// <param name="Longitude">The longitude of the address. Used when address details are not provided. Ignored otherwise..</param>
        /// <param name="Role">Indicates the roles played by this address.  Example values are ipGeo, billingAddress, and deliveryAddress.</param>
        public DeliveryAddress(bool? IsDeliverable = default(bool?), bool? IsReceivingMail = default(bool?), string Type = default(string), string DeliveryPoint = default(string), string StreetAddress = default(string), string Unit = default(string), string City = default(string), string ProvinceCode = default(string), string PostalCode = default(string), string CountryCode = default(string), double? Latitude = default(double?), double? Longitude = default(double?), string Role = default(string))
        {
            this.IsDeliverable = IsDeliverable;
            this.IsReceivingMail = IsReceivingMail;
            this.Type = Type;
            this.DeliveryPoint = DeliveryPoint;
            this.StreetAddress = StreetAddress;
            this.Unit = Unit;
            this.City = City;
            this.ProvinceCode = ProvinceCode;
            this.PostalCode = PostalCode;
            this.CountryCode = CountryCode;
            this.Latitude = Latitude;
            this.Longitude = Longitude;
            this.Role = Role;
        }
        
        /// <summary>
        /// Indicates whether the Postal Service can deliver mail to this address.
        /// </summary>
        /// <value>Indicates whether the Postal Service can deliver mail to this address.</value>
        [DataMember(Name="isDeliverable", EmitDefaultValue=false)]
        public bool? IsDeliverable { get; set; }

        /// <summary>
        /// Indicates if the address is currently receiving mail. Possible values are true, false, or null.
        /// </summary>
        /// <value>Indicates if the address is currently receiving mail. Possible values are true, false, or null.</value>
        [DataMember(Name="isReceivingMail", EmitDefaultValue=false)]
        public bool? IsReceivingMail { get; set; }

        /// <summary>
        /// This indicates the US Postal Service opinion about whether this address is primarily a “Business” or “Residential”.
        /// </summary>
        /// <value>This indicates the US Postal Service opinion about whether this address is primarily a “Business” or “Residential”.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Only valid for US address LocationType. Indicates to the US Postal Service whether deliver of mail requires special handling. One of: CommercialMailDrop, POBoxThrowback, POBox, MultiUnit, SingleUnit.
        /// </summary>
        /// <value>Only valid for US address LocationType. Indicates to the US Postal Service whether deliver of mail requires special handling. One of: CommercialMailDrop, POBoxThrowback, POBox, MultiUnit, SingleUnit.</value>
        [DataMember(Name="deliveryPoint", EmitDefaultValue=false)]
        public string DeliveryPoint { get; set; }

        /// <summary>
        /// The street number and street name.
        /// </summary>
        /// <value>The street number and street name.</value>
        [DataMember(Name="streetAddress", EmitDefaultValue=false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// The unit or apartment number.
        /// </summary>
        /// <value>The unit or apartment number.</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// The city name.
        /// </summary>
        /// <value>The city name.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// The code or abbreviation for the province.
        /// </summary>
        /// <value>The code or abbreviation for the province.</value>
        [DataMember(Name="provinceCode", EmitDefaultValue=false)]
        public string ProvinceCode { get; set; }

        /// <summary>
        /// The postal code.
        /// </summary>
        /// <value>The postal code.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The two-letter ISO-3166 country code. If left blank, we will assume US.
        /// </summary>
        /// <value>The two-letter ISO-3166 country code. If left blank, we will assume US.</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The latitude of the address. Used when address details are not provided. Ignored otherwise.
        /// </summary>
        /// <value>The latitude of the address. Used when address details are not provided. Ignored otherwise.</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// The longitude of the address. Used when address details are not provided. Ignored otherwise.
        /// </summary>
        /// <value>The longitude of the address. Used when address details are not provided. Ignored otherwise.</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Indicates the roles played by this address.  Example values are ipGeo, billingAddress, and deliveryAddress
        /// </summary>
        /// <value>Indicates the roles played by this address.  Example values are ipGeo, billingAddress, and deliveryAddress</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliveryAddress {\n");
            sb.Append("  IsDeliverable: ").Append(IsDeliverable).Append("\n");
            sb.Append("  IsReceivingMail: ").Append(IsReceivingMail).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DeliveryPoint: ").Append(DeliveryPoint).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  ProvinceCode: ").Append(ProvinceCode).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeliveryAddress);
        }

        /// <summary>
        /// Returns true if DeliveryAddress instances are equal
        /// </summary>
        /// <param name="other">Instance of DeliveryAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryAddress other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.IsDeliverable == other.IsDeliverable ||
                    this.IsDeliverable != null &&
                    this.IsDeliverable.Equals(other.IsDeliverable)
                ) && 
                (
                    this.IsReceivingMail == other.IsReceivingMail ||
                    this.IsReceivingMail != null &&
                    this.IsReceivingMail.Equals(other.IsReceivingMail)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.DeliveryPoint == other.DeliveryPoint ||
                    this.DeliveryPoint != null &&
                    this.DeliveryPoint.Equals(other.DeliveryPoint)
                ) && 
                (
                    this.StreetAddress == other.StreetAddress ||
                    this.StreetAddress != null &&
                    this.StreetAddress.Equals(other.StreetAddress)
                ) && 
                (
                    this.Unit == other.Unit ||
                    this.Unit != null &&
                    this.Unit.Equals(other.Unit)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.ProvinceCode == other.ProvinceCode ||
                    this.ProvinceCode != null &&
                    this.ProvinceCode.Equals(other.ProvinceCode)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.Latitude == other.Latitude ||
                    this.Latitude != null &&
                    this.Latitude.Equals(other.Latitude)
                ) && 
                (
                    this.Longitude == other.Longitude ||
                    this.Longitude != null &&
                    this.Longitude.Equals(other.Longitude)
                ) && 
                (
                    this.Role == other.Role ||
                    this.Role != null &&
                    this.Role.Equals(other.Role)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.IsDeliverable != null)
                    hash = hash * 59 + this.IsDeliverable.GetHashCode();
                if (this.IsReceivingMail != null)
                    hash = hash * 59 + this.IsReceivingMail.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.DeliveryPoint != null)
                    hash = hash * 59 + this.DeliveryPoint.GetHashCode();
                if (this.StreetAddress != null)
                    hash = hash * 59 + this.StreetAddress.GetHashCode();
                if (this.Unit != null)
                    hash = hash * 59 + this.Unit.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.ProvinceCode != null)
                    hash = hash * 59 + this.ProvinceCode.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.Latitude != null)
                    hash = hash * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hash = hash * 59 + this.Longitude.GetHashCode();
                if (this.Role != null)
                    hash = hash * 59 + this.Role.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
