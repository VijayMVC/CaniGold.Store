// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
/* 
 * Signifyd API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AspDotNetStorefront.Signifyd.Client.SwaggerDateConverter;

namespace AspDotNetStorefront.Signifyd.Model
{
    /// <summary>
    /// CaseCreation
    /// </summary>
    [DataContract]
    public partial class CaseCreation :  IEquatable<CaseCreation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CaseCreation" /> class.
        /// </summary>
        /// <param name="Purchase">Purchase.</param>
        /// <param name="Recipient">Recipient.</param>
        /// <param name="Card">Card.</param>
        /// <param name="UserAccount">UserAccount.</param>
        /// <param name="Seller">Seller.</param>
        public CaseCreation(Purchase Purchase = default(Purchase), Recipient Recipient = default(Recipient), Card Card = default(Card), UserAccount UserAccount = default(UserAccount), Seller Seller = default(Seller))
        {
            this.Purchase = Purchase;
            this.Recipient = Recipient;
            this.Card = Card;
            this.UserAccount = UserAccount;
            this.Seller = Seller;
        }
        
        /// <summary>
        /// Gets or Sets Purchase
        /// </summary>
        [DataMember(Name="purchase", EmitDefaultValue=false)]
        public Purchase Purchase { get; set; }

        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public Recipient Recipient { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public Card Card { get; set; }

        /// <summary>
        /// Gets or Sets UserAccount
        /// </summary>
        [DataMember(Name="userAccount", EmitDefaultValue=false)]
        public UserAccount UserAccount { get; set; }

        /// <summary>
        /// Gets or Sets Seller
        /// </summary>
        [DataMember(Name="seller", EmitDefaultValue=false)]
        public Seller Seller { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CaseCreation {\n");
            sb.Append("  Purchase: ").Append(Purchase).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  UserAccount: ").Append(UserAccount).Append("\n");
            sb.Append("  Seller: ").Append(Seller).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CaseCreation);
        }

        /// <summary>
        /// Returns true if CaseCreation instances are equal
        /// </summary>
        /// <param name="other">Instance of CaseCreation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CaseCreation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Purchase == other.Purchase ||
                    this.Purchase != null &&
                    this.Purchase.Equals(other.Purchase)
                ) && 
                (
                    this.Recipient == other.Recipient ||
                    this.Recipient != null &&
                    this.Recipient.Equals(other.Recipient)
                ) && 
                (
                    this.Card == other.Card ||
                    this.Card != null &&
                    this.Card.Equals(other.Card)
                ) && 
                (
                    this.UserAccount == other.UserAccount ||
                    this.UserAccount != null &&
                    this.UserAccount.Equals(other.UserAccount)
                ) && 
                (
                    this.Seller == other.Seller ||
                    this.Seller != null &&
                    this.Seller.Equals(other.Seller)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Purchase != null)
                    hash = hash * 59 + this.Purchase.GetHashCode();
                if (this.Recipient != null)
                    hash = hash * 59 + this.Recipient.GetHashCode();
                if (this.Card != null)
                    hash = hash * 59 + this.Card.GetHashCode();
                if (this.UserAccount != null)
                    hash = hash * 59 + this.UserAccount.GetHashCode();
                if (this.Seller != null)
                    hash = hash * 59 + this.Seller.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
