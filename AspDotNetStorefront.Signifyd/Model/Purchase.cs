// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
/* 
 * Signifyd API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AspDotNetStorefront.Signifyd.Client.SwaggerDateConverter;

namespace AspDotNetStorefront.Signifyd.Model
{
    /// <summary>
    /// Purchase
    /// </summary>
    [DataContract]
    public partial class Purchase :  IEquatable<Purchase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Purchase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Purchase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Purchase" /> class.
        /// </summary>
        /// <param name="BrowserIpAddress">The IP Address of the browser that was used to make the purchase. This is the IP Address that was used to connect to your site and make the purchase. (required).</param>
        /// <param name="OrderId">A string uniquely identifying this order. (required).</param>
        /// <param name="CreatedAt">&#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#x60; The date and time when the order was placed, shown on the signifyd console. See the Dates section of these docs for more information about date formats. (required).</param>
        /// <param name="AvsResponseCode">The response code from the address verification system (AVS). Accepted codes: http://www.emsecommerce.net/avs_cvv2_response_codes.htm (required).</param>
        /// <param name="CvvResponseCode">The response code from the card verification value (CVV) check. Accepted codes listed on above link. (required).</param>
        /// <param name="TotalPrice">The total price of the order, including shipping price and taxes. (required).</param>
        /// <param name="OrderSessionId">The unique ID for the user&#39;s browsing session. This is to be used in conjunction with the Signifyd Fingerprinting Javascript..</param>
        /// <param name="DiscountCodes">Any discount codes, coupons, or promotional codes used during checkout to recieve a discount on the order..</param>
        /// <param name="Shipments">The shipments associated with this purchase..</param>
        /// <param name="Products">The products purchased in the transaction..</param>
        /// <param name="PaymentGateway">The gateway that processed the transaction..</param>
        /// <param name="PaymentMethod">PaymentMethod.</param>
        /// <param name="TransactionId">The unique identifier provided by the payment gateway for this order. If you have provided us with credentials for your payment gateway we can obtain additional details about the order, like AVS and CVV status, from your payment provider..</param>
        /// <param name="Currency">The currency type of the order, in 3 letter ISO 4217 format. Defaults to USD..</param>
        /// <param name="OrderChannel">OrderChannel.</param>
        /// <param name="ReceivedBy">If the order was was taken by a customer service or sales agent, his or her name..</param>
        public Purchase(string BrowserIpAddress = default(string), string OrderId = default(string), string CreatedAt = default(string), string AvsResponseCode = default(string), string CvvResponseCode = default(string), double? TotalPrice = default(double?), string OrderSessionId = default(string), List<DiscountCodes> DiscountCodes = default(List<DiscountCodes>), List<Shipment> Shipments = default(List<Shipment>), List<Product> Products = default(List<Product>), string PaymentGateway = default(string), PaymentMethod PaymentMethod = default(PaymentMethod), string TransactionId = default(string), string Currency = default(string), OrderChannel OrderChannel = default(OrderChannel), string ReceivedBy = default(string))
        {
            // to ensure "BrowserIpAddress" is required (not null)
            if (BrowserIpAddress == null)
            {
                throw new InvalidDataException("BrowserIpAddress is a required property for Purchase and cannot be null");
            }
            else
            {
                this.BrowserIpAddress = BrowserIpAddress;
            }
            // to ensure "OrderId" is required (not null)
            if (OrderId == null)
            {
                throw new InvalidDataException("OrderId is a required property for Purchase and cannot be null");
            }
            else
            {
                this.OrderId = OrderId;
            }
            // to ensure "CreatedAt" is required (not null)
            if (CreatedAt == null)
            {
                throw new InvalidDataException("CreatedAt is a required property for Purchase and cannot be null");
            }
            else
            {
                this.CreatedAt = CreatedAt;
            }
            // to ensure "AvsResponseCode" is required (not null)
            if (AvsResponseCode == null)
            {
                throw new InvalidDataException("AvsResponseCode is a required property for Purchase and cannot be null");
            }
            else
            {
                this.AvsResponseCode = AvsResponseCode;
            }
            // to ensure "CvvResponseCode" is required (not null)
            if (CvvResponseCode == null)
            {
                throw new InvalidDataException("CvvResponseCode is a required property for Purchase and cannot be null");
            }
            else
            {
                this.CvvResponseCode = CvvResponseCode;
            }
            // to ensure "TotalPrice" is required (not null)
            if (TotalPrice == null)
            {
                throw new InvalidDataException("TotalPrice is a required property for Purchase and cannot be null");
            }
            else
            {
                this.TotalPrice = TotalPrice;
            }
            this.OrderSessionId = OrderSessionId;
            this.DiscountCodes = DiscountCodes;
            this.Shipments = Shipments;
            this.Products = Products;
            this.PaymentGateway = PaymentGateway;
            this.PaymentMethod = PaymentMethod;
            this.TransactionId = TransactionId;
            this.Currency = Currency;
            this.OrderChannel = OrderChannel;
            this.ReceivedBy = ReceivedBy;
        }
        
        /// <summary>
        /// The IP Address of the browser that was used to make the purchase. This is the IP Address that was used to connect to your site and make the purchase.
        /// </summary>
        /// <value>The IP Address of the browser that was used to make the purchase. This is the IP Address that was used to connect to your site and make the purchase.</value>
        [DataMember(Name="browserIpAddress", EmitDefaultValue=false)]
        public string BrowserIpAddress { get; set; }

        /// <summary>
        /// A string uniquely identifying this order.
        /// </summary>
        /// <value>A string uniquely identifying this order.</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#x60; The date and time when the order was placed, shown on the signifyd console. See the Dates section of these docs for more information about date formats.
        /// </summary>
        /// <value>&#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#x60; The date and time when the order was placed, shown on the signifyd console. See the Dates section of these docs for more information about date formats.</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The response code from the address verification system (AVS). Accepted codes: http://www.emsecommerce.net/avs_cvv2_response_codes.htm
        /// </summary>
        /// <value>The response code from the address verification system (AVS). Accepted codes: http://www.emsecommerce.net/avs_cvv2_response_codes.htm</value>
        [DataMember(Name="avsResponseCode", EmitDefaultValue=false)]
        public string AvsResponseCode { get; set; }

        /// <summary>
        /// The response code from the card verification value (CVV) check. Accepted codes listed on above link.
        /// </summary>
        /// <value>The response code from the card verification value (CVV) check. Accepted codes listed on above link.</value>
        [DataMember(Name="cvvResponseCode", EmitDefaultValue=false)]
        public string CvvResponseCode { get; set; }

        /// <summary>
        /// The total price of the order, including shipping price and taxes.
        /// </summary>
        /// <value>The total price of the order, including shipping price and taxes.</value>
        [DataMember(Name="totalPrice", EmitDefaultValue=false)]
        public double? TotalPrice { get; set; }

        /// <summary>
        /// The unique ID for the user&#39;s browsing session. This is to be used in conjunction with the Signifyd Fingerprinting Javascript.
        /// </summary>
        /// <value>The unique ID for the user&#39;s browsing session. This is to be used in conjunction with the Signifyd Fingerprinting Javascript.</value>
        [DataMember(Name="orderSessionId", EmitDefaultValue=false)]
        public string OrderSessionId { get; set; }

        /// <summary>
        /// Any discount codes, coupons, or promotional codes used during checkout to recieve a discount on the order.
        /// </summary>
        /// <value>Any discount codes, coupons, or promotional codes used during checkout to recieve a discount on the order.</value>
        [DataMember(Name="discountCodes", EmitDefaultValue=false)]
        public List<DiscountCodes> DiscountCodes { get; set; }

        /// <summary>
        /// The shipments associated with this purchase.
        /// </summary>
        /// <value>The shipments associated with this purchase.</value>
        [DataMember(Name="shipments", EmitDefaultValue=false)]
        public List<Shipment> Shipments { get; set; }

        /// <summary>
        /// The products purchased in the transaction.
        /// </summary>
        /// <value>The products purchased in the transaction.</value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<Product> Products { get; set; }

        /// <summary>
        /// The gateway that processed the transaction.
        /// </summary>
        /// <value>The gateway that processed the transaction.</value>
        [DataMember(Name="paymentGateway", EmitDefaultValue=false)]
        public string PaymentGateway { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public PaymentMethod PaymentMethod { get; set; }

        /// <summary>
        /// The unique identifier provided by the payment gateway for this order. If you have provided us with credentials for your payment gateway we can obtain additional details about the order, like AVS and CVV status, from your payment provider.
        /// </summary>
        /// <value>The unique identifier provided by the payment gateway for this order. If you have provided us with credentials for your payment gateway we can obtain additional details about the order, like AVS and CVV status, from your payment provider.</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// The currency type of the order, in 3 letter ISO 4217 format. Defaults to USD.
        /// </summary>
        /// <value>The currency type of the order, in 3 letter ISO 4217 format. Defaults to USD.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets OrderChannel
        /// </summary>
        [DataMember(Name="orderChannel", EmitDefaultValue=false)]
        public OrderChannel OrderChannel { get; set; }

        /// <summary>
        /// If the order was was taken by a customer service or sales agent, his or her name.
        /// </summary>
        /// <value>If the order was was taken by a customer service or sales agent, his or her name.</value>
        [DataMember(Name="receivedBy", EmitDefaultValue=false)]
        public string ReceivedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Purchase {\n");
            sb.Append("  BrowserIpAddress: ").Append(BrowserIpAddress).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  AvsResponseCode: ").Append(AvsResponseCode).Append("\n");
            sb.Append("  CvvResponseCode: ").Append(CvvResponseCode).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  OrderSessionId: ").Append(OrderSessionId).Append("\n");
            sb.Append("  DiscountCodes: ").Append(DiscountCodes).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  PaymentGateway: ").Append(PaymentGateway).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  OrderChannel: ").Append(OrderChannel).Append("\n");
            sb.Append("  ReceivedBy: ").Append(ReceivedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Purchase);
        }

        /// <summary>
        /// Returns true if Purchase instances are equal
        /// </summary>
        /// <param name="other">Instance of Purchase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Purchase other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BrowserIpAddress == other.BrowserIpAddress ||
                    this.BrowserIpAddress != null &&
                    this.BrowserIpAddress.Equals(other.BrowserIpAddress)
                ) && 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.AvsResponseCode == other.AvsResponseCode ||
                    this.AvsResponseCode != null &&
                    this.AvsResponseCode.Equals(other.AvsResponseCode)
                ) && 
                (
                    this.CvvResponseCode == other.CvvResponseCode ||
                    this.CvvResponseCode != null &&
                    this.CvvResponseCode.Equals(other.CvvResponseCode)
                ) && 
                (
                    this.TotalPrice == other.TotalPrice ||
                    this.TotalPrice != null &&
                    this.TotalPrice.Equals(other.TotalPrice)
                ) && 
                (
                    this.OrderSessionId == other.OrderSessionId ||
                    this.OrderSessionId != null &&
                    this.OrderSessionId.Equals(other.OrderSessionId)
                ) && 
                (
                    this.DiscountCodes == other.DiscountCodes ||
                    this.DiscountCodes != null &&
                    this.DiscountCodes.SequenceEqual(other.DiscountCodes)
                ) && 
                (
                    this.Shipments == other.Shipments ||
                    this.Shipments != null &&
                    this.Shipments.SequenceEqual(other.Shipments)
                ) && 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(other.Products)
                ) && 
                (
                    this.PaymentGateway == other.PaymentGateway ||
                    this.PaymentGateway != null &&
                    this.PaymentGateway.Equals(other.PaymentGateway)
                ) && 
                (
                    this.PaymentMethod == other.PaymentMethod ||
                    this.PaymentMethod.Equals(other.PaymentMethod)
                ) && 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    this.Currency == other.Currency ||
                    this.Currency != null &&
                    this.Currency.Equals(other.Currency)
                ) && 
                (
                    this.OrderChannel == other.OrderChannel ||
                    this.OrderChannel.Equals(other.OrderChannel)
                ) && 
                (
                    this.ReceivedBy == other.ReceivedBy ||
                    this.ReceivedBy != null &&
                    this.ReceivedBy.Equals(other.ReceivedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BrowserIpAddress != null)
                    hash = hash * 59 + this.BrowserIpAddress.GetHashCode();
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.AvsResponseCode != null)
                    hash = hash * 59 + this.AvsResponseCode.GetHashCode();
                if (this.CvvResponseCode != null)
                    hash = hash * 59 + this.CvvResponseCode.GetHashCode();
                if (this.TotalPrice != null)
                    hash = hash * 59 + this.TotalPrice.GetHashCode();
                if (this.OrderSessionId != null)
                    hash = hash * 59 + this.OrderSessionId.GetHashCode();
                if (this.DiscountCodes != null)
                    hash = hash * 59 + this.DiscountCodes.GetHashCode();
                if (this.Shipments != null)
                    hash = hash * 59 + this.Shipments.GetHashCode();
                if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                if (this.PaymentGateway != null)
                    hash = hash * 59 + this.PaymentGateway.GetHashCode();
                hash = hash * 59 + this.PaymentMethod.GetHashCode();
                if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                if (this.Currency != null)
                    hash = hash * 59 + this.Currency.GetHashCode();
                hash = hash * 59 + this.OrderChannel.GetHashCode();
                if (this.ReceivedBy != null)
                    hash = hash * 59 + this.ReceivedBy.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
