// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
/* 
 * Signifyd API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AspDotNetStorefront.Signifyd.Client.SwaggerDateConverter;

namespace AspDotNetStorefront.Signifyd.Model
{
    /// <summary>
    /// GuaranteeRequest
    /// </summary>
    [DataContract]
    public partial class GuaranteeRequest :  IEquatable<GuaranteeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GuaranteeRequest" /> class.
        /// </summary>
        /// <param name="Disposition">Guarantee decision result.</param>
        /// <param name="ReviewedBy">Analyst who made the decision..</param>
        /// <param name="ReviewedAt">Time of decision. See the Dates section for date formats..</param>
        /// <param name="SubmittedBy">User who requested the guarantee..</param>
        /// <param name="SubmittedAt">Time when guarantee is requested. See the Dates section for date formats..</param>
        /// <param name="RereviewCount">Count if there was any re-review.</param>
        /// <param name="CaseId">The unique identifier assigned to the case when it is created..</param>
        /// <param name="GuaranteeId">The unique identifier assigned for this guarantee..</param>
        public GuaranteeRequest(string Disposition = default(string), string ReviewedBy = default(string), string ReviewedAt = default(string), string SubmittedBy = default(string), string SubmittedAt = default(string), double? RereviewCount = default(double?), double? CaseId = default(double?), double? GuaranteeId = default(double?))
        {
            this.Disposition = Disposition;
            this.ReviewedBy = ReviewedBy;
            this.ReviewedAt = ReviewedAt;
            this.SubmittedBy = SubmittedBy;
            this.SubmittedAt = SubmittedAt;
            this.RereviewCount = RereviewCount;
            this.CaseId = CaseId;
            this.GuaranteeId = GuaranteeId;
        }
        
        /// <summary>
        /// Guarantee decision result
        /// </summary>
        /// <value>Guarantee decision result</value>
        [DataMember(Name="disposition", EmitDefaultValue=false)]
        public string Disposition { get; set; }

        /// <summary>
        /// Analyst who made the decision.
        /// </summary>
        /// <value>Analyst who made the decision.</value>
        [DataMember(Name="reviewedBy", EmitDefaultValue=false)]
        public string ReviewedBy { get; set; }

        /// <summary>
        /// Time of decision. See the Dates section for date formats.
        /// </summary>
        /// <value>Time of decision. See the Dates section for date formats.</value>
        [DataMember(Name="reviewedAt", EmitDefaultValue=false)]
        public string ReviewedAt { get; set; }

        /// <summary>
        /// User who requested the guarantee.
        /// </summary>
        /// <value>User who requested the guarantee.</value>
        [DataMember(Name="submittedBy", EmitDefaultValue=false)]
        public string SubmittedBy { get; set; }

        /// <summary>
        /// Time when guarantee is requested. See the Dates section for date formats.
        /// </summary>
        /// <value>Time when guarantee is requested. See the Dates section for date formats.</value>
        [DataMember(Name="submittedAt", EmitDefaultValue=false)]
        public string SubmittedAt { get; set; }

        /// <summary>
        /// Count if there was any re-review
        /// </summary>
        /// <value>Count if there was any re-review</value>
        [DataMember(Name="rereviewCount", EmitDefaultValue=false)]
        public double? RereviewCount { get; set; }

        /// <summary>
        /// The unique identifier assigned to the case when it is created.
        /// </summary>
        /// <value>The unique identifier assigned to the case when it is created.</value>
        [DataMember(Name="caseId", EmitDefaultValue=false)]
        public double? CaseId { get; set; }

        /// <summary>
        /// The unique identifier assigned for this guarantee.
        /// </summary>
        /// <value>The unique identifier assigned for this guarantee.</value>
        [DataMember(Name="guaranteeId", EmitDefaultValue=false)]
        public double? GuaranteeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GuaranteeRequest {\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("  ReviewedBy: ").Append(ReviewedBy).Append("\n");
            sb.Append("  ReviewedAt: ").Append(ReviewedAt).Append("\n");
            sb.Append("  SubmittedBy: ").Append(SubmittedBy).Append("\n");
            sb.Append("  SubmittedAt: ").Append(SubmittedAt).Append("\n");
            sb.Append("  RereviewCount: ").Append(RereviewCount).Append("\n");
            sb.Append("  CaseId: ").Append(CaseId).Append("\n");
            sb.Append("  GuaranteeId: ").Append(GuaranteeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GuaranteeRequest);
        }

        /// <summary>
        /// Returns true if GuaranteeRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of GuaranteeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GuaranteeRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Disposition == other.Disposition ||
                    this.Disposition != null &&
                    this.Disposition.Equals(other.Disposition)
                ) && 
                (
                    this.ReviewedBy == other.ReviewedBy ||
                    this.ReviewedBy != null &&
                    this.ReviewedBy.Equals(other.ReviewedBy)
                ) && 
                (
                    this.ReviewedAt == other.ReviewedAt ||
                    this.ReviewedAt != null &&
                    this.ReviewedAt.Equals(other.ReviewedAt)
                ) && 
                (
                    this.SubmittedBy == other.SubmittedBy ||
                    this.SubmittedBy != null &&
                    this.SubmittedBy.Equals(other.SubmittedBy)
                ) && 
                (
                    this.SubmittedAt == other.SubmittedAt ||
                    this.SubmittedAt != null &&
                    this.SubmittedAt.Equals(other.SubmittedAt)
                ) && 
                (
                    this.RereviewCount == other.RereviewCount ||
                    this.RereviewCount != null &&
                    this.RereviewCount.Equals(other.RereviewCount)
                ) && 
                (
                    this.CaseId == other.CaseId ||
                    this.CaseId != null &&
                    this.CaseId.Equals(other.CaseId)
                ) && 
                (
                    this.GuaranteeId == other.GuaranteeId ||
                    this.GuaranteeId != null &&
                    this.GuaranteeId.Equals(other.GuaranteeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Disposition != null)
                    hash = hash * 59 + this.Disposition.GetHashCode();
                if (this.ReviewedBy != null)
                    hash = hash * 59 + this.ReviewedBy.GetHashCode();
                if (this.ReviewedAt != null)
                    hash = hash * 59 + this.ReviewedAt.GetHashCode();
                if (this.SubmittedBy != null)
                    hash = hash * 59 + this.SubmittedBy.GetHashCode();
                if (this.SubmittedAt != null)
                    hash = hash * 59 + this.SubmittedAt.GetHashCode();
                if (this.RereviewCount != null)
                    hash = hash * 59 + this.RereviewCount.GetHashCode();
                if (this.CaseId != null)
                    hash = hash * 59 + this.CaseId.GetHashCode();
                if (this.GuaranteeId != null)
                    hash = hash * 59 + this.GuaranteeId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
