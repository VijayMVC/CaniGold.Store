// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
/* 
 * Signifyd API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AspDotNetStorefront.Signifyd.Client.SwaggerDateConverter;

namespace AspDotNetStorefront.Signifyd.Model
{
    /// <summary>
    /// Card
    /// </summary>
    [DataContract]
    public partial class Card :  IEquatable<Card>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Card() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        /// <param name="CardHolderName">The full name on the credit card that was charged. (required).</param>
        /// <param name="BillingAddress">BillingAddress (required).</param>
        /// <param name="Bin">The first six digits of the credit card, the bank identification number, which uniquely identifies the issuer..</param>
        /// <param name="Last4">The last four digits of the card number..</param>
        /// <param name="ExpiryMonth">MM representation of the expiration month of the card..</param>
        /// <param name="ExpiryYear">yyyy representation of the expiration year of the card..</param>
        public Card(string CardHolderName = default(string), Address BillingAddress = default(Address), double? Bin = default(double?), string Last4 = default(string), double? ExpiryMonth = default(double?), double? ExpiryYear = default(double?))
        {
            // to ensure "CardHolderName" is required (not null)
            if (CardHolderName == null)
            {
                throw new InvalidDataException("CardHolderName is a required property for Card and cannot be null");
            }
            else
            {
                this.CardHolderName = CardHolderName;
            }
            // to ensure "BillingAddress" is required (not null)
            if (BillingAddress == null)
            {
                throw new InvalidDataException("BillingAddress is a required property for Card and cannot be null");
            }
            else
            {
                this.BillingAddress = BillingAddress;
            }
            this.Bin = Bin;
            this.Last4 = Last4;
            this.ExpiryMonth = ExpiryMonth;
            this.ExpiryYear = ExpiryYear;
        }
        
        /// <summary>
        /// The full name on the credit card that was charged.
        /// </summary>
        /// <value>The full name on the credit card that was charged.</value>
        [DataMember(Name="cardHolderName", EmitDefaultValue=false)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="billingAddress", EmitDefaultValue=false)]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// The first six digits of the credit card, the bank identification number, which uniquely identifies the issuer.
        /// </summary>
        /// <value>The first six digits of the credit card, the bank identification number, which uniquely identifies the issuer.</value>
        [DataMember(Name="bin", EmitDefaultValue=false)]
        public double? Bin { get; set; }

        /// <summary>
        /// The last four digits of the card number.
        /// </summary>
        /// <value>The last four digits of the card number.</value>
        [DataMember(Name="last4", EmitDefaultValue=false)]
        public string Last4 { get; set; }

        /// <summary>
        /// MM representation of the expiration month of the card.
        /// </summary>
        /// <value>MM representation of the expiration month of the card.</value>
        [DataMember(Name="expiryMonth", EmitDefaultValue=false)]
        public double? ExpiryMonth { get; set; }

        /// <summary>
        /// yyyy representation of the expiration year of the card.
        /// </summary>
        /// <value>yyyy representation of the expiration year of the card.</value>
        [DataMember(Name="expiryYear", EmitDefaultValue=false)]
        public double? ExpiryYear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Card {\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  Last4: ").Append(Last4).Append("\n");
            sb.Append("  ExpiryMonth: ").Append(ExpiryMonth).Append("\n");
            sb.Append("  ExpiryYear: ").Append(ExpiryYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Card);
        }

        /// <summary>
        /// Returns true if Card instances are equal
        /// </summary>
        /// <param name="other">Instance of Card to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Card other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CardHolderName == other.CardHolderName ||
                    this.CardHolderName != null &&
                    this.CardHolderName.Equals(other.CardHolderName)
                ) && 
                (
                    this.BillingAddress == other.BillingAddress ||
                    this.BillingAddress != null &&
                    this.BillingAddress.Equals(other.BillingAddress)
                ) && 
                (
                    this.Bin == other.Bin ||
                    this.Bin != null &&
                    this.Bin.Equals(other.Bin)
                ) && 
                (
                    this.Last4 == other.Last4 ||
                    this.Last4 != null &&
                    this.Last4.Equals(other.Last4)
                ) && 
                (
                    this.ExpiryMonth == other.ExpiryMonth ||
                    this.ExpiryMonth != null &&
                    this.ExpiryMonth.Equals(other.ExpiryMonth)
                ) && 
                (
                    this.ExpiryYear == other.ExpiryYear ||
                    this.ExpiryYear != null &&
                    this.ExpiryYear.Equals(other.ExpiryYear)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CardHolderName != null)
                    hash = hash * 59 + this.CardHolderName.GetHashCode();
                if (this.BillingAddress != null)
                    hash = hash * 59 + this.BillingAddress.GetHashCode();
                if (this.Bin != null)
                    hash = hash * 59 + this.Bin.GetHashCode();
                if (this.Last4 != null)
                    hash = hash * 59 + this.Last4.GetHashCode();
                if (this.ExpiryMonth != null)
                    hash = hash * 59 + this.ExpiryMonth.GetHashCode();
                if (this.ExpiryYear != null)
                    hash = hash * 59 + this.ExpiryYear.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
