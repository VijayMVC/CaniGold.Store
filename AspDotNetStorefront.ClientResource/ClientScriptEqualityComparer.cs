// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

namespace AspDotNetStorefront.ClientResource
{
	/// <summary>
	/// Compares the equality of two <see cref="ClientScriptResource"/> instances by comparing the keys generated by their handler.
	/// </summary>
	public class ClientScriptEqualityComparer : EqualityComparer<ClientScriptResource>
	{
		readonly IEqualityComparer<string> KeyComparer;
		readonly ClientScriptResourceHandler ClientScriptResourceHandler;

		public ClientScriptEqualityComparer(ClientScriptResourceHandler clientScriptResourceHandler)
		{
			KeyComparer = StringComparer.OrdinalIgnoreCase;
			ClientScriptResourceHandler = clientScriptResourceHandler;
		}

		public override bool Equals(ClientScriptResource x, ClientScriptResource y)
		{
			if(ReferenceEquals(x, y))
				return true;

			if(ReferenceEquals(x, null) || ReferenceEquals(y, null))
				return false;

			return ClientScriptResourceHandler
				.GetKeys(new[] { x })
				.Select(keyedResource => keyedResource.Key)
				.Intersect(
					ClientScriptResourceHandler
						.GetKeys(new[] { y })
						.Select(keyedResource => keyedResource.Key),
					KeyComparer)
				.Any();
		}

		public override int GetHashCode(ClientScriptResource obj)
		{
			if(ReferenceEquals(obj, null))
				return 0;

			return KeyComparer.GetHashCode(
				ClientScriptResourceHandler
					.GetKeys(new[] { obj })
					.Select(keyedResource => keyedResource.Key)
					.FirstOrDefault());
		}
	}
}
