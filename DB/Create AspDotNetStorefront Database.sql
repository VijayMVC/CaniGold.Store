-- ------------------------------------------------------------------------------------------
-- Copyright AspDotNetStorefront.com.  All Rights Reserved.
-- http://www.aspdotnetstorefront.com
-- For details on this license please visit our homepage at the URL above.
-- THE ABOVE NOTICE MUST REMAIN INTACT.
-- ------------------------------------------------------------------------------------------

-- ------------------------------------------------------------------------------------------
PRINT 'Beginning schema creation'
GO

SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;
SET NUMERIC_ROUNDABORT OFF;
GO

PRINT N'Creating [dbo].[Address]...';
GO
CREATE TABLE [dbo].[Address] (
    [AddressID]             INT              IDENTITY (1, 1) NOT NULL,
    [AddressGUID]           UNIQUEIDENTIFIER NOT NULL,
    [CustomerID]            INT              NOT NULL,
    [NickName]              NVARCHAR (100)   NULL,
    [FirstName]             NVARCHAR (100)   NULL,
    [LastName]              NVARCHAR (100)   NULL,
    [Company]               NVARCHAR (100)   NULL,
    [Address1]              NVARCHAR (100)   NULL,
    [Address2]              NVARCHAR (100)   NULL,
    [Suite]                 NVARCHAR (50)    NULL,
    [City]                  NVARCHAR (100)   NULL,
    [State]                 NVARCHAR (100)   NULL,
    [Zip]                   NVARCHAR (10)    NULL,
    [Country]               NVARCHAR (100)   NULL,
    [ResidenceType]         INT              NOT NULL,
    [Phone]                 NVARCHAR (25)    NULL,
    [Email]                 NVARCHAR (100)   NULL,
    [PaymentMethodLastUsed] NVARCHAR (100)   NULL,
    [CardType]              NVARCHAR (25)    NULL,
    [CardName]              NVARCHAR (100)   NULL,
    [CardNumber]            NVARCHAR (300)   NULL,
    [CardExpirationMonth]   NVARCHAR (10)    NULL,
    [CardExpirationYear]    NVARCHAR (10)    NULL,
    [CardStartDate]         NVARCHAR (MAX)   NULL,
    [CardIssueNumber]       NVARCHAR (MAX)   NULL,
    [PONumber]              NVARCHAR (50)    NULL,
    [ExtensionData]         NVARCHAR (MAX)   NULL,
    [Deleted]               TINYINT          NOT NULL,
    [CreatedOn]             DATETIME         NOT NULL,
    [Crypt]                 INT              NOT NULL,
    [UpdatedOn]             DATETIME         NOT NULL,
    [OffsiteSource]         NVARCHAR (400)   NULL,
    CONSTRAINT [PK_Address] PRIMARY KEY CLUSTERED ([AddressID] ASC)
);

GO
PRINT N'Creating [dbo].[Address].[UIX_Address_AddressGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Address_AddressGUID]
    ON [dbo].[Address]([AddressGUID] ASC);

GO
PRINT N'Creating [dbo].[Address].[IX_Address_CustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Address_CustomerID]
    ON [dbo].[Address]([CustomerID] ASC);

GO
PRINT N'Creating [dbo].[Address].[IX_Address_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Address_Deleted]
    ON [dbo].[Address]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[Affiliate]...';

GO
CREATE TABLE [dbo].[Affiliate] (
    [AffiliateID]        INT              IDENTITY (10050, 1) NOT NULL,
    [AffiliateGUID]      UNIQUEIDENTIFIER NOT NULL,
    [EMail]              NVARCHAR (100)   NULL,
    [Password]           NVARCHAR (250)   NULL,
    [SaltKey]            INT              NOT NULL,
    [Notes]              NVARCHAR (MAX)   NULL,
    [IsOnline]           TINYINT          NULL,
    [FirstName]          NVARCHAR (100)   NULL,
    [LastName]           NVARCHAR (100)   NULL,
    [Name]               NVARCHAR (100)   NULL,
    [Company]            NVARCHAR (100)   NULL,
    [Address1]           NVARCHAR (100)   NULL,
    [Address2]           NVARCHAR (100)   NULL,
    [Suite]              NVARCHAR (50)    NULL,
    [City]               NVARCHAR (100)   NULL,
    [State]              NVARCHAR (100)   NULL,
    [Zip]                NVARCHAR (10)    NULL,
    [Country]            NVARCHAR (100)   NULL,
    [Phone]              NVARCHAR (25)    NULL,
    [WebSiteName]        NVARCHAR (100)   NULL,
    [WebSiteDescription] NVARCHAR (MAX)   NULL,
    [URL]                NVARCHAR (MAX)   NULL,
    [DefaultSkinID]      INT              NOT NULL,
    [ParentAffiliateID]  INT              NOT NULL,
    [DisplayOrder]       INT              NOT NULL,
    [ExtensionData]      NVARCHAR (MAX)   NULL,
    [SEName]             NVARCHAR (100)   NULL,
    [SETitle]            NVARCHAR (MAX)   NULL,
    [SEAltText]          NVARCHAR (MAX)   NULL,
    [SEKeywords]         NVARCHAR (MAX)   NULL,
    [SEDescription]      NVARCHAR (MAX)   NULL,
    [Published]          TINYINT          NOT NULL,
    [Wholesale]          TINYINT          NOT NULL,
    [Deleted]            TINYINT          NOT NULL,
    [CreatedOn]          DATETIME         NOT NULL,
    [SkinID]             INT              NOT NULL,
    [TemplateName]       NVARCHAR (50)    NOT NULL,
    [UpdatedOn]          DATETIME         NOT NULL,
    CONSTRAINT [PK_Affiliate] PRIMARY KEY CLUSTERED ([AffiliateID] ASC)
);

GO
PRINT N'Creating [dbo].[AffiliateActivity]...';

GO
CREATE TABLE [dbo].[AffiliateActivity] (
    [AffiliateActivityID]   INT              IDENTITY (1, 1) NOT NULL,
    [AffiliateActivityGUID] UNIQUEIDENTIFIER NOT NULL,
    [AffiliateID]           INT              NOT NULL,
    [Amount]                MONEY            NULL,
    [CardID]                NVARCHAR (100)   NULL,
    [OrderNumber]           INT              NULL,
    [Notes]                 NVARCHAR (MAX)   NULL,
    [ActivityDate]          DATETIME         NOT NULL,
    [ExtensionData]         NVARCHAR (MAX)   NULL,
    [CreatedOn]             DATETIME         NOT NULL,
    [UpdatedOn]             DATETIME         NOT NULL,
    CONSTRAINT [PK_AffiliateActivity] PRIMARY KEY CLUSTERED ([AffiliateActivityID] ASC)
);

GO
PRINT N'Creating [dbo].[AffiliateActivity].[IX_AffiliateActivity_AffiliateID]...';

GO
CREATE NONCLUSTERED INDEX [IX_AffiliateActivity_AffiliateID]
    ON [dbo].[AffiliateActivity]([AffiliateID] ASC);

GO
PRINT N'Creating [dbo].[AffiliateActivity].[IX_AffiliateActivity_AffiliateID_ActivityDate]...';

GO
CREATE NONCLUSTERED INDEX [IX_AffiliateActivity_AffiliateID_ActivityDate]
    ON [dbo].[AffiliateActivity]([AffiliateID] ASC, [ActivityDate] ASC);

GO
PRINT N'Creating [dbo].[AffiliateCommissions]...';

GO
CREATE TABLE [dbo].[AffiliateCommissions] (
    [RowGUID]       UNIQUEIDENTIFIER NOT NULL,
    [LowValue]      MONEY            NULL,
    [HighValue]     MONEY            NULL,
    [Commission]    MONEY            NULL,
    [ExtensionData] NVARCHAR (MAX)   NULL,
    [CreatedOn]     DATETIME         NOT NULL,
    [UpdatedOn]     DATETIME         NOT NULL
);

GO
PRINT N'Creating [dbo].[AffiliateCommissions].[IX_AffiliateCommissions_RowGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_AffiliateCommissions_RowGUID]
    ON [dbo].[AffiliateCommissions]([RowGUID] ASC);

GO
PRINT N'Creating [dbo].[AffiliateCommissions].[IX_AffiliateCommissions_LowValue]...';

GO
CREATE NONCLUSTERED INDEX [IX_AffiliateCommissions_LowValue]
    ON [dbo].[AffiliateCommissions]([LowValue] ASC);

GO
PRINT N'Creating [dbo].[AffiliateCommissions].[IX_AffiliateCommissions_HighValue]...';

GO
CREATE NONCLUSTERED INDEX [IX_AffiliateCommissions_HighValue]
    ON [dbo].[AffiliateCommissions]([HighValue] ASC);

GO
PRINT N'Creating [dbo].[AffiliateStore]...';

GO
CREATE TABLE [dbo].[AffiliateStore] (
    [ID]          INT      IDENTITY (1, 1) NOT NULL,
    [AffiliateID] INT      NOT NULL,
    [StoreID]     INT      NOT NULL,
    [CreatedOn]   DATETIME NOT NULL,
    [UpdatedOn]   DATETIME NOT NULL,
    CONSTRAINT [PK_AffiliateStore] PRIMARY KEY CLUSTERED ([AffiliateID] ASC, [StoreID] ASC)
);

GO
PRINT N'Creating [dbo].[AppConfig]...';

GO
CREATE TABLE [dbo].[AppConfig] (
    [AppConfigID]     INT              IDENTITY (1, 1) NOT NULL,
    [AppConfigGUID]   UNIQUEIDENTIFIER NOT NULL,
    [StoreID]         INT              NOT NULL,
    [Name]            NVARCHAR (100)   NOT NULL,
    [Description]     NVARCHAR (MAX)   NULL,
    [ConfigValue]     NVARCHAR (MAX)   NULL,
    [ValueType]       NVARCHAR (100)   NULL,
    [AllowableValues] NVARCHAR (MAX)   NULL,
    [GroupName]       NVARCHAR (100)   NULL,
    [SuperOnly]       TINYINT          NOT NULL,
    [Hidden]          BIT              NOT NULL,
    [CreatedOn]       DATETIME         NOT NULL,
    [UpdatedOn]       DATETIME         NOT NULL,
    CONSTRAINT [PK_AppConfig] PRIMARY KEY CLUSTERED ([AppConfigID] ASC)
);

GO
PRINT N'Creating [dbo].[AppConfig].[UIX_AppConfig_Name_StoreID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_AppConfig_Name_StoreID]
    ON [dbo].[AppConfig]([Name] ASC, [StoreID] ASC);

GO
PRINT N'Creating [dbo].[AppConfig].[IX_AppConfig_GroupName]...';

GO
CREATE NONCLUSTERED INDEX [IX_AppConfig_GroupName]
    ON [dbo].[AppConfig]([GroupName] ASC);

GO
PRINT N'Creating [dbo].[aspdnsf_SysLog]...';

GO
CREATE TABLE [dbo].[aspdnsf_SysLog] (
    [SysLogID]   INT              IDENTITY (1, 1) NOT NULL,
    [SysLogGUID] UNIQUEIDENTIFIER NOT NULL,
    [Message]    NVARCHAR (MAX)   NOT NULL,
    [Details]    NVARCHAR (MAX)   NULL,
    [Type]       NVARCHAR (100)   NOT NULL,
    [Severity]   NVARCHAR (100)   NOT NULL,
    [CreatedOn]  DATETIME         NOT NULL,
    [UpdatedOn]  DATETIME         NOT NULL,
    CONSTRAINT [PK_aspdnsf_SysLog] PRIMARY KEY CLUSTERED ([SysLogID] DESC)
);

GO
PRINT N'Creating [dbo].[AuditLog]...';

GO
CREATE TABLE [dbo].[AuditLog] (
    [AuditLogID]        BIGINT          IDENTITY (1, 1) NOT NULL,
    [ActionDate]        DATETIME        NOT NULL,
    [CustomerID]        INT             NOT NULL,
    [UpdatedCustomerID] INT             NOT NULL,
    [OrderNumber]       INT             NOT NULL,
    [Description]       NVARCHAR (100)  NOT NULL,
    [Details]           NVARCHAR (1000) NOT NULL,
    [PagePath]          NVARCHAR (200)  NOT NULL,
    [AuditGroup]        NVARCHAR (30)   NOT NULL,
    [UpdatedOn]         DATETIME        NOT NULL,
    [CreatedOn]         DATETIME        NOT NULL,
    CONSTRAINT [PK_AuditLog] PRIMARY KEY CLUSTERED ([AuditLogID] ASC)
);

GO
PRINT N'Creating [dbo].[BadWord]...';

GO
CREATE TABLE [dbo].[BadWord] (
    [BadWordID]     INT            IDENTITY (1, 1) NOT NULL,
    [LocaleSetting] NVARCHAR (10)  NOT NULL,
    [Word]          NVARCHAR (100) NOT NULL,
    [CreatedOn]     DATETIME       NOT NULL,
    [UpdatedOn]     DATETIME       NOT NULL,
    CONSTRAINT [PK_BadWord] PRIMARY KEY CLUSTERED ([BadWordID] ASC, [LocaleSetting] ASC)
);

GO
PRINT N'Creating [dbo].[BadWord].[IX_BadWord]...';

GO
CREATE NONCLUSTERED INDEX [IX_BadWord]
    ON [dbo].[BadWord]([Word] ASC);

GO
PRINT N'Creating [dbo].[Category]...';

GO
CREATE TABLE [dbo].[Category] (
    [CategoryID]                 INT              IDENTITY (1, 1) NOT NULL,
    [CategoryGUID]               UNIQUEIDENTIFIER NOT NULL,
    [Name]                       NVARCHAR (400)   NOT NULL,
    [Summary]                    NVARCHAR (MAX)   NULL,
    [Description]                NVARCHAR (MAX)   NULL,
    [SEKeywords]                 NVARCHAR (MAX)   NULL,
    [SEDescription]              NVARCHAR (MAX)   NULL,
    [DisplayPrefix]              NVARCHAR (MAX)   NULL,
    [SETitle]                    NVARCHAR (MAX)   NULL,
    [SEAltText]                  NVARCHAR (MAX)   NULL,
    [ParentCategoryID]           INT              NOT NULL,
    [ColWidth]                   INT              NOT NULL,
    [SortByLooks]                TINYINT          NOT NULL,
    [DisplayOrder]               INT              NOT NULL,
    [RelatedDocuments]           NVARCHAR (MAX)   NULL,
    [XmlPackage]                 NVARCHAR (100)   NULL,
    [Published]                  TINYINT          NOT NULL,
    [Wholesale]                  TINYINT          NOT NULL,
    [AllowSectionFiltering]      TINYINT          NOT NULL,
    [AllowManufacturerFiltering] TINYINT          NOT NULL,
    [AllowProductTypeFiltering]  TINYINT          NOT NULL,
    [QuantityDiscountID]         INT              NULL,
    [ShowInProductBrowser]       INT              NOT NULL,
    [SEName]                     NVARCHAR (100)   NULL,
    [ExtensionData]              NVARCHAR (MAX)   NULL,
    [ImageFilenameOverride]      NVARCHAR (MAX)   NULL,
    [IsImport]                   TINYINT          NOT NULL,
    [Deleted]                    TINYINT          NOT NULL,
    [CreatedOn]                  DATETIME         NOT NULL,
    [PageSize]                   INT              NOT NULL,
    [TaxClassID]                 INT              NOT NULL,
    [SkinID]                     INT              NOT NULL,
    [TemplateName]               NVARCHAR (50)    NOT NULL,
    [UpdatedOn]                  DATETIME         NOT NULL,
    CONSTRAINT [PK_Category] PRIMARY KEY CLUSTERED ([CategoryID] ASC)
);

GO
PRINT N'Creating [dbo].[Category].[IX_Category_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Category_Name]
    ON [dbo].[Category]([Name] ASC);

GO
PRINT N'Creating [dbo].[Category].[IX_Category_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Category_Deleted]
    ON [dbo].[Category]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[Category].[IX_Category_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_Category_Published]
    ON [dbo].[Category]([Published] ASC);

GO
PRINT N'Creating [dbo].[Category].[IX_Category_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_Category_Wholesale]
    ON [dbo].[Category]([Wholesale] ASC);

GO
PRINT N'Creating [dbo].[Category].[IX_Category_CategoryGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Category_CategoryGUID]
    ON [dbo].[Category]([CategoryGUID] ASC);

GO
PRINT N'Creating [dbo].[Category].[IX_Category_ParentCategoryID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Category_ParentCategoryID]
    ON [dbo].[Category]([ParentCategoryID] ASC);

GO
PRINT N'Creating [dbo].[Category].[IX_Category_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_Category_DisplayOrder]
    ON [dbo].[Category]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[Category].[IX_Category_Deleted_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_Category_Deleted_Published]
    ON [dbo].[Category]([Deleted] ASC, [Published] ASC);

GO
PRINT N'Creating [dbo].[Category].[IX_Category_Deleted_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_Category_Deleted_Wholesale]
    ON [dbo].[Category]([Deleted] ASC, [Wholesale] ASC);

GO
PRINT N'Creating [dbo].[CIM_AddressPaymentProfileMap]...';

GO
CREATE TABLE [dbo].[CIM_AddressPaymentProfileMap] (
    [CIMId]                 INT           IDENTITY (1, 1) NOT NULL,
    [AddressId]             INT           NOT NULL,
    [CustomerId]            INT           NOT NULL,
    [AuthorizeNetProfileId] BIGINT        NOT NULL,
    [ExpirationMonth]       NVARCHAR (10) NOT NULL,
    [ExpirationYear]        NVARCHAR (10) NOT NULL,
    [CardType]              NVARCHAR (50) NOT NULL,
    [Primary]               BIT           NOT NULL,
    [UpdatedOn]             DATETIME      NOT NULL,
    [CreatedOn]             DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([CIMId] ASC)
);

GO
PRINT N'Creating [dbo].[Country]...';

GO
CREATE TABLE [dbo].[Country] (
    [CountryID]          INT              IDENTITY (1, 1) NOT NULL,
    [CountryGUID]        UNIQUEIDENTIFIER NOT NULL,
    [Name]               NVARCHAR (100)   NOT NULL,
    [TwoLetterISOCode]   NVARCHAR (2)     NULL,
    [ThreeLetterISOCode] NVARCHAR (3)     NULL,
    [NumericISOCode]     NVARCHAR (3)     NULL,
    [Published]          TINYINT          NOT NULL,
    [DisplayOrder]       INT              NOT NULL,
    [ExtensionData]      NVARCHAR (MAX)   NULL,
    [CreatedOn]          DATETIME         NOT NULL,
    [PostalCodeRequired] TINYINT          NOT NULL,
    [PostalCodeRegex]    NVARCHAR (4000)  NULL,
    [PostalCodeExample]  NVARCHAR (50)    NULL,
    [UpdatedOn]          DATETIME         NOT NULL,
    CONSTRAINT [PK_Country] PRIMARY KEY CLUSTERED ([CountryID] ASC)
);

GO
PRINT N'Creating [dbo].[Country].[UIX_Country_Name]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Country_Name]
    ON [dbo].[Country]([Name] ASC);

GO
PRINT N'Creating [dbo].[Country].[IX_Country_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Country_DisplayOrder_Name]
    ON [dbo].[Country]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[Country].[IX_Country_CountryGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Country_CountryGUID]
    ON [dbo].[Country]([CountryGUID] ASC);

GO
PRINT N'Creating [dbo].[Country].[IX_Country_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_Country_DisplayOrder]
    ON [dbo].[Country]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[CountryTaxRate]...';

GO
CREATE TABLE [dbo].[CountryTaxRate] (
    [CountryTaxID] INT      IDENTITY (1, 1) NOT NULL,
    [CountryID]    INT      NOT NULL,
    [TaxClassID]   INT      NOT NULL,
    [TaxRate]      MONEY    NULL,
    [CreatedOn]    DATETIME NOT NULL,
    [UpdatedOn]    DATETIME NOT NULL,
    CONSTRAINT [PK_CountryTaxRate] PRIMARY KEY CLUSTERED ([CountryTaxID] ASC)
);

GO
PRINT N'Creating [dbo].[CountryTaxRate].[UIX_CountryTaxRate_CountryID_TaxClassID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_CountryTaxRate_CountryID_TaxClassID]
    ON [dbo].[CountryTaxRate]([CountryID] ASC, [TaxClassID] ASC);

GO
PRINT N'Creating [dbo].[Coupon]...';

GO
CREATE TABLE [dbo].[Coupon] (
    [CouponID]                           INT              IDENTITY (1, 1) NOT NULL,
    [CouponGUID]                         UNIQUEIDENTIFIER NOT NULL,
    [CouponCode]                         NVARCHAR (50)    NOT NULL,
    [Description]                        NVARCHAR (MAX)   NULL,
    [StartDate]                          DATETIME         NOT NULL,
    [ExpirationDate]                     DATETIME         NOT NULL,
    [DiscountPercent]                    MONEY            NOT NULL,
    [DiscountAmount]                     MONEY            NOT NULL,
    [DiscountIncludesFreeShipping]       TINYINT          NOT NULL,
    [ExpiresOnFirstUseByAnyCustomer]     TINYINT          NOT NULL,
    [ExpiresAfterOneUsageByEachCustomer] TINYINT          NOT NULL,
    [ExpiresAfterNUses]                  INT              NULL,
    [RequiresMinimumOrderAmount]         MONEY            NULL,
    [ValidForCustomers]                  NVARCHAR (MAX)   NULL,
    [ValidForProducts]                   NVARCHAR (MAX)   NULL,
    [ValidForManufacturers]              NVARCHAR (MAX)   NULL,
    [ValidForCategories]                 NVARCHAR (MAX)   NULL,
    [ValidForSections]                   NVARCHAR (MAX)   NULL,
    [CouponType]                         INT              NOT NULL,
    [NumUses]                            INT              NOT NULL,
    [ExtensionData]                      NVARCHAR (MAX)   NULL,
    [Deleted]                            TINYINT          NOT NULL,
    [CreatedOn]                          DATETIME         NOT NULL,
    [UpdatedOn]                          DATETIME         NOT NULL,
    CONSTRAINT [PK_Coupons] PRIMARY KEY CLUSTERED ([CouponID] ASC)
);

GO
PRINT N'Creating [dbo].[Coupon].[UIX_Coupon_CouponGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Coupon_CouponGUID]
    ON [dbo].[Coupon]([CouponGUID] ASC);

GO
PRINT N'Creating [dbo].[Coupon].[UIX_Coupon_CouponCode]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Coupon_CouponCode]
    ON [dbo].[Coupon]([CouponCode] ASC);

GO
PRINT N'Creating [dbo].[Coupon].[IX_Coupon_ExpirationDate]...';

GO
CREATE NONCLUSTERED INDEX [IX_Coupon_ExpirationDate]
    ON [dbo].[Coupon]([ExpirationDate] ASC);

GO
PRINT N'Creating [dbo].[Coupon].[IX_Coupon_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Coupon_Deleted]
    ON [dbo].[Coupon]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[CouponStore]...';

GO
CREATE TABLE [dbo].[CouponStore] (
    [ID]        INT      IDENTITY (1, 1) NOT NULL,
    [CouponID]  INT      NOT NULL,
    [StoreID]   INT      NOT NULL,
    [CreatedOn] DATETIME NOT NULL,
    [UpdatedOn] DATETIME NOT NULL,
    CONSTRAINT [PK_CouponStore] PRIMARY KEY CLUSTERED ([CouponID] ASC, [StoreID] ASC)
);

GO
PRINT N'Creating [dbo].[CreditCardType]...';

GO
CREATE TABLE [dbo].[CreditCardType] (
    [CardTypeID]   INT              IDENTITY (1, 1) NOT NULL,
    [CardTypeGUID] UNIQUEIDENTIFIER NOT NULL,
    [CardType]     NVARCHAR (20)    NOT NULL,
    [Accepted]     TINYINT          NOT NULL,
    [CreatedOn]    DATETIME         NOT NULL,
    [UpdatedOn]    DATETIME         NOT NULL,
    CONSTRAINT [PK_CreditCardType] PRIMARY KEY CLUSTERED ([CardTypeID] ASC)
);

GO
PRINT N'Creating [dbo].[CreditCardType].[UIX_CreditCardTypes]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_CreditCardTypes]
    ON [dbo].[CreditCardType]([CardTypeGUID] ASC);

GO
PRINT N'Creating [dbo].[CreditCardType].[IX_CreditCardType_CardType]...';

GO
CREATE NONCLUSTERED INDEX [IX_CreditCardType_CardType]
    ON [dbo].[CreditCardType]([CardType] ASC);

GO
PRINT N'Creating [dbo].[Currency]...';

GO
CREATE TABLE [dbo].[Currency] (
    [CurrencyID]          INT              IDENTITY (1, 1) NOT NULL,
    [CurrencyGUID]        UNIQUEIDENTIFIER NOT NULL,
    [Name]                NVARCHAR (100)   NOT NULL,
    [CurrencyCode]        NVARCHAR (10)    NOT NULL,
    [ExchangeRate]        MONEY            NULL,
    [WasLiveRate]         TINYINT          NOT NULL,
    [DisplayLocaleFormat] NVARCHAR (10)    NULL,
    [Symbol]              NVARCHAR (10)    NULL,
    [ExtensionData]       NVARCHAR (MAX)   NULL,
    [Published]           TINYINT          NOT NULL,
    [DisplayOrder]        INT              NOT NULL,
    [DisplaySpec]         NVARCHAR (20)    NULL,
    [CreatedOn]           DATETIME         NOT NULL,
    [LastUpdated]         DATETIME         NOT NULL,
    [UpdatedOn]           DATETIME         NOT NULL,
    CONSTRAINT [PK_Currency] PRIMARY KEY CLUSTERED ([CurrencyID] ASC)
);

GO
PRINT N'Creating [dbo].[Currency].[UIX_Currency_CurrencyGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Currency_CurrencyGUID]
    ON [dbo].[Currency]([CurrencyGUID] ASC);

GO
PRINT N'Creating [dbo].[Customer]...';

GO
CREATE TABLE [dbo].[Customer] (
    [CustomerID]                INT              IDENTITY (1, 1) NOT NULL,
    [CustomerGUID]              UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL,
    [CustomerLevelID]           INT              NOT NULL,
    [StoreID]                   INT              NOT NULL,
    [RegisterDate]              DATETIME         NOT NULL,
    [Email]                     NVARCHAR (100)   NOT NULL,
    [Password]                  NVARCHAR (250)   NULL,
    [SaltKey]                   INT              NOT NULL,
    [Gender]                    NVARCHAR (1)     NULL,
    [FirstName]                 NVARCHAR (100)   NULL,
    [LastName]                  NVARCHAR (100)   NULL,
    [Notes]                     NVARCHAR (MAX)   NULL,
    [SkinID]                    INT              NOT NULL,
    [Phone]                     NVARCHAR (25)    NULL,
    [FAX]                       VARCHAR (25)     NULL,
    [AffiliateID]               INT              NULL,
    [Referrer]                  NVARCHAR (MAX)   NULL,
    [CouponCode]                NVARCHAR (50)    NULL,
    [OkToEmail]                 TINYINT          NOT NULL,
    [IsAdmin]                   TINYINT          NOT NULL,
    [BillingEqualsShipping]     TINYINT          NOT NULL,
    [LastIPAddress]             VARCHAR (40)     NULL,
    [OrderNotes]                NVARCHAR (MAX)   NULL,
    [RTShipRequest]             NVARCHAR (MAX)   NULL,
    [RTShipResponse]            NVARCHAR (MAX)   NULL,
    [OrderOptions]              NVARCHAR (MAX)   NULL,
    [LocaleSetting]             NVARCHAR (10)    NOT NULL,
    [MicroPayBalance]           MONEY            NOT NULL,
    [RecurringShippingMethodID] INT              NOT NULL,
    [RecurringShippingMethod]   NVARCHAR (MAX)   NULL,
    [BillingAddressID]          INT              NULL,
    [ShippingAddressID]         INT              NULL,
    [ExtensionData]             NVARCHAR (MAX)   NULL,
    [FinalizationData]          NVARCHAR (MAX)   NULL,
    [Deleted]                   TINYINT          NOT NULL,
    [CreatedOn]                 DATETIME         NOT NULL,
    [Over13Checked]             TINYINT          NULL,
    [CurrencySetting]           NVARCHAR (10)    NULL,
    [VATSetting]                INT              NOT NULL,
    [VATRegistrationID]         NVARCHAR (100)   NOT NULL,
    [StoreCCInDB]               TINYINT          NOT NULL,
    [IsRegistered]              TINYINT          NOT NULL,
    [LockedUntil]               DATETIME         NULL,
    [AdminCanViewCC]            TINYINT          NOT NULL,
    [PwdChanged]                DATETIME         NOT NULL,
    [BadLoginCount]             TINYINT          NOT NULL,
    [LastBadLogin]              DATETIME         NULL,
    [Active]                    TINYINT          NOT NULL,
    [PwdChangeRequired]         TINYINT          NULL,
    [RequestedPaymentMethod]    NVARCHAR (100)   NULL,
    [BuySafe]                   MONEY            NULL,
    [CIM_ProfileId]             BIGINT           NULL,
    [UpdatedOn]                 DATETIME         NOT NULL,
    CONSTRAINT [PK_Customer] PRIMARY KEY CLUSTERED ([CustomerID] ASC)
);

GO
PRINT N'Creating [dbo].[Customer].[UIX_Customer_CustomerGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Customer_CustomerGUID]
    ON [dbo].[Customer]([CustomerGUID] ASC);

GO
PRINT N'Creating [dbo].[Customer].[IX_Customer_EMail]...';

GO
CREATE NONCLUSTERED INDEX [IX_Customer_EMail]
    ON [dbo].[Customer]([Email] ASC);

GO
PRINT N'Creating [dbo].[Customer].[IX_Customer_Password]...';

GO
CREATE NONCLUSTERED INDEX [IX_Customer_Password]
    ON [dbo].[Customer]([Password] ASC);

GO
PRINT N'Creating [dbo].[Customer].[IX_Customer_CustomerLevelID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Customer_CustomerLevelID]
    ON [dbo].[Customer]([CustomerLevelID] ASC);

GO
PRINT N'Creating [dbo].[Customer].[IX_Customer_IsAdmin]...';

GO
CREATE NONCLUSTERED INDEX [IX_Customer_IsAdmin]
    ON [dbo].[Customer]([IsAdmin] ASC);

GO
PRINT N'Creating [dbo].[Customer].[IX_Customer_OkToEMail]...';

GO
CREATE NONCLUSTERED INDEX [IX_Customer_OkToEMail]
    ON [dbo].[Customer]([OkToEmail] ASC);

GO
PRINT N'Creating [dbo].[Customer].[IX_Customer_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Customer_Deleted]
    ON [dbo].[Customer]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[Customer].[IX_Customer_AffiliateID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Customer_AffiliateID]
    ON [dbo].[Customer]([AffiliateID] ASC);

GO
PRINT N'Creating [dbo].[Customer].[IX_Customer_CouponCode]...';

GO
CREATE NONCLUSTERED INDEX [IX_Customer_CouponCode]
    ON [dbo].[Customer]([CouponCode] ASC);

GO
PRINT N'Creating [dbo].[Customer].[IX_Customer_CreatedOn]...';

GO
CREATE NONCLUSTERED INDEX [IX_Customer_CreatedOn]
    ON [dbo].[Customer]([CreatedOn] ASC);

GO
PRINT N'Creating [dbo].[CustomerLevel]...';

GO
CREATE TABLE [dbo].[CustomerLevel] (
    [CustomerLevelID]                     INT              IDENTITY (1, 1) NOT NULL,
    [CustomerLevelGUID]                   UNIQUEIDENTIFIER NOT NULL,
    [Name]                                NVARCHAR (400)   NOT NULL,
    [LevelDiscountPercent]                MONEY            NOT NULL,
    [LevelDiscountAmount]                 MONEY            NOT NULL,
    [LevelHasFreeShipping]                TINYINT          NOT NULL,
    [LevelAllowsQuantityDiscounts]        TINYINT          NOT NULL,
    [LevelHasNoTax]                       TINYINT          NOT NULL,
    [LevelAllowsCoupons]                  TINYINT          NOT NULL,
    [LevelDiscountsApplyToExtendedPrices] TINYINT          NOT NULL,
    [LevelAllowsPO]                       TINYINT          NOT NULL,
    [DisplayOrder]                        INT              NOT NULL,
    [ParentCustomerLevelID]               INT              NOT NULL,
    [SEName]                              NVARCHAR (100)   NULL,
    [ExtensionData]                       NVARCHAR (MAX)   NULL,
    [Deleted]                             TINYINT          NOT NULL,
    [CreatedOn]                           DATETIME         NOT NULL,
    [SkinID]                              INT              NOT NULL,
    [TemplateName]                        NVARCHAR (50)    NOT NULL,
    [UpdatedOn]                           DATETIME         NOT NULL,
    CONSTRAINT [PK_CustomerLevel] PRIMARY KEY CLUSTERED ([CustomerLevelID] ASC)
);

GO
PRINT N'Creating [dbo].[CustomerLevel].[IX_CustomerLevel_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_CustomerLevel_Deleted]
    ON [dbo].[CustomerLevel]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[CustomerLevel].[IX_CustomerLevel_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_CustomerLevel_Name]
    ON [dbo].[CustomerLevel]([Name] ASC);

GO
PRINT N'Creating [dbo].[CustomerLevel].[IX_CustomerLevel_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_CustomerLevel_DisplayOrder]
    ON [dbo].[CustomerLevel]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[CustomerLevel].[IX_CustomerLevel_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_CustomerLevel_DisplayOrder_Name]
    ON [dbo].[CustomerLevel]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[CustomerDataRetention]...';

CREATE TABLE [dbo].[CustomerDataRetention](
	[CustomerId] [int] NOT NULL,
	[RemovalRequestDate] [datetime] NULL,
	[RemovalDate] [datetime] NULL,
	[CustomerLastActiveOn] [datetime] NULL,
 CONSTRAINT [PK_CustomerDataRetention] PRIMARY KEY CLUSTERED 
(
	[CustomerId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

PRINT N'Creating [dbo].[CustomerSession]...';
GO
CREATE TABLE [dbo].[CustomerSession] (
    [CustomerSessionID]   INT              IDENTITY (1, 1) NOT NULL,
    [CustomerID]          INT              NOT NULL,
    [SessionName]         NVARCHAR (100)   NOT NULL,
    [SessionValue]        NVARCHAR (MAX)   NULL,
    [ipaddr]              VARCHAR (15)     NULL,
    [LastActivity]        DATETIME         NOT NULL,
    [LoggedOut]           DATETIME         NULL,
    [CustomerSessionGUID] UNIQUEIDENTIFIER NOT NULL,
    [CreatedOn]           DATETIME         NOT NULL,
    [ExpiresOn]           DATETIME         NOT NULL,
    [UpdatedOn]           DATETIME         NOT NULL,
    CONSTRAINT [PK_CustomerSession] PRIMARY KEY CLUSTERED ([CustomerSessionID] ASC)
);

GO
PRINT N'Creating [dbo].[CustomerSession].[IX_CustomerSession_CustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_CustomerSession_CustomerID]
    ON [dbo].[CustomerSession]([CustomerID] ASC);

GO
PRINT N'Creating [dbo].[CustomReport]...';

GO
CREATE TABLE [dbo].[CustomReport] (
    [CustomReportID]   INT              IDENTITY (1, 1) NOT NULL,
    [CustomReportGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (400)   NOT NULL,
    [Description]      NVARCHAR (MAX)   NULL,
    [SQLCommand]       NVARCHAR (MAX)   NULL,
    [CreatedOn]        DATETIME         NOT NULL,
    [UpdatedOn]        DATETIME         NOT NULL,
    CONSTRAINT [PK_CustomReport] PRIMARY KEY CLUSTERED ([CustomReportID] ASC)
);

GO
PRINT N'Creating [dbo].[Distributor]...';

GO
CREATE TABLE [dbo].[Distributor] (
    [DistributorID]          INT              IDENTITY (1, 1) NOT NULL,
    [DistributorGUID]        UNIQUEIDENTIFIER NOT NULL,
    [Name]                   NVARCHAR (400)   NOT NULL,
    [SEName]                 NVARCHAR (100)   NULL,
    [SEKeywords]             NVARCHAR (MAX)   NULL,
    [SEDescription]          NVARCHAR (MAX)   NULL,
    [SETitle]                NVARCHAR (MAX)   NULL,
    [SEAltText]              NVARCHAR (MAX)   NULL,
    [Address1]               NVARCHAR (100)   NULL,
    [Address2]               NVARCHAR (100)   NULL,
    [Suite]                  NVARCHAR (25)    NULL,
    [City]                   NVARCHAR (100)   NULL,
    [State]                  NVARCHAR (100)   NULL,
    [ZipCode]                NVARCHAR (10)    NULL,
    [Country]                NVARCHAR (100)   NULL,
    [Phone]                  NVARCHAR (25)    NULL,
    [FAX]                    NVARCHAR (25)    NULL,
    [URL]                    NVARCHAR (255)   NULL,
    [Email]                  NVARCHAR (100)   NULL,
    [Summary]                NVARCHAR (MAX)   NULL,
    [Description]            NVARCHAR (MAX)   NULL,
    [Notes]                  NVARCHAR (MAX)   NULL,
    [QuantityDiscountID]     INT              NULL,
    [SortByLooks]            TINYINT          NOT NULL,
    [XmlPackage]             NVARCHAR (100)   NULL,
    [ColWidth]               INT              NOT NULL,
    [DisplayOrder]           INT              NOT NULL,
    [ExtensionData]          NVARCHAR (MAX)   NULL,
    [NotificationXmlPackage] NVARCHAR (100)   NULL,
    [ImageFilenameOverride]  NVARCHAR (MAX)   NULL,
    [ParentDistributorID]    INT              NOT NULL,
    [Published]              TINYINT          NOT NULL,
    [Wholesale]              TINYINT          NOT NULL,
    [IsImport]               TINYINT          NOT NULL,
    [Deleted]                TINYINT          NOT NULL,
    [CreatedOn]              DATETIME         NOT NULL,
    [PageSize]               INT              NOT NULL,
    [TaxClassID]             INT              NOT NULL,
    [SkinID]                 INT              NOT NULL,
    [TemplateName]           NVARCHAR (50)    NOT NULL,
    [UpdatedOn]              DATETIME         NOT NULL,
    CONSTRAINT [PK_Distributor] PRIMARY KEY CLUSTERED ([DistributorID] ASC)
);

GO
PRINT N'Creating [dbo].[Distributor].[UIX_Distributor_DistributorGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Distributor_DistributorGUID]
    ON [dbo].[Distributor]([DistributorGUID] ASC);

GO
PRINT N'Creating [dbo].[Distributor].[IX_Distributor_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_Distributor_DisplayOrder]
    ON [dbo].[Distributor]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[Distributor].[IX_Distributor_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Distributor_Name]
    ON [dbo].[Distributor]([Name] ASC);

GO
PRINT N'Creating [dbo].[Distributor].[IX_Distributor_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Distributor_DisplayOrder_Name]
    ON [dbo].[Distributor]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[Document]...';

GO
CREATE TABLE [dbo].[Document] (
    [DocumentID]            INT              IDENTITY (1, 1) NOT NULL,
    [DocumentGUID]          UNIQUEIDENTIFIER NOT NULL,
    [Name]                  NVARCHAR (400)   NOT NULL,
    [Summary]               NVARCHAR (MAX)   NULL,
    [Description]           NVARCHAR (MAX)   NULL,
    [MiscText]              NVARCHAR (MAX)   NULL,
    [SEName]                NVARCHAR (150)   NULL,
    [SEKeywords]            NVARCHAR (MAX)   NULL,
    [SEDescription]         NVARCHAR (MAX)   NULL,
    [SETitle]               NVARCHAR (MAX)   NULL,
    [SEAltText]             NVARCHAR (MAX)   NULL,
    [RequiresRegistration]  TINYINT          NOT NULL,
    [Looks]                 INT              NOT NULL,
    [Notes]                 NVARCHAR (MAX)   NULL,
    [RelatedCategories]     NVARCHAR (MAX)   NULL,
    [RelatedSections]       NVARCHAR (MAX)   NULL,
    [RelatedManufacturers]  NVARCHAR (MAX)   NULL,
    [RelatedProducts]       NVARCHAR (MAX)   NULL,
    [Published]             TINYINT          NOT NULL,
    [Wholesale]             TINYINT          NOT NULL,
    [ExtensionData]         NVARCHAR (MAX)   NULL,
    [ImageFilenameOverride] NVARCHAR (MAX)   NULL,
    [XmlPackage]            NVARCHAR (100)   NULL,
    [IsImport]              TINYINT          NOT NULL,
    [Deleted]               TINYINT          NOT NULL,
    [CreatedOn]             DATETIME         NOT NULL,
    [PageSize]              INT              NOT NULL,
    [UpdatedOn]             DATETIME         NOT NULL,
    CONSTRAINT [PK_Document] PRIMARY KEY CLUSTERED ([DocumentID] ASC)
);

GO
PRINT N'Creating [dbo].[Document].[UIX_Document_DocumentGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Document_DocumentGUID]
    ON [dbo].[Document]([DocumentGUID] ASC);

GO
PRINT N'Creating [dbo].[Document].[IX_Document_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_Document_Published]
    ON [dbo].[Document]([Published] ASC);

GO
PRINT N'Creating [dbo].[Document].[IX_Document_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_Document_Wholesale]
    ON [dbo].[Document]([Wholesale] ASC);

GO
PRINT N'Creating [dbo].[Document].[IX_Document_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Document_Deleted]
    ON [dbo].[Document]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[Document].[IX_Document_Published_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Document_Published_Deleted]
    ON [dbo].[Document]([Published] ASC, [Deleted] ASC);

GO
PRINT N'Creating [dbo].[Document].[IX_Document_Wholesale_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Document_Wholesale_Deleted]
    ON [dbo].[Document]([Wholesale] ASC, [Deleted] ASC);

GO
PRINT N'Creating [dbo].[Document].[IX_Document_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Document_Name]
    ON [dbo].[Document]([Name] ASC);

GO
PRINT N'Creating [dbo].[EntityStore]...';

GO
CREATE TABLE [dbo].[EntityStore] (
    [ID]         INT           IDENTITY (1, 1) NOT NULL,
    [StoreID]    INT           NOT NULL,
    [EntityID]   INT           NOT NULL,
    [EntityType] NVARCHAR (50) NOT NULL,
    [CreatedOn]  DATETIME      NOT NULL,
    [UpdatedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_EntityStore] PRIMARY KEY CLUSTERED ([StoreID] ASC, [EntityID] ASC, [EntityType] ASC)
);

GO
PRINT N'Creating [dbo].[ErrorLog]...';

GO
CREATE TABLE [dbo].[ErrorLog] (
    [logid]     INT            IDENTITY (1, 1) NOT NULL,
    [errorDt]   DATETIME       NOT NULL,
    [source]    VARCHAR (400)  NULL,
    [errormsg]  NVARCHAR (MAX) NULL,
    [UpdatedOn] DATETIME       NOT NULL,
    [CreatedOn] DATETIME       NOT NULL,
    CONSTRAINT [PK_ErrorLog] PRIMARY KEY CLUSTERED ([logid] ASC)
);

GO
PRINT N'Creating [dbo].[ErrorMessage]...';

GO
CREATE TABLE [dbo].[ErrorMessage] (
    [MessageId]   INT              IDENTITY (1, 1) NOT NULL,
    [Message]     NVARCHAR (MAX)   NOT NULL,
    [MessageGuid] UNIQUEIDENTIFIER NOT NULL,
    [UpdatedOn]   DATETIME         NOT NULL,
    [CreatedOn]   DATETIME         NOT NULL,
    CONSTRAINT [PK_ErrorMessage] PRIMARY KEY CLUSTERED ([MessageId] ASC)
);

GO
PRINT N'Creating [dbo].[EventHandler]...';

GO
CREATE TABLE [dbo].[EventHandler] (
    [EventID]    INT           IDENTITY (1, 1) NOT NULL,
    [EventName]  NVARCHAR (20) NOT NULL,
    [CalloutURL] VARCHAR (200) NOT NULL,
    [XmlPackage] VARCHAR (100) NOT NULL,
    [Debug]      BIT           NOT NULL,
    [Active]     BIT           NOT NULL,
    [UpdatedOn]  DATETIME      NOT NULL,
    [CreatedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_EventHandler] PRIMARY KEY CLUSTERED ([EventID] ASC)
);

GO
PRINT N'Creating [dbo].[EventHandler].[UIX_EventhHandler]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_EventhHandler]
    ON [dbo].[EventHandler]([EventName] ASC);

GO
PRINT N'Creating [dbo].[ExtendedPrice]...';

GO
CREATE TABLE [dbo].[ExtendedPrice] (
    [ExtendedPriceID]   INT              IDENTITY (1, 1) NOT NULL,
    [ExtendedPriceGUID] UNIQUEIDENTIFIER NOT NULL,
    [VariantID]         INT              NOT NULL,
    [CustomerLevelID]   INT              NOT NULL,
    [Price]             MONEY            NOT NULL,
    [ExtensionData]     NVARCHAR (MAX)   NULL,
    [CreatedOn]         DATETIME         NOT NULL,
    [UpdatedOn]         DATETIME         NOT NULL,
    CONSTRAINT [PK_ExtendedPrice] PRIMARY KEY CLUSTERED ([ExtendedPriceID] ASC)
);

GO
PRINT N'Creating [dbo].[ExtendedPrice].[UIX_ExtendedPrice_2]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_ExtendedPrice_2]
    ON [dbo].[ExtendedPrice]([ExtendedPriceGUID] ASC);

GO
PRINT N'Creating [dbo].[ExtendedPrice].[IX_ExtendedPrice_VariantID_CustomerLevelID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ExtendedPrice_VariantID_CustomerLevelID]
    ON [dbo].[ExtendedPrice]([VariantID] ASC, [CustomerLevelID] ASC);

GO
PRINT N'Creating [dbo].[ExtendedPrice].[IX_ExtendedPrice_VariantID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ExtendedPrice_VariantID]
    ON [dbo].[ExtendedPrice]([VariantID] ASC);

GO
PRINT N'Creating [dbo].[FailedTransaction]...';

GO
CREATE TABLE [dbo].[FailedTransaction] (
    [DBRecNo]                 INT            IDENTITY (1, 1) NOT NULL,
    [CustomerID]              INT            NOT NULL,
    [OrderNumber]             INT            NOT NULL,
    [OrderDate]               DATETIME       NOT NULL,
    [PaymentGateway]          NVARCHAR (50)  NULL,
    [PaymentMethod]           NVARCHAR (50)  NULL,
    [TransactionCommand]      NVARCHAR (MAX) NULL,
    [TransactionResult]       NVARCHAR (MAX) NULL,
    [ExtensionData]           NVARCHAR (MAX) NULL,
    [MaxMindDetails]          NVARCHAR (MAX) NULL,
    [IPAddress]               NVARCHAR (25)  NULL,
    [MaxMindFraudScore]       DECIMAL (5, 2) NULL,
    [RecurringSubscriptionID] NVARCHAR (100) NOT NULL,
    [CustomerEMailed]         TINYINT        NOT NULL,
    [UpdatedOn]               DATETIME       NOT NULL,
    [CreatedOn]               DATETIME       NOT NULL,
    CONSTRAINT [PK_FailedTransactions] PRIMARY KEY CLUSTERED ([DBRecNo] ASC)
);

GO
PRINT N'Creating [dbo].[FailedTransaction].[IX_FailedTransaction_OrderDate]...';

GO
CREATE NONCLUSTERED INDEX [IX_FailedTransaction_OrderDate]
    ON [dbo].[FailedTransaction]([OrderDate] ASC);

GO
PRINT N'Creating [dbo].[FailedTransaction].[IX_FailedTransaction_PaymentGateway]...';

GO
CREATE NONCLUSTERED INDEX [IX_FailedTransaction_PaymentGateway]
    ON [dbo].[FailedTransaction]([PaymentGateway] ASC);

GO
PRINT N'Creating [dbo].[Feed]...';

GO
CREATE TABLE [dbo].[Feed] (
    [FeedID]        INT              IDENTITY (1, 1) NOT NULL,
    [FeedGUID]      UNIQUEIDENTIFIER NOT NULL,
    [StoreID]       INT              NOT NULL,
    [Name]          NVARCHAR (100)   NULL,
    [DisplayOrder]  INT              NOT NULL,
    [XmlPackage]    NVARCHAR (100)   NULL,
    [CanAutoFTP]    TINYINT          NOT NULL,
    [FTPUsername]   NVARCHAR (100)   NULL,
    [FTPPassword]   NVARCHAR (100)   NULL,
    [FTPServer]     NVARCHAR (100)   NULL,
    [FTPPort]       INT              NULL,
    [FTPFilename]   NVARCHAR (1000)  NULL,
    [ExtensionData] NVARCHAR (MAX)   NULL,
    [CreatedOn]     DATETIME         NOT NULL,
    [UpdatedOn]     DATETIME         NOT NULL,
    CONSTRAINT [PK_Feed] PRIMARY KEY CLUSTERED ([FeedID] ASC)
);

GO
PRINT N'Creating [dbo].[Feed].[UIX_Feed_FeedGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Feed_FeedGUID]
    ON [dbo].[Feed]([FeedGUID] ASC);

GO
PRINT N'Creating [dbo].[Feed].[IX_Feed_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_Feed_DisplayOrder]
    ON [dbo].[Feed]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[Feed].[IX_Feed_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Feed_DisplayOrder_Name]
    ON [dbo].[Feed]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[Genre]...';

GO
CREATE TABLE [dbo].[Genre] (
    [GenreID]                INT              IDENTITY (1, 1) NOT NULL,
    [GenreGUID]              UNIQUEIDENTIFIER NOT NULL,
    [Name]                   NVARCHAR (400)   NOT NULL,
    [SEName]                 NVARCHAR (100)   NULL,
    [SEKeywords]             NVARCHAR (MAX)   NULL,
    [SEDescription]          NVARCHAR (MAX)   NULL,
    [SETitle]                NVARCHAR (MAX)   NULL,
    [SEAltText]              NVARCHAR (MAX)   NULL,
    [Address1]               NVARCHAR (100)   NULL,
    [Address2]               NVARCHAR (100)   NULL,
    [Suite]                  NVARCHAR (25)    NULL,
    [City]                   NVARCHAR (100)   NULL,
    [State]                  NVARCHAR (100)   NULL,
    [ZipCode]                NVARCHAR (10)    NULL,
    [Country]                NVARCHAR (100)   NULL,
    [Phone]                  NVARCHAR (25)    NULL,
    [FAX]                    NVARCHAR (25)    NULL,
    [URL]                    NVARCHAR (255)   NULL,
    [Email]                  NVARCHAR (100)   NULL,
    [Summary]                NVARCHAR (MAX)   NULL,
    [Description]            NVARCHAR (MAX)   NULL,
    [Notes]                  NVARCHAR (MAX)   NULL,
    [QuantityDiscountID]     INT              NULL,
    [SortByLooks]            TINYINT          NOT NULL,
    [XmlPackage]             NVARCHAR (100)   NULL,
    [ColWidth]               INT              NOT NULL,
    [DisplayOrder]           INT              NOT NULL,
    [ExtensionData]          NVARCHAR (MAX)   NULL,
    [NotificationXmlPackage] NVARCHAR (100)   NULL,
    [ImageFilenameOverride]  NVARCHAR (MAX)   NULL,
    [ParentGenreID]          INT              NOT NULL,
    [Published]              TINYINT          NOT NULL,
    [Wholesale]              TINYINT          NOT NULL,
    [IsImport]               TINYINT          NOT NULL,
    [Deleted]                TINYINT          NOT NULL,
    [CreatedOn]              DATETIME         NOT NULL,
    [PageSize]               INT              NOT NULL,
    [TaxClassID]             INT              NOT NULL,
    [SkinID]                 INT              NOT NULL,
    [TemplateName]           NVARCHAR (50)    NOT NULL,
    [UpdatedOn]              DATETIME         NOT NULL,
    CONSTRAINT [PK_Genre] PRIMARY KEY CLUSTERED ([GenreID] ASC)
);

GO
PRINT N'Creating [dbo].[Genre].[UIX_Genre_GenreGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Genre_GenreGUID]
    ON [dbo].[Genre]([GenreGUID] ASC);

GO
PRINT N'Creating [dbo].[Genre].[IX_Genre_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Genre_Name]
    ON [dbo].[Genre]([Name] ASC);

GO
PRINT N'Creating [dbo].[Genre].[IX_Genre_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Genre_DisplayOrder_Name]
    ON [dbo].[Genre]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[GiftCard]...';

GO
CREATE TABLE [dbo].[GiftCard] (
    [GiftCardID]              INT              IDENTITY (1, 1) NOT NULL,
    [GiftCardGUID]            UNIQUEIDENTIFIER NOT NULL,
    [SerialNumber]            NVARCHAR (100)   NULL,
    [PurchasedByCustomerID]   INT              NOT NULL,
    [OrderNumber]             INT              NOT NULL,
    [ShoppingCartRecID]       INT              NOT NULL,
    [ProductID]               INT              NOT NULL,
    [VariantID]               INT              NOT NULL,
    [InitialAmount]           MONEY            NOT NULL,
    [Balance]                 MONEY            NOT NULL,
    [StartDate]               DATETIME         NOT NULL,
    [ExpirationDate]          DATETIME         NOT NULL,
    [GiftCardTypeID]          INT              NULL,
    [EMailName]               NVARCHAR (100)   NULL,
    [EMailTo]                 NVARCHAR (100)   NULL,
    [EMailMessage]            NVARCHAR (MAX)   NULL,
    [ValidForCustomers]       NVARCHAR (MAX)   NULL,
    [ValidForProducts]        NVARCHAR (MAX)   NULL,
    [ValidForManufacturers]   NVARCHAR (MAX)   NULL,
    [ValidForCategories]      NVARCHAR (MAX)   NULL,
    [ValidForSections]        NVARCHAR (MAX)   NULL,
    [DisabledByAdministrator] TINYINT          NOT NULL,
    [ExtensionData]           NVARCHAR (MAX)   NULL,
    [CreatedOn]               DATETIME         NOT NULL,
    [UpdatedOn]               DATETIME         NOT NULL,
    CONSTRAINT [PK_GiftCard] PRIMARY KEY CLUSTERED ([GiftCardID] ASC)
);

GO
PRINT N'Creating [dbo].[GiftCard].[UIX_GiftCard_GiftCardGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_GiftCard_GiftCardGUID]
    ON [dbo].[GiftCard]([GiftCardGUID] ASC);

GO
PRINT N'Creating [dbo].[GiftCard].[IX_GiftCard_SerialNumber]...';

GO
CREATE NONCLUSTERED INDEX [IX_GiftCard_SerialNumber]
    ON [dbo].[GiftCard]([SerialNumber] ASC);

GO
PRINT N'Creating [dbo].[GiftCard].[IX_GiftCard_ExpirationDate]...';

GO
CREATE NONCLUSTERED INDEX [IX_GiftCard_ExpirationDate]
    ON [dbo].[GiftCard]([ExpirationDate] ASC);

GO
PRINT N'Creating [dbo].[GiftCard].[IX_GiftCard_CreatedOn]...';

GO
CREATE NONCLUSTERED INDEX [IX_GiftCard_CreatedOn]
    ON [dbo].[GiftCard]([CreatedOn] ASC);

GO
PRINT N'Creating [dbo].[GiftCard].[IX_GiftCard_PurchasedByCustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_GiftCard_PurchasedByCustomerID]
    ON [dbo].[GiftCard]([PurchasedByCustomerID] ASC);

GO
PRINT N'Creating [dbo].[GiftCardStore]...';

GO
CREATE TABLE [dbo].[GiftCardStore] (
    [ID]         INT      IDENTITY (1, 1) NOT NULL,
    [GiftCardID] INT      NOT NULL,
    [StoreID]    INT      NOT NULL,
    [CreatedOn]  DATETIME NOT NULL,
    [UpdatedOn]  DATETIME NOT NULL,
    CONSTRAINT [PK_GiftCardStore] PRIMARY KEY CLUSTERED ([GiftCardID] ASC, [StoreID] ASC)
);

GO
PRINT N'Creating [dbo].[GiftCardUsage]...';

GO
CREATE TABLE [dbo].[GiftCardUsage] (
    [GiftCardUsageID]   INT              IDENTITY (1, 1) NOT NULL,
    [GiftCardUsageGUID] UNIQUEIDENTIFIER NOT NULL,
    [GiftCardID]        INT              NOT NULL,
    [UsageTypeID]       INT              NOT NULL,
    [UsedByCustomerID]  INT              NOT NULL,
    [OrderNumber]       INT              NOT NULL,
    [Amount]            MONEY            NOT NULL,
    [ExtensionData]     NVARCHAR (MAX)   NULL,
    [CreatedOn]         DATETIME         NOT NULL,
    [UpdatedOn]         DATETIME         NOT NULL,
    CONSTRAINT [PK_GiftCardUsage] PRIMARY KEY CLUSTERED ([GiftCardUsageID] ASC)
);

GO
PRINT N'Creating [dbo].[GiftCardUsage].[UIX_GiftCardUsage_GiftCardUsageGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_GiftCardUsage_GiftCardUsageGUID]
    ON [dbo].[GiftCardUsage]([GiftCardUsageGUID] ASC);

GO
PRINT N'Creating [dbo].[GiftCardUsage].[IX_GiftCardUsage_GiftCardID]...';

GO
CREATE NONCLUSTERED INDEX [IX_GiftCardUsage_GiftCardID]
    ON [dbo].[GiftCardUsage]([GiftCardID] ASC);

GO
PRINT N'Creating [dbo].[GiftCardUsage].[IX_GiftCardUsage_UsedByCustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_GiftCardUsage_UsedByCustomerID]
    ON [dbo].[GiftCardUsage]([UsedByCustomerID] ASC);

GO
PRINT N'Creating [dbo].[GlobalConfig]...';

GO
CREATE TABLE [dbo].[GlobalConfig] (
    [GlobalConfigID]   INT              IDENTITY (1, 1) NOT NULL,
    [GlobalConfigGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (100)   NOT NULL,
    [Description]      NVARCHAR (MAX)   NULL,
    [ConfigValue]      NVARCHAR (MAX)   NULL,
    [ValueType]        VARCHAR (30)     NOT NULL,
    [GroupName]        NVARCHAR (100)   NULL,
    [EnumValues]       NVARCHAR (MAX)   NULL,
    [SuperOnly]        TINYINT          NOT NULL,
    [Hidden]           BIT              NOT NULL,
    [IsMultiStore]     BIT              NOT NULL,
    [CreatedOn]        DATETIME         NOT NULL,
    [UpdatedOn]        DATETIME         NOT NULL,
    CONSTRAINT [PK_GlobalConfig] PRIMARY KEY CLUSTERED ([GlobalConfigID] ASC),
    CONSTRAINT [UQ_GlobalConfig_Name] UNIQUE NONCLUSTERED ([Name] ASC)
);

GO
PRINT N'Creating [dbo].[Inventory]...';

GO
CREATE TABLE [dbo].[Inventory] (
    [InventoryID]       INT              IDENTITY (1, 1) NOT NULL,
    [InventoryGUID]     UNIQUEIDENTIFIER NOT NULL,
    [VariantID]         INT              NOT NULL,
    [Color]             NVARCHAR (100)   NULL,
    [Size]              NVARCHAR (100)   NULL,
    [Quan]              INT              NOT NULL,
    [VendorFullSKU]     NVARCHAR (50)    NULL,
    [WarehouseLocation] NVARCHAR (100)   NULL,
    [WeightDelta]       MONEY            NOT NULL,
    [VendorID]          NVARCHAR (50)    NULL,
    [ExtensionData]     NVARCHAR (MAX)   NULL,
    [CreatedOn]         DATETIME         NOT NULL,
    [GTIN]              NVARCHAR (14)    NULL,
    [UpdatedOn]         DATETIME         NOT NULL,
    CONSTRAINT [PK_Inventory] PRIMARY KEY CLUSTERED ([InventoryID] ASC)
);

GO
PRINT N'Creating [dbo].[Inventory].[UIX_Inventory_InventoryGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Inventory_InventoryGUID]
    ON [dbo].[Inventory]([InventoryGUID] ASC);

GO
PRINT N'Creating [dbo].[Inventory].[IX_Inventory_VariantID_Color_Size]...';

GO
CREATE NONCLUSTERED INDEX [IX_Inventory_VariantID_Color_Size]
    ON [dbo].[Inventory]([VariantID] ASC, [Color] ASC, [Size] ASC);

GO
PRINT N'Creating [dbo].[KitCart]...';

GO
CREATE TABLE [dbo].[KitCart] (
    [KitCartRecID]                 INT            IDENTITY (1, 1) NOT NULL,
    [CustomerID]                   INT            NOT NULL,
    [ShoppingCartRecID]            INT            NOT NULL,
    [ProductID]                    INT            NOT NULL,
    [VariantID]                    INT            NOT NULL,
    [KitGroupID]                   INT            NOT NULL,
    [KitGroupTypeID]               INT            NOT NULL,
    [KitItemID]                    INT            NOT NULL,
    [Quantity]                     INT            NOT NULL,
    [CartType]                     INT            NOT NULL,
    [OriginalRecurringOrderNumber] INT            NULL,
    [TextOption]                   NVARCHAR (MAX) NULL,
    [InventoryVariantID]           INT            NULL,
    [InventoryVariantColor]        NVARCHAR (100) NULL,
    [InventoryVariantSize]         NVARCHAR (100) NULL,
    [ExtensionData]                NVARCHAR (MAX) NULL,
    [CreatedOn]                    DATETIME       NOT NULL,
    [UpdatedOn]                    DATETIME       NOT NULL,
    CONSTRAINT [PK_KitCart] PRIMARY KEY CLUSTERED ([KitCartRecID] ASC)
);

GO
PRINT N'Creating [dbo].[KitCart].[IX_KitCart_CreatedOn]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitCart_CreatedOn]
    ON [dbo].[KitCart]([CreatedOn] ASC);

GO
PRINT N'Creating [dbo].[KitCart].[IX_KitCart_ShoppingCartRecID]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitCart_ShoppingCartRecID]
    ON [dbo].[KitCart]([ShoppingCartRecID] ASC);

GO
PRINT N'Creating [dbo].[KitCart].[IX_KitCart_CustomerID_ShoppingCartRecID]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitCart_CustomerID_ShoppingCartRecID]
    ON [dbo].[KitCart]([CustomerID] ASC, [ShoppingCartRecID] ASC);

GO
PRINT N'Creating [dbo].[KitCart].[IX_KitCart_ProductID]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitCart_ProductID]
    ON [dbo].[KitCart]([ProductID] ASC);

GO
PRINT N'Creating [dbo].[KitCart].[IX_KitCart_VariantID]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitCart_VariantID]
    ON [dbo].[KitCart]([VariantID] ASC);

GO
PRINT N'Creating [dbo].[KitCart].[IX_KitCart_KitGroupID]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitCart_KitGroupID]
    ON [dbo].[KitCart]([KitGroupID] ASC);

GO
PRINT N'Creating [dbo].[KitCart].[IX_KitCart_KitItemID]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitCart_KitItemID]
    ON [dbo].[KitCart]([KitItemID] ASC);

GO
PRINT N'Creating [dbo].[KitGroup]...';

GO
CREATE TABLE [dbo].[KitGroup] (
    [KitGroupID]     INT              IDENTITY (1, 1) NOT NULL,
    [KitGroupGUID]   UNIQUEIDENTIFIER NOT NULL,
    [Name]           NVARCHAR (400)   NOT NULL,
    [Description]    NVARCHAR (MAX)   NULL,
    [Summary]        NVARCHAR (MAX)   NULL,
    [ProductID]      INT              NOT NULL,
    [DisplayOrder]   INT              NOT NULL,
    [KitGroupTypeID] INT              NOT NULL,
    [IsRequired]     TINYINT          NOT NULL,
    [ExtensionData]  NVARCHAR (MAX)   NULL,
    [CreatedOn]      DATETIME         NOT NULL,
    [IsReadOnly]     TINYINT          NOT NULL,
    [UpdatedOn]      DATETIME         NOT NULL,
    CONSTRAINT [PK_KitGroup] PRIMARY KEY CLUSTERED ([KitGroupID] ASC)
);

GO
PRINT N'Creating [dbo].[KitGroup].[UIX_KitGroup_KitGroupGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_KitGroup_KitGroupGUID]
    ON [dbo].[KitGroup]([KitGroupGUID] ASC);

GO
PRINT N'Creating [dbo].[KitGroup].[IX_KitGroup_ProductID]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitGroup_ProductID]
    ON [dbo].[KitGroup]([ProductID] ASC);

GO
PRINT N'Creating [dbo].[KitGroup].[IX_KitGroup_ProductID_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitGroup_ProductID_DisplayOrder]
    ON [dbo].[KitGroup]([ProductID] ASC, [DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[KitGroup].[IX_KitGroup_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitGroup_DisplayOrder]
    ON [dbo].[KitGroup]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[KitGroupType]...';

GO
CREATE TABLE [dbo].[KitGroupType] (
    [KitGroupTypeID]   INT              IDENTITY (1, 1) NOT NULL,
    [KitGroupTypeGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (400)   NOT NULL,
    [DisplayOrder]     INT              NOT NULL,
    [CreatedOn]        DATETIME         NOT NULL,
    [UpdatedOn]        DATETIME         NOT NULL,
    CONSTRAINT [PK_KitGroupType] PRIMARY KEY CLUSTERED ([KitGroupTypeID] ASC)
);

GO
PRINT N'Creating [dbo].[KitGroupType].[UIX_KitGroupType_KitGroupTypeGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_KitGroupType_KitGroupTypeGUID]
    ON [dbo].[KitGroupType]([KitGroupTypeGUID] ASC);

GO
PRINT N'Creating [dbo].[KitGroupType].[IX_KitGroupType_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitGroupType_DisplayOrder]
    ON [dbo].[KitGroupType]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[KitGroupType].[IX_KitGroupType_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitGroupType_DisplayOrder_Name]
    ON [dbo].[KitGroupType]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[KitGroupType].[IX_KitGroupType_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitGroupType_Name]
    ON [dbo].[KitGroupType]([Name] ASC);

GO
PRINT N'Creating [dbo].[KitItem]...';

GO
CREATE TABLE [dbo].[KitItem] (
    [KitItemID]              INT              IDENTITY (1, 1) NOT NULL,
    [KitItemGUID]            UNIQUEIDENTIFIER NOT NULL,
    [KitGroupID]             INT              NOT NULL,
    [Name]                   NVARCHAR (400)   NOT NULL,
    [Description]            NVARCHAR (MAX)   NULL,
    [PriceDelta]             MONEY            NOT NULL,
    [WeightDelta]            MONEY            NOT NULL,
    [IsDefault]              TINYINT          NOT NULL,
    [DisplayOrder]           INT              NOT NULL,
    [ExtensionData]          NVARCHAR (MAX)   NULL,
    [TextOptionMaxLength]    INT              NULL,
    [TextOptionWidth]        INT              NULL,
    [TextOptionHeight]       INT              NULL,
    [InventoryVariantID]     INT              NULL,
    [InventoryQuantityDelta] INT              NOT NULL,
    [InventoryVariantColor]  NVARCHAR (100)   NULL,
    [InventoryVariantSize]   NVARCHAR (100)   NULL,
    [CreatedOn]              DATETIME         NOT NULL,
    [UpdatedOn]              DATETIME         NOT NULL,
    CONSTRAINT [PK_KitItem] PRIMARY KEY CLUSTERED ([KitItemID] ASC)
);

GO
PRINT N'Creating [dbo].[KitItem].[UIX_KitItem_KitItemGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_KitItem_KitItemGUID]
    ON [dbo].[KitItem]([KitItemGUID] ASC);

GO
PRINT N'Creating [dbo].[KitItem].[IX_KitItem_KitGroupID]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitItem_KitGroupID]
    ON [dbo].[KitItem]([KitGroupID] ASC);

GO
PRINT N'Creating [dbo].[KitItem].[IX_KitItem_KitGroupID_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitItem_KitGroupID_DisplayOrder]
    ON [dbo].[KitItem]([KitGroupID] ASC, [DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[KitItem].[IX_KitItem_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitItem_DisplayOrder]
    ON [dbo].[KitItem]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[KitItem].[IX_KitItem_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitItem_DisplayOrder_Name]
    ON [dbo].[KitItem]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[KitItem].[IX_KitItem_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_KitItem_Name]
    ON [dbo].[KitItem]([Name] ASC);

GO
PRINT N'Creating [dbo].[Library]...';

GO
CREATE TABLE [dbo].[Library] (
    [LibraryID]             INT              IDENTITY (1, 1) NOT NULL,
    [LibraryGUID]           UNIQUEIDENTIFIER NOT NULL,
    [Name]                  NVARCHAR (400)   NOT NULL,
    [Summary]               NVARCHAR (MAX)   NULL,
    [Description]           NVARCHAR (MAX)   NULL,
    [SEName]                NVARCHAR (100)   NULL,
    [SETitle]               NVARCHAR (MAX)   NULL,
    [SEAltText]             NVARCHAR (MAX)   NULL,
    [SEKeywords]            NVARCHAR (MAX)   NULL,
    [SEDescription]         NVARCHAR (MAX)   NULL,
    [DisplayPrefix]         NVARCHAR (MAX)   NULL,
    [XmlPackage]            NVARCHAR (100)   NULL,
    [ParentLibraryID]       INT              NOT NULL,
    [ColWidth]              INT              NOT NULL,
    [SortByLooks]           TINYINT          NOT NULL,
    [DisplayOrder]          INT              NOT NULL,
    [RelatedCategories]     NVARCHAR (MAX)   NULL,
    [RelatedSections]       NVARCHAR (MAX)   NULL,
    [QuantityDiscountID]    INT              NULL,
    [RelatedManufacturers]  NVARCHAR (MAX)   NULL,
    [RelatedProducts]       NVARCHAR (MAX)   NULL,
    [Published]             TINYINT          NOT NULL,
    [Wholesale]             TINYINT          NOT NULL,
    [ExtensionData]         NVARCHAR (MAX)   NULL,
    [ImageFilenameOverride] NVARCHAR (MAX)   NULL,
    [IsImport]              TINYINT          NOT NULL,
    [Deleted]               TINYINT          NOT NULL,
    [CreatedOn]             DATETIME         NOT NULL,
    [PageSize]              INT              NOT NULL,
    [SkinID]                INT              NOT NULL,
    [TemplateName]          NVARCHAR (50)    NOT NULL,
    [UpdatedOn]             DATETIME         NOT NULL,
    CONSTRAINT [PK_Library] PRIMARY KEY CLUSTERED ([LibraryID] ASC)
);

GO
PRINT N'Creating [dbo].[Library].[IX_Library_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Library_Deleted]
    ON [dbo].[Library]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[Library].[IX_Library_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_Library_Published]
    ON [dbo].[Library]([Published] ASC);

GO
PRINT N'Creating [dbo].[Library].[IX_Library_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_Library_Wholesale]
    ON [dbo].[Library]([Wholesale] ASC);

GO
PRINT N'Creating [dbo].[Library].[IX_Library_LibraryGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Library_LibraryGUID]
    ON [dbo].[Library]([LibraryGUID] ASC);

GO
PRINT N'Creating [dbo].[Library].[IX_Library_ParentLibraryID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Library_ParentLibraryID]
    ON [dbo].[Library]([ParentLibraryID] ASC);

GO
PRINT N'Creating [dbo].[Library].[IX_Library_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_Library_DisplayOrder]
    ON [dbo].[Library]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[Library].[IX_Library_Deleted_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_Library_Deleted_Published]
    ON [dbo].[Library]([Deleted] ASC, [Published] ASC);

GO
PRINT N'Creating [dbo].[Library].[IX_Library_Deleted_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_Library_Deleted_Wholesale]
    ON [dbo].[Library]([Deleted] ASC, [Wholesale] ASC);

GO
PRINT N'Creating [dbo].[Library].[IX_Library_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Library_Name]
    ON [dbo].[Library]([Name] ASC);

GO
PRINT N'Creating [dbo].[Library].[IX_Library_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Library_DisplayOrder_Name]
    ON [dbo].[Library]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[LocaleSetting]...';

GO
CREATE TABLE [dbo].[LocaleSetting] (
    [LocaleSettingID]   INT              IDENTITY (1, 1) NOT NULL,
    [LocaleSettingGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]              NVARCHAR (10)    NOT NULL,
    [Description]       NVARCHAR (255)   NOT NULL,
    [DisplayOrder]      INT              NOT NULL,
    [CreatedOn]         DATETIME         NOT NULL,
    [DefaultCurrencyID] INT              NOT NULL,
    [UpdatedOn]         DATETIME         NOT NULL,
    CONSTRAINT [PK_Locale] PRIMARY KEY CLUSTERED ([LocaleSettingID] ASC)
);

GO
PRINT N'Creating [dbo].[LocaleSetting].[UIX_Locale_LocaleSettingGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Locale_LocaleSettingGUID]
    ON [dbo].[LocaleSetting]([LocaleSettingGUID] ASC);

GO
PRINT N'Creating [dbo].[LocaleSetting].[UIX_Locale_Name]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Locale_Name]
    ON [dbo].[LocaleSetting]([Name] ASC);

GO
PRINT N'Creating [dbo].[LocaleSetting].[IX_Locale_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Locale_DisplayOrder_Name]
    ON [dbo].[LocaleSetting]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[LocaleSetting].[IX_Locale_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_Locale_DisplayOrder]
    ON [dbo].[LocaleSetting]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[LocalizedObjectName]...';

GO
CREATE TABLE [dbo].[LocalizedObjectName] (
    [Id]            INT            IDENTITY (1, 1) NOT NULL,
    [LocaleId]      INT            NULL,
    [ObjectId]      INT            NOT NULL,
    [ObjectType]    NVARCHAR (50)  NULL,
    [LocalizedName] NVARCHAR (400) NULL
);

GO
PRINT N'Creating [dbo].[LocalizedObjectName].[IX_LocalizedObjectName_Cluster]...';

GO
CREATE UNIQUE CLUSTERED INDEX [IX_LocalizedObjectName_Cluster]
    ON [dbo].[LocalizedObjectName]([ObjectType] ASC, [ObjectId] ASC, [LocaleId] ASC);

GO
PRINT N'Creating [dbo].[LocalizedObjectName].[IX_LocalizedObjectName_LocaleId_ObjectType]...';

GO
CREATE NONCLUSTERED INDEX [IX_LocalizedObjectName_LocaleId_ObjectType]
    ON [dbo].[LocalizedObjectName]([LocaleId] ASC, [ObjectType] ASC)
    INCLUDE([ObjectId], [LocalizedName]);

GO
PRINT N'Creating [dbo].[Manufacturer]...';

GO
CREATE TABLE [dbo].[Manufacturer] (
    [ManufacturerID]        INT              IDENTITY (1, 1) NOT NULL,
    [ManufacturerGUID]      UNIQUEIDENTIFIER NOT NULL,
    [Name]                  NVARCHAR (400)   NOT NULL,
    [SEName]                NVARCHAR (100)   NULL,
    [SEKeywords]            NVARCHAR (MAX)   NULL,
    [SEDescription]         NVARCHAR (MAX)   NULL,
    [SETitle]               NVARCHAR (MAX)   NULL,
    [SEAltText]             NVARCHAR (MAX)   NULL,
    [Address1]              NVARCHAR (100)   NULL,
    [Address2]              NVARCHAR (100)   NULL,
    [Suite]                 NVARCHAR (25)    NULL,
    [City]                  NVARCHAR (100)   NULL,
    [State]                 NVARCHAR (100)   NULL,
    [ZipCode]               NVARCHAR (10)    NULL,
    [Country]               NVARCHAR (100)   NULL,
    [Phone]                 NVARCHAR (25)    NULL,
    [FAX]                   NVARCHAR (25)    NULL,
    [URL]                   NVARCHAR (255)   NULL,
    [Email]                 NVARCHAR (100)   NULL,
    [QuantityDiscountID]    INT              NULL,
    [SortByLooks]           TINYINT          NOT NULL,
    [Summary]               NVARCHAR (MAX)   NULL,
    [Description]           NVARCHAR (MAX)   NULL,
    [Notes]                 NVARCHAR (MAX)   NULL,
    [RelatedDocuments]      NVARCHAR (MAX)   NULL,
    [XmlPackage]            NVARCHAR (100)   NULL,
    [ColWidth]              INT              NOT NULL,
    [DisplayOrder]          INT              NOT NULL,
    [ExtensionData]         NVARCHAR (MAX)   NULL,
    [ImageFilenameOverride] NVARCHAR (MAX)   NULL,
    [Published]             TINYINT          NOT NULL,
    [Wholesale]             TINYINT          NOT NULL,
    [ParentManufacturerID]  INT              NOT NULL,
    [IsImport]              TINYINT          NOT NULL,
    [Deleted]               TINYINT          NOT NULL,
    [CreatedOn]             DATETIME         NOT NULL,
    [PageSize]              INT              NOT NULL,
    [SkinID]                INT              NOT NULL,
    [TemplateName]          NVARCHAR (50)    NOT NULL,
    [UpdatedOn]             DATETIME         NOT NULL,
    CONSTRAINT [PK_Manufacturer] PRIMARY KEY CLUSTERED ([ManufacturerID] ASC)
);

GO
PRINT N'Creating [dbo].[Manufacturer].[UIX_Manufacturer_ManufacturerGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Manufacturer_ManufacturerGUID]
    ON [dbo].[Manufacturer]([ManufacturerGUID] ASC);

GO
PRINT N'Creating [dbo].[Manufacturer].[IX_Manufacturer_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Manufacturer_Deleted]
    ON [dbo].[Manufacturer]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[Manufacturer].[IX_Manufacturer_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_Manufacturer_DisplayOrder]
    ON [dbo].[Manufacturer]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[Manufacturer].[IX_Manufacturer_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Manufacturer_Name]
    ON [dbo].[Manufacturer]([Name] ASC);

GO
PRINT N'Creating [dbo].[Manufacturer].[IX_Manufacturer_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Manufacturer_DisplayOrder_Name]
    ON [dbo].[Manufacturer]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[MultiShipOrder_Shipment]...';

GO
CREATE TABLE [dbo].[MultiShipOrder_Shipment] (
    [MultiShipOrder_ShipmentId]   INT              IDENTITY (1, 1) NOT NULL,
    [MultiShipOrder_ShipmentGUID] UNIQUEIDENTIFIER NOT NULL,
    [OrderNumber]                 INT              NOT NULL,
    [DestinationAddress]          XML              NOT NULL,
    [ShippingAmount]              MONEY            NOT NULL,
    [ShippingMethodId]            INT              NOT NULL,
    [ShippingAddressId]           INT              NOT NULL,
    [BillingAddressId]            INT              NOT NULL,
    [UpdatedOn]                   DATETIME         NOT NULL,
    [CreatedOn]                   DATETIME         NOT NULL
);

GO
PRINT N'Creating [dbo].[News]...';

GO
CREATE TABLE [dbo].[News] (
    [NewsID]        INT              IDENTITY (1, 1) NOT NULL,
    [NewsGUID]      UNIQUEIDENTIFIER NOT NULL,
    [Headline]      VARCHAR (MAX)    NULL,
    [NewsCopy]      NVARCHAR (MAX)   NULL,
    [ExpiresOn]     DATETIME         NOT NULL,
    [Published]     TINYINT          NOT NULL,
    [Wholesale]     TINYINT          NOT NULL,
    [ExtensionData] NVARCHAR (MAX)   NULL,
    [Deleted]       TINYINT          NOT NULL,
    [CreatedOn]     DATETIME         NOT NULL,
    [UpdatedOn]     DATETIME         NOT NULL,
    CONSTRAINT [PK_News] PRIMARY KEY CLUSTERED ([NewsID] ASC)
);

GO
PRINT N'Creating [dbo].[News].[UIX_News_NewsGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_News_NewsGUID]
    ON [dbo].[News]([NewsGUID] ASC);

GO
PRINT N'Creating [dbo].[News].[IX_News_ExpiresOn]...';

GO
CREATE NONCLUSTERED INDEX [IX_News_ExpiresOn]
    ON [dbo].[News]([ExpiresOn] DESC);

GO
PRINT N'Creating [dbo].[News].[IX_News_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_News_Deleted]
    ON [dbo].[News]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[News].[IX_News_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_News_Published]
    ON [dbo].[News]([Published] ASC);

GO
PRINT N'Creating [dbo].[News].[IX_News_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_News_Wholesale]
    ON [dbo].[News]([Wholesale] ASC);

GO
PRINT N'Creating [dbo].[NewsStore]...';

GO
CREATE TABLE [dbo].[NewsStore] (
    [ID]        INT      IDENTITY (1, 1) NOT NULL,
    [NewsID]    INT      NOT NULL,
    [StoreID]   INT      NOT NULL,
    [CreatedOn] DATETIME NOT NULL,
    [UpdatedOn] DATETIME NOT NULL,
    CONSTRAINT [PK_NewsStore] PRIMARY KEY CLUSTERED ([NewsID] ASC, [StoreID] ASC)
);

GO
PRINT N'Creating [dbo].[OrderNumbers]...';

GO
CREATE TABLE [dbo].[OrderNumbers] (
    [OrderNumber]     INT              IDENTITY (100000, 1) NOT NULL,
    [OrderNumberGUID] UNIQUEIDENTIFIER NOT NULL,
    [CreatedOn]       DATETIME         NOT NULL,
    [UpdatedOn]       DATETIME         NOT NULL,
    CONSTRAINT [PK_OrderNumbers] PRIMARY KEY CLUSTERED ([OrderNumber] ASC)
);

GO
PRINT N'Creating [dbo].[OrderNumbers].[UIX_OrderNumbers_OrderNumberGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_OrderNumbers_OrderNumberGUID]
    ON [dbo].[OrderNumbers]([OrderNumberGUID] ASC);

GO
PRINT N'Creating [dbo].[OrderNumbers].[IX_OrderNumbers_CreatedOn]...';

GO
CREATE NONCLUSTERED INDEX [IX_OrderNumbers_CreatedOn]
    ON [dbo].[OrderNumbers]([CreatedOn] ASC);

GO
PRINT N'Creating [dbo].[OrderOption]...';

GO
CREATE TABLE [dbo].[OrderOption] (
    [OrderOptionID]   INT              IDENTITY (1, 1) NOT NULL,
    [OrderOptionGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]            NVARCHAR (400)   NOT NULL,
    [Description]     NVARCHAR (MAX)   NULL,
    [Cost]            MONEY            NOT NULL,
    [DisplayOrder]    INT              NOT NULL,
    [TaxClassID]      INT              NOT NULL,
    [ExtensionData]   NVARCHAR (MAX)   NULL,
    [CreatedOn]       DATETIME         NOT NULL,
    [UpdatedOn]       DATETIME         NOT NULL,
    CONSTRAINT [PK_OrderOption] PRIMARY KEY CLUSTERED ([OrderOptionID] ASC)
);

GO
PRINT N'Creating [dbo].[OrderOptionStore]...';

GO
CREATE TABLE [dbo].[OrderOptionStore] (
    [ID]            INT      IDENTITY (1, 1) NOT NULL,
    [OrderOptionID] INT      NOT NULL,
    [StoreID]       INT      NOT NULL,
    [CreatedOn]     DATETIME NOT NULL,
    [UpdatedOn]     DATETIME NOT NULL,
    CONSTRAINT [PK_OrderOptionStore] PRIMARY KEY CLUSTERED ([OrderOptionID] ASC, [StoreID] ASC)
);

GO
PRINT N'Creating [dbo].[Orders]...';

GO
CREATE TABLE [dbo].[Orders] (
    [OrderNumber]                         INT              NOT NULL,
    [OrderGUID]                           UNIQUEIDENTIFIER NOT NULL,
    [StoreID]                             INT              NOT NULL,
    [ParentOrderNumber]                   INT              NULL,
    [StoreVersion]                        NVARCHAR (100)   NULL,
    [QuoteCheckout]                       TINYINT          NOT NULL,
    [IsNew]                               TINYINT          NOT NULL,
    [ShippedOn]                           DATETIME         NULL,
    [CustomerID]                          INT              NOT NULL,
    [CustomerGUID]                        UNIQUEIDENTIFIER NOT NULL,
    [Referrer]                            NVARCHAR (MAX)   NULL,
    [SkinID]                              INT              NOT NULL,
    [LastName]                            NVARCHAR (100)   NULL,
    [FirstName]                           NVARCHAR (100)   NULL,
    [Email]                               NVARCHAR (100)   NULL,
    [Notes]                               NVARCHAR (MAX)   NULL,
    [BillingEqualsShipping]               TINYINT          NOT NULL,
    [BillingLastName]                     NVARCHAR (100)   NULL,
    [BillingFirstName]                    NVARCHAR (100)   NULL,
    [BillingCompany]                      NVARCHAR (100)   NULL,
    [BillingAddress1]                     NVARCHAR (100)   NULL,
    [BillingAddress2]                     NVARCHAR (100)   NULL,
    [BillingSuite]                        NVARCHAR (50)    NULL,
    [BillingCity]                         NVARCHAR (100)   NULL,
    [BillingState]                        NVARCHAR (100)   NULL,
    [BillingZip]                          NVARCHAR (10)    NULL,
    [BillingCountry]                      NVARCHAR (100)   NULL,
    [BillingPhone]                        NVARCHAR (25)    NULL,
    [ShippingLastName]                    NVARCHAR (100)   NULL,
    [ShippingFirstName]                   NVARCHAR (100)   NULL,
    [ShippingCompany]                     NVARCHAR (100)   NULL,
    [ShippingResidenceType]               INT              NOT NULL,
    [ShippingAddress1]                    NVARCHAR (100)   NULL,
    [ShippingAddress2]                    NVARCHAR (100)   NULL,
    [ShippingSuite]                       NVARCHAR (50)    NULL,
    [ShippingCity]                        NVARCHAR (100)   NULL,
    [ShippingState]                       NVARCHAR (100)   NULL,
    [ShippingZip]                         NVARCHAR (10)    NULL,
    [ShippingCountry]                     NVARCHAR (100)   NULL,
    [ShippingMethodID]                    INT              NOT NULL,
    [ShippingMethod]                      NVARCHAR (MAX)   NULL,
    [ShippingPhone]                       NVARCHAR (25)    NULL,
    [ShippingCalculationID]               INT              NULL,
    [Phone]                               NVARCHAR (25)    NULL,
    [RegisterDate]                        DATETIME         NULL,
    [AffiliateID]                         INT              NULL,
    [CouponCode]                          NVARCHAR (50)    NULL,
    [CouponType]                          INT              NOT NULL,
    [CouponDescription]                   NVARCHAR (MAX)   NULL,
    [CouponDiscountAmount]                MONEY            NULL,
    [CouponDiscountPercent]               MONEY            NULL,
    [CouponIncludesFreeShipping]          TINYINT          NULL,
    [OkToEmail]                           TINYINT          NULL,
    [Deleted]                             TINYINT          NOT NULL,
    [CardType]                            NVARCHAR (20)    NULL,
    [CardName]                            NVARCHAR (100)   NULL,
    [CardNumber]                          NVARCHAR (300)   NULL,
    [CardExpirationMonth]                 NVARCHAR (10)    NULL,
    [CardExpirationYear]                  NVARCHAR (10)    NULL,
    [CardStartDate]                       NVARCHAR (MAX)   NULL,
    [CardIssueNumber]                     NVARCHAR (MAX)   NULL,
    [OrderSubtotal]                       MONEY            NOT NULL,
    [OrderTax]                            MONEY            NOT NULL,
    [OrderShippingCosts]                  MONEY            NOT NULL,
    [OrderTotal]                          MONEY            NOT NULL,
    [PaymentGateway]                      NVARCHAR (50)    NULL,
    [AuthorizationCode]                   NVARCHAR (100)   NULL,
    [AuthorizationResult]                 NVARCHAR (MAX)   NULL,
    [AuthorizationPNREF]                  NVARCHAR (MAX)   NULL,
    [TransactionCommand]                  NVARCHAR (MAX)   NULL,
    [OrderDate]                           DATETIME         NOT NULL,
    [LevelID]                             INT              NULL,
    [LevelName]                           NVARCHAR (100)   NULL,
    [LevelDiscountPercent]                MONEY            NULL,
    [LevelDiscountAmount]                 MONEY            NULL,
    [LevelHasFreeShipping]                TINYINT          NULL,
    [LevelAllowsQuantityDiscounts]        TINYINT          NULL,
    [LevelHasNoTax]                       TINYINT          NULL,
    [LevelAllowsCoupons]                  TINYINT          NULL,
    [LevelDiscountsApplyToExtendedPrices] TINYINT          NULL,
    [LastIPAddress]                       VARCHAR (40)     NULL,
    [PaymentMethod]                       NVARCHAR (100)   NULL,
    [OrderNotes]                          NVARCHAR (MAX)   NULL,
    [PONumber]                            NVARCHAR (50)    NULL,
    [DownloadEmailSentOn]                 DATETIME         NULL,
    [ReceiptEmailSentOn]                  DATETIME         NULL,
    [DistributorEmailSentOn]              DATETIME         NULL,
    [ShippingTrackingNumber]              NVARCHAR (100)   NULL,
    [ShippedVIA]                          NVARCHAR (100)   NULL,
    [CustomerServiceNotes]                NVARCHAR (MAX)   NULL,
    [RTShipRequest]                       NVARCHAR (MAX)   NULL,
    [RTShipResponse]                      NVARCHAR (MAX)   NULL,
    [TransactionState]                    NVARCHAR (20)    NULL,
    [AVSResult]                           NVARCHAR (50)    NULL,
    [CaptureTXCommand]                    NVARCHAR (MAX)   NULL,
    [CaptureTXResult]                     NVARCHAR (MAX)   NULL,
    [VoidTXCommand]                       NVARCHAR (MAX)   NULL,
    [VoidTXResult]                        NVARCHAR (MAX)   NULL,
    [RefundTXCommand]                     NVARCHAR (MAX)   NULL,
    [RefundTXResult]                      NVARCHAR (MAX)   NULL,
    [RefundReason]                        NVARCHAR (MAX)   NULL,
    [CardinalLookupResult]                NVARCHAR (MAX)   NULL,
    [CardinalAuthenticateResult]          NVARCHAR (MAX)   NULL,
    [CardinalGatewayParms]                NVARCHAR (MAX)   NULL,
    [AffiliateCommissionRecorded]         TINYINT          NOT NULL,
    [OrderOptions]                        NVARCHAR (MAX)   NULL,
    [OrderWeight]                         MONEY            NOT NULL,
    [CarrierReportedRate]                 NVARCHAR (MAX)   NULL,
    [CarrierReportedWeight]               NVARCHAR (MAX)   NULL,
    [LocaleSetting]                       NVARCHAR (10)    NULL,
    [FinalizationData]                    NVARCHAR (MAX)   NULL,
    [ExtensionData]                       NVARCHAR (MAX)   NULL,
    [AlreadyConfirmed]                    TINYINT          NOT NULL,
    [CartType]                            INT              NOT NULL,
    [Last4]                               NVARCHAR (4)     NULL,
    [ReadyToShip]                         TINYINT          NOT NULL,
    [IsPrinted]                           TINYINT          NOT NULL,
    [AuthorizedOn]                        DATETIME         NULL,
    [CapturedOn]                          DATETIME         NULL,
    [RefundedOn]                          DATETIME         NULL,
    [VoidedOn]                            DATETIME         NULL,
    [FraudedOn]                           DATETIME         NULL,
    [EditedOn]                            DATETIME         NULL,
    [TrackingURL]                         NVARCHAR (MAX)   NULL,
    [ShippedEMailSentOn]                  DATETIME         NULL,
    [InventoryWasReduced]                 INT              NOT NULL,
    [MaxMindFraudScore]                   DECIMAL (5, 2)   NULL,
    [MaxMindDetails]                      NVARCHAR (MAX)   NULL,
    [VATRegistrationID]                   NVARCHAR (MAX)   NULL,
    [Crypt]                               INT              NOT NULL,
    [TransactionType]                     INT              NOT NULL,
    [RecurringSubscriptionID]             NVARCHAR (100)   NOT NULL,
    [RecurringSubscriptionCommand]        NVARCHAR (MAX)   NOT NULL,
    [RecurringSubscriptionResult]         NVARCHAR (MAX)   NOT NULL,
    [RelatedOrderNumber]                  INT              NOT NULL,
    [BuySafeCommand]                      NVARCHAR (MAX)   NOT NULL,
    [BuySafeResult]                       NVARCHAR (MAX)   NOT NULL,
    [ReceiptHtml]                         NVARCHAR (MAX)   NULL,
    [UpdatedOn]                           DATETIME         NOT NULL,
    [CreatedOn]                           DATETIME         NOT NULL,
    CONSTRAINT [PK_Orders] PRIMARY KEY CLUSTERED ([OrderNumber] ASC)
);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_OrderNumber]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_OrderNumber]
    ON [dbo].[Orders]([OrderNumber] ASC);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_ParentOrderNumber]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_ParentOrderNumber]
    ON [dbo].[Orders]([ParentOrderNumber] ASC);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_CustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_CustomerID]
    ON [dbo].[Orders]([CustomerID] ASC);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_OrderNumber_CustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_OrderNumber_CustomerID]
    ON [dbo].[Orders]([OrderNumber] ASC, [CustomerID] ASC);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_AffiliateID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_AffiliateID]
    ON [dbo].[Orders]([AffiliateID] ASC);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_OrderDate]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_OrderDate]
    ON [dbo].[Orders]([OrderDate] ASC);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_OrderGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_OrderGUID]
    ON [dbo].[Orders]([OrderGUID] ASC);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_EMail]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_EMail]
    ON [dbo].[Orders]([Email] ASC);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_IsNew]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_IsNew]
    ON [dbo].[Orders]([IsNew] ASC);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_CouponCode]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_CouponCode]
    ON [dbo].[Orders]([CouponCode] ASC);

GO
PRINT N'Creating [dbo].[Orders].[IX_Orders_TransactionState]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_TransactionState]
    ON [dbo].[Orders]([TransactionState] ASC);

GO
PRINT N'Creating [dbo].[Orders_KitCart]...';

GO
CREATE TABLE [dbo].[Orders_KitCart] (
    [OrderNumber]                   INT            NOT NULL,
    [KitCartRecID]                  INT            NOT NULL,
    [CustomerID]                    INT            NOT NULL,
    [ShoppingCartRecID]             INT            NOT NULL,
    [ProductID]                     INT            NULL,
    [VariantID]                     INT            NULL,
    [ProductName]                   NVARCHAR (255) NULL,
    [ProductVariantName]            NVARCHAR (255) NULL,
    [KitGroupID]                    INT            NULL,
    [KitGroupName]                  NVARCHAR (400) NULL,
    [KitGroupIsRequired]            TINYINT        NULL,
    [KitItemID]                     INT            NULL,
    [KitItemName]                   NVARCHAR (400) NULL,
    [KitItemPriceDelta]             MONEY          NULL,
    [Quantity]                      INT            NULL,
    [KitItemWeightDelta]            MONEY          NOT NULL,
    [TextOption]                    NVARCHAR (MAX) NULL,
    [ExtensionData]                 NVARCHAR (MAX) NULL,
    [KitGroupTypeID]                INT            NOT NULL,
    [InventoryVariantID]            INT            NULL,
    [InventoryVariantColor]         NVARCHAR (100) NULL,
    [InventoryVariantSize]          NVARCHAR (100) NULL,
    [CreatedOn]                     DATETIME       NOT NULL,
    [CartType]                      INT            NOT NULL,
    [KitGroupIsReadOnly]            TINYINT        NOT NULL,
    [KitItemInventoryQuantityDelta] INT            NOT NULL,
    [UpdatedOn]                     DATETIME       NOT NULL
);

GO
PRINT N'Creating [dbo].[Orders_KitCart].[IX_Orders_KitCart_OrderNumber]...';

GO
CREATE CLUSTERED INDEX [IX_Orders_KitCart_OrderNumber]
    ON [dbo].[Orders_KitCart]([OrderNumber] ASC);

GO
PRINT N'Creating [dbo].[Orders_KitCart].[IX_Orders_KitCart_ProductID_VariantID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_KitCart_ProductID_VariantID]
    ON [dbo].[Orders_KitCart]([ProductID] ASC, [VariantID] ASC);

GO
PRINT N'Creating [dbo].[Orders_KitCart].[IX_Orders_KitCart_CreatedOn]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_KitCart_CreatedOn]
    ON [dbo].[Orders_KitCart]([CreatedOn] ASC);

GO
PRINT N'Creating [dbo].[Orders_KitCart].[IX_Orders_KitCart_KitCartRecID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_KitCart_KitCartRecID]
    ON [dbo].[Orders_KitCart]([KitCartRecID] ASC);

GO
PRINT N'Creating [dbo].[Orders_KitCart].[IX_Orders_KitCart_CustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_KitCart_CustomerID]
    ON [dbo].[Orders_KitCart]([CustomerID] ASC);

GO
PRINT N'Creating [dbo].[Orders_KitCart].[IX_Orders_KitCart_ShoppingCartRecID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_KitCart_ShoppingCartRecID]
    ON [dbo].[Orders_KitCart]([ShoppingCartRecID] ASC);

GO
PRINT N'Creating [dbo].[Orders_KitCart].[IX_Orders_KitCart_KitGroupID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_KitCart_KitGroupID]
    ON [dbo].[Orders_KitCart]([KitGroupID] ASC);

GO
PRINT N'Creating [dbo].[Orders_ShoppingCart]...';

GO
CREATE TABLE [dbo].[Orders_ShoppingCart] (
    [OrderNumber]                           INT            NOT NULL,
    [ShoppingCartRecID]                     INT            NOT NULL,
    [CustomerID]                            INT            NOT NULL,
    [ProductID]                             INT            NOT NULL,
    [VariantID]                             INT            NOT NULL,
    [Quantity]                              INT            NOT NULL,
    [ChosenColor]                           NVARCHAR (100) NULL,
    [ChosenColorSKUModifier]                NVARCHAR (50)  NULL,
    [ChosenSize]                            NVARCHAR (100) NULL,
    [ChosenSizeSKUModifier]                 NVARCHAR (50)  NULL,
    [OrderedProductName]                    NVARCHAR (MAX) NULL,
    [OrderedProductVariantName]             NVARCHAR (MAX) NULL,
    [OrderedProductSKU]                     NVARCHAR (100) NULL,
    [OrderedProductManufacturerPartNumber]  NVARCHAR (100)  NULL,
    [OrderedProductWeight]                  MONEY          NULL,
    [OrderedProductPrice]                   MONEY          NULL,
    [OrderedProductRegularPrice]            MONEY          NULL,
    [OrderedProductSalePrice]               MONEY          NULL,
    [OrderedProductExtendedPrice]           MONEY          NULL,
    [OrderedProductQuantityDiscountName]    NVARCHAR (MAX) NULL,
    [OrderedProductQuantityDiscountID]      INT            NULL,
    [OrderedProductQuantityDiscountPercent] MONEY          NULL,
    [IsTaxable]                             TINYINT        NOT NULL,
    [IsShipSeparately]                      TINYINT        NOT NULL,
    [IsDownload]                            TINYINT        NOT NULL,
    [DownloadLocation]                      NVARCHAR (MAX) NULL,
    [FreeShipping]                          TINYINT        NOT NULL,
    [IsSecureAttachment]                    TINYINT        NOT NULL,
    [TextOption]                            NVARCHAR (MAX) NULL,
    [CartType]                              INT            NOT NULL,
    [ShippingAddressID]                     INT            NOT NULL,
    [ShippingDetail]                        NVARCHAR (MAX) NULL,
    [ShippingMethodID]                      INT            NULL,
    [ShippingMethod]                        NVARCHAR (MAX) NULL,
    [DistributorID]                         INT            NULL,
    [Notes]                                 NVARCHAR (MAX) NULL,
    [DistributorEmailSentOn]                DATETIME       NULL,
    [ExtensionData]                         NVARCHAR (MAX) NULL,
    [SizeOptionPrompt]                      NVARCHAR (MAX) NULL,
    [ColorOptionPrompt]                     NVARCHAR (MAX) NULL,
    [TextOptionPrompt]                      NVARCHAR (MAX) NULL,
    [CreatedOn]                             DATETIME       NOT NULL,
    [CustomerEntersPrice]                   TINYINT        NOT NULL,
    [CustomerEntersPricePrompt]             NVARCHAR (MAX) NULL,
    [IsAKit]                                TINYINT        NULL,
    [IsSystem]                              TINYINT        NULL,
    [TaxClassID]                            INT            NOT NULL,
    [TaxRate]                               MONEY          NOT NULL,
    [IsGift]                                BIT            NOT NULL,
    [DownloadStatus]                        INT            NULL,
    [DownloadValidDays]                     INT            NULL,
    [DownloadCategory]                      NVARCHAR (MAX) NULL,
    [DownloadReleasedOn]                    DATETIME       NULL,
    [GTIN]                                  NVARCHAR (14)  NULL,
    [UpdatedOn]                             DATETIME       NOT NULL
);

GO
PRINT N'Creating [dbo].[Orders_ShoppingCart].[IX_Orders_ShoppingCart_OrderNumber_CustomerID]...';

GO
CREATE CLUSTERED INDEX [IX_Orders_ShoppingCart_OrderNumber_CustomerID]
    ON [dbo].[Orders_ShoppingCart]([OrderNumber] ASC, [CustomerID] ASC);

GO
PRINT N'Creating [dbo].[Orders_ShoppingCart].[IX_Orders_ShoppingCart_OrderedProductSKU]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_ShoppingCart_OrderedProductSKU]
    ON [dbo].[Orders_ShoppingCart]([OrderedProductSKU] ASC);

GO
PRINT N'Creating [dbo].[Orders_ShoppingCart].[IX_Orders_ShoppingCart_CustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_ShoppingCart_CustomerID]
    ON [dbo].[Orders_ShoppingCart]([CustomerID] ASC);

GO
PRINT N'Creating [dbo].[Orders_ShoppingCart].[IX_Orders_ShoppingCart_ShoppingCartRecID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_ShoppingCart_ShoppingCartRecID]
    ON [dbo].[Orders_ShoppingCart]([ShoppingCartRecID] ASC);

GO
PRINT N'Creating [dbo].[Orders_ShoppingCart].[IX_Orders_ShoppingCart_ProductID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_ShoppingCart_ProductID]
    ON [dbo].[Orders_ShoppingCart]([ProductID] ASC);

GO
PRINT N'Creating [dbo].[Orders_ShoppingCart].[IX_Orders_ShoppingCart_ProductID_VariantID_ChosenColor_ChosenSize]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_ShoppingCart_ProductID_VariantID_ChosenColor_ChosenSize]
    ON [dbo].[Orders_ShoppingCart]([ProductID] ASC, [VariantID] ASC, [ChosenColor] ASC, [ChosenSize] ASC);

GO
PRINT N'Creating [dbo].[Orders_ShoppingCart].[IX_Orders_ShoppingCart_CreatedOn]...';

GO
CREATE NONCLUSTERED INDEX [IX_Orders_ShoppingCart_CreatedOn]
    ON [dbo].[Orders_ShoppingCart]([CreatedOn] ASC);

GO
PRINT N'Creating [dbo].[OrderShipment]...';

GO
CREATE TABLE [dbo].[OrderShipment] (
    [OrderShipmentID] INT      IDENTITY (1, 1) NOT NULL,
    [OrderNumber]     INT      NOT NULL,
    [AddressID]       INT      NOT NULL,
    [ShippingTotal]   MONEY    NOT NULL,
    [UpdatedOn]       DATETIME NOT NULL,
    [CreatedOn]       DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([OrderShipmentID] ASC)
);

GO
PRINT N'Creating [dbo].[OrderTransaction]...';

GO
CREATE TABLE [dbo].[OrderTransaction] (
    [OrderTransactionID] INT            IDENTITY (1, 1) NOT NULL,
    [OrderNumber]        INT            NOT NULL,
    [TransactionType]    NVARCHAR (100) NOT NULL,
    [TransactionCommand] NVARCHAR (MAX) NULL,
    [TransactionResult]  NVARCHAR (MAX) NULL,
    [PNREF]              NVARCHAR (400) NULL,
    [Code]               NVARCHAR (400) NULL,
    [PaymentMethod]      NVARCHAR (100) NULL,
    [PaymentGateway]     NVARCHAR (100) NULL,
    [Amount]             MONEY          NULL,
    [UpdatedOn]          DATETIME       NOT NULL,
    [CreatedOn]          DATETIME       NOT NULL,
    CONSTRAINT [PK_OrderTransaction] PRIMARY KEY CLUSTERED ([OrderTransactionID] ASC)
);

GO
PRINT N'Creating [dbo].[PasswordLog]...';

GO
CREATE TABLE [dbo].[PasswordLog] (
    [CustomerID] INT            NOT NULL,
    [ChangeDt]   DATETIME       NOT NULL,
    [OldPwd]     NVARCHAR (250) NOT NULL,
    [SaltKey]    INT            NOT NULL,
    [UpdatedOn]  DATETIME       NOT NULL,
    [CreatedOn]  DATETIME       NOT NULL
);

GO
PRINT N'Creating [dbo].[PasswordLog].[CIX_PasswordLog]...';

GO
CREATE CLUSTERED INDEX [CIX_PasswordLog]
    ON [dbo].[PasswordLog]([CustomerID] ASC, [ChangeDt] ASC);

GO
PRINT N'Creating [dbo].[Product]...';

GO
CREATE TABLE [dbo].[Product] (
    [ProductID]                       INT              IDENTITY (1, 1) NOT NULL,
    [ProductGUID]                     UNIQUEIDENTIFIER NOT NULL,
    [Name]                            NVARCHAR (400)   NOT NULL,
    [Summary]                         NVARCHAR (MAX)   NULL,
    [Description]                     NVARCHAR (MAX)   NULL,
    [SEKeywords]                      NVARCHAR (MAX)   NULL,
    [SEDescription]                   NVARCHAR (MAX)   NULL,
    [MiscText]                        NVARCHAR (MAX)   NULL,
    [SwatchImageMap]                  NVARCHAR (MAX)   NULL,
    [FroogleDescription]              NVARCHAR (MAX)   NULL,
    [SETitle]                         NVARCHAR (MAX)   NULL,
    [SEAltText]                       NVARCHAR (MAX)   NULL,
    [SizeOptionPrompt]                NVARCHAR (MAX)   NULL,
    [ColorOptionPrompt]               NVARCHAR (MAX)   NULL,
    [TextOptionPrompt]                NVARCHAR (MAX)   NULL,
    [ProductTypeID]                   INT              NOT NULL,
    [TaxClassID]                      INT              NOT NULL,
    [SKU]                             NVARCHAR (50)    NULL,
    [ManufacturerPartNumber]          NVARCHAR (50)    NULL,
    [SalesPromptID]                   INT              NOT NULL,
    [IsFeatured]                      TINYINT          NOT NULL,
    [XmlPackage]                      NVARCHAR (100)   NULL,
    [ColWidth]                        INT              NOT NULL,
    [Published]                       TINYINT          NOT NULL,
    [Wholesale]                       TINYINT          NOT NULL,
    [RequiresRegistration]            TINYINT          NOT NULL,
    [Looks]                           INT              NOT NULL,
    [Notes]                           NVARCHAR (MAX)   NULL,
    [QuantityDiscountID]              INT              NULL,
    [RelatedProducts]                 NVARCHAR (MAX)   NULL,
    [UpsellProducts]                  NVARCHAR (MAX)   NULL,
    [UpsellProductDiscountPercentage] MONEY            NOT NULL,
    [RelatedDocuments]                NVARCHAR (MAX)   NULL,
    [TrackInventoryBySizeAndColor]    TINYINT          NOT NULL,
    [TrackInventoryBySize]            TINYINT          NOT NULL,
    [TrackInventoryByColor]           TINYINT          NOT NULL,
    [IsAKit]                          TINYINT          NOT NULL,
    [ShowInProductBrowser]            INT              NOT NULL,
    [ShowBuyButton]                   INT              NOT NULL,
    [RequiresProducts]                NVARCHAR (MAX)   NULL,
    [HidePriceUntilCart]              TINYINT          NOT NULL,
    [IsCalltoOrder]                   TINYINT          NOT NULL,
    [ExcludeFromPriceFeeds]           TINYINT          NOT NULL,
    [RequiresTextOption]              TINYINT          NOT NULL,
    [TextOptionMaxLength]             INT              NULL,
    [SEName]                          NVARCHAR (150)   NULL,
    [ExtensionData]                   NVARCHAR (MAX)   NULL,
    [ExtensionData2]                  NVARCHAR (MAX)   NULL,
    [ExtensionData3]                  NVARCHAR (MAX)   NULL,
    [ExtensionData4]                  NVARCHAR (MAX)   NULL,
    [ExtensionData5]                  NVARCHAR (MAX)   NULL,
    [ImageFilenameOverride]           NVARCHAR (MAX)   NULL,
    [IsImport]                        TINYINT          NOT NULL,
    [IsSystem]                        TINYINT          NOT NULL,
    [Deleted]                         TINYINT          NOT NULL,
    [CreatedOn]                       DATETIME         NOT NULL,
    [WarehouseLocation]               NVARCHAR (100)   NULL,
    [SkinID]                          INT              NOT NULL,
    [TemplateName]                    NVARCHAR (50)    NOT NULL,
    [UpdatedOn]                       DATETIME         NOT NULL,
    CONSTRAINT [PK_Item] PRIMARY KEY CLUSTERED ([ProductID] ASC)
);

GO
PRINT N'Creating [dbo].[Product].[UIX_Product_ProductGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Product_ProductGUID]
    ON [dbo].[Product]([ProductGUID] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_SKU]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_SKU]
    ON [dbo].[Product]([SKU] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_IsImport]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_IsImport]
    ON [dbo].[Product]([IsImport] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_IsSystem]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_IsSystem]
    ON [dbo].[Product]([IsSystem] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_Published]
    ON [dbo].[Product]([Published] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_Wholesale]
    ON [dbo].[Product]([Wholesale] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_Deleted]
    ON [dbo].[Product]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_ProductTypeID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_ProductTypeID]
    ON [dbo].[Product]([ProductTypeID] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_IsAKit]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_IsAKit]
    ON [dbo].[Product]([IsAKit] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_Name]
    ON [dbo].[Product]([Name] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_ManufacturerPartNumber]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_ManufacturerPartNumber]
    ON [dbo].[Product]([ManufacturerPartNumber] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_Published_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_Published_Deleted]
    ON [dbo].[Product]([Published] ASC, [Deleted] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_Wholesale_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_Wholesale_Deleted]
    ON [dbo].[Product]([Wholesale] ASC, [Deleted] ASC);

GO
PRINT N'Creating [dbo].[Product].[IX_Product_Published_Deleted_IsAKit]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_Published_Deleted_IsAKit]
    ON [dbo].[Product]([Published] ASC, [Deleted] ASC, [IsAKit] ASC)
    INCLUDE([ProductID], [Name], [ProductTypeID], [TrackInventoryBySizeAndColor]);

GO
PRINT N'Creating [dbo].[ProductAffiliate]...';

GO
CREATE TABLE [dbo].[ProductAffiliate] (
    [ProductID]    INT      NOT NULL,
    [AffiliateID]  INT      NOT NULL,
    [DisplayOrder] INT      NOT NULL,
    [CreatedOn]    DATETIME NOT NULL,
    [UpdatedOn]    DATETIME NOT NULL,
    CONSTRAINT [PK_ProductAffiliate] PRIMARY KEY CLUSTERED ([ProductID] ASC, [AffiliateID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductCategory]...';

GO
CREATE TABLE [dbo].[ProductCategory] (
    [ProductID]    INT      NOT NULL,
    [CategoryID]   INT      NOT NULL,
    [DisplayOrder] INT      NOT NULL,
    [CreatedOn]    DATETIME NOT NULL,
    [UpdatedOn]    DATETIME NOT NULL,
    CONSTRAINT [PK_ProductCategory] PRIMARY KEY CLUSTERED ([ProductID] ASC, [CategoryID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductCategory].[IX_Product_ProductID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Product_ProductID]
    ON [dbo].[ProductCategory]([ProductID] ASC);

GO
PRINT N'Creating [dbo].[ProductCategory].[IX_Category_CategoryID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Category_CategoryID]
    ON [dbo].[ProductCategory]([CategoryID] ASC);

GO
PRINT N'Creating [dbo].[ProductCustomerLevel]...';

GO
CREATE TABLE [dbo].[ProductCustomerLevel] (
    [ProductID]       INT      NOT NULL,
    [CustomerLevelID] INT      NOT NULL,
    [DisplayOrder]    INT      NOT NULL,
    [CreatedOn]       DATETIME NOT NULL,
    [UpdatedOn]       DATETIME NOT NULL,
    CONSTRAINT [PK_ProductCustomerLevel] PRIMARY KEY CLUSTERED ([ProductID] ASC, [CustomerLevelID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductDistributor]...';

GO
CREATE TABLE [dbo].[ProductDistributor] (
    [ProductID]     INT      NOT NULL,
    [DistributorID] INT      NOT NULL,
    [DisplayOrder]  INT      NOT NULL,
    [CreatedOn]     DATETIME NOT NULL,
    [UpdatedOn]     DATETIME NOT NULL,
    CONSTRAINT [PK_ProductDistributor] PRIMARY KEY CLUSTERED ([ProductID] ASC, [DistributorID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductGenre]...';

GO
CREATE TABLE [dbo].[ProductGenre] (
    [ProductID]    INT      NOT NULL,
    [GenreID]      INT      NOT NULL,
    [DisplayOrder] INT      NOT NULL,
    [CreatedOn]    DATETIME NOT NULL,
    [UpdatedOn]    DATETIME NOT NULL,
    CONSTRAINT [PK_ProductGenre] PRIMARY KEY CLUSTERED ([ProductID] ASC, [GenreID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductLocaleSetting]...';

GO
CREATE TABLE [dbo].[ProductLocaleSetting] (
    [ProductID]       INT      NOT NULL,
    [LocaleSettingID] INT      NOT NULL,
    [DisplayOrder]    INT      NOT NULL,
    [CreatedOn]       DATETIME NOT NULL,
    [UpdatedOn]       DATETIME NOT NULL,
    CONSTRAINT [PK_ProductLocaleSetting] PRIMARY KEY CLUSTERED ([ProductID] ASC, [LocaleSettingID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductManufacturer]...';

GO
CREATE TABLE [dbo].[ProductManufacturer] (
    [ProductID]      INT      NOT NULL,
    [ManufacturerID] INT      NOT NULL,
    [DisplayOrder]   INT      NOT NULL,
    [CreatedOn]      DATETIME NOT NULL,
    [UpdatedOn]      DATETIME NOT NULL,
    CONSTRAINT [PK_ProductManufacturer] PRIMARY KEY CLUSTERED ([ProductID] ASC, [ManufacturerID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductSection]...';

GO
CREATE TABLE [dbo].[ProductSection] (
    [ProductID]    INT      NOT NULL,
    [SectionID]    INT      NOT NULL,
    [DisplayOrder] INT      NOT NULL,
    [CreatedOn]    DATETIME NOT NULL,
    [UpdatedOn]    DATETIME NOT NULL,
    CONSTRAINT [PK_ProductSection] PRIMARY KEY CLUSTERED ([ProductID] ASC, [SectionID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductSection].[IX_ProductSection_SectionID_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductSection_SectionID_DisplayOrder]
    ON [dbo].[ProductSection]([SectionID] ASC, [DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[ProductStore]...';

GO
CREATE TABLE [dbo].[ProductStore] (
    [ID]        INT      IDENTITY (1, 1) NOT NULL,
    [ProductID] INT      NOT NULL,
    [StoreID]   INT      NOT NULL,
    [CreatedOn] DATETIME NOT NULL,
    [UpdatedOn] DATETIME NOT NULL,
    CONSTRAINT [PK_ProductStore] PRIMARY KEY CLUSTERED ([ProductID] ASC, [StoreID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductType]...';

GO
CREATE TABLE [dbo].[ProductType] (
    [ProductTypeID]   INT              IDENTITY (1, 1) NOT NULL,
    [ProductTypeGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]            NVARCHAR (400)   NOT NULL,
    [DisplayOrder]    INT              NOT NULL,
    [TaxClassID]      INT              NOT NULL,
    [CreatedOn]       DATETIME         NOT NULL,
    [UpdatedOn]       DATETIME         NOT NULL,
    CONSTRAINT [PK_ProductType] PRIMARY KEY CLUSTERED ([ProductTypeID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductType].[IX_ProductType_ProductTypeGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductType_ProductTypeGUID]
    ON [dbo].[ProductType]([ProductTypeGUID] ASC);

GO
PRINT N'Creating [dbo].[ProductType].[IX_ProductType_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductType_Name]
    ON [dbo].[ProductType]([Name] ASC);

GO
PRINT N'Creating [dbo].[ProductType].[IX_ProductType_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductType_DisplayOrder]
    ON [dbo].[ProductType]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[ProductType].[IX_ProductType_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductType_DisplayOrder_Name]
    ON [dbo].[ProductType]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant]...';

GO
CREATE TABLE [dbo].[ProductVariant] (
    [VariantID]                 INT              IDENTITY (1, 1) NOT NULL,
    [VariantGUID]               UNIQUEIDENTIFIER NOT NULL,
    [IsDefault]                 INT              NOT NULL,
    [Name]                      NVARCHAR (400)   NULL,
    [Description]               NVARCHAR (MAX)   NULL,
    [SEKeywords]                NVARCHAR (MAX)   NULL,
    [SEDescription]             NVARCHAR (MAX)   NULL,
    [SEAltText]                 NVARCHAR (MAX)   NULL,
    [Colors]                    NVARCHAR (MAX)   NULL,
    [ColorSKUModifiers]         NVARCHAR (MAX)   NULL,
    [Sizes]                     NVARCHAR (MAX)   NULL,
    [SizeSKUModifiers]          NVARCHAR (MAX)   NULL,
    [FroogleDescription]        NVARCHAR (MAX)   NULL,
    [ProductID]                 INT              NOT NULL,
    [SKUSuffix]                 NVARCHAR (50)    NULL,
    [ManufacturerPartNumber]    NVARCHAR (50)    NULL,
    [Price]                     MONEY            NOT NULL,
    [SalePrice]                 MONEY            NULL,
    [Weight]                    MONEY            NULL,
    [MSRP]                      MONEY            NULL,
    [Cost]                      MONEY            NULL,
    [Points]                    INT              NULL,
    [Dimensions]                NVARCHAR (100)   NULL,
    [Inventory]                 INT              NOT NULL,
    [DisplayOrder]              INT              NOT NULL,
    [Notes]                     NVARCHAR (MAX)   NULL,
    [IsTaxable]                 TINYINT          NOT NULL,
    [IsShipSeparately]          TINYINT          NOT NULL,
    [IsDownload]                TINYINT          NOT NULL,
    [DownloadLocation]          NVARCHAR (MAX)   NULL,
    [DownloadValidDays]         INT              NULL,
    [FreeShipping]              TINYINT          NOT NULL,
    [Published]                 TINYINT          NOT NULL,
    [Wholesale]                 TINYINT          NOT NULL,
    [IsSecureAttachment]        TINYINT          NOT NULL,
    [IsRecurring]               TINYINT          NOT NULL,
    [RecurringInterval]         INT              NOT NULL,
    [RecurringIntervalType]     INT              NOT NULL,
    [RewardPoints]              INT              NULL,
    [SEName]                    NVARCHAR (100)   NULL,
    [RestrictedQuantities]      NVARCHAR (250)   NULL,
    [MinimumQuantity]           INT              NULL,
    [ExtensionData]             NVARCHAR (MAX)   NULL,
    [ExtensionData2]            NVARCHAR (MAX)   NULL,
    [ExtensionData3]            NVARCHAR (MAX)   NULL,
    [ExtensionData4]            NVARCHAR (MAX)   NULL,
    [ExtensionData5]            NVARCHAR (MAX)   NULL,
    [ImageFilenameOverride]     NVARCHAR (MAX)   NULL,
    [IsImport]                  TINYINT          NOT NULL,
    [Deleted]                   TINYINT          NOT NULL,
    [CreatedOn]                 DATETIME         NOT NULL,
    [CustomerEntersPrice]       TINYINT          NOT NULL,
    [CustomerEntersPricePrompt] NVARCHAR (MAX)   NULL,
    [Condition]                 TINYINT          NOT NULL,
    [GTIN]                      NVARCHAR (14)    NULL,
    [UpdatedOn]                 DATETIME         NOT NULL,
    CONSTRAINT [PK_ProductVariants] PRIMARY KEY CLUSTERED ([VariantID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductVariant].[UIX_ProductVariant_VariantID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_ProductVariant_VariantID]
    ON [dbo].[ProductVariant]([VariantGUID] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_ProductID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_ProductID]
    ON [dbo].[ProductVariant]([ProductID] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_SKUSuffix]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_SKUSuffix]
    ON [dbo].[ProductVariant]([SKUSuffix] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_ManufacturerPartNumber]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_ManufacturerPartNumber]
    ON [dbo].[ProductVariant]([ManufacturerPartNumber] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_Deleted]
    ON [dbo].[ProductVariant]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_Published]
    ON [dbo].[ProductVariant]([Published] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_Wholesale]
    ON [dbo].[ProductVariant]([Wholesale] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_Deleted_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_Deleted_Published]
    ON [dbo].[ProductVariant]([Deleted] ASC, [Published] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_Deleted_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_Deleted_Wholesale]
    ON [dbo].[ProductVariant]([Deleted] ASC, [Wholesale] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_IsDefault]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_IsDefault]
    ON [dbo].[ProductVariant]([IsDefault] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_DisplayOrder]
    ON [dbo].[ProductVariant]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_Name]
    ON [dbo].[ProductVariant]([Name] ASC);

GO
PRINT N'Creating [dbo].[ProductVariant].[IX_ProductVariant_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_ProductVariant_DisplayOrder_Name]
    ON [dbo].[ProductVariant]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[ProductVector]...';

GO
CREATE TABLE [dbo].[ProductVector] (
    [ProductID]    INT      NOT NULL,
    [VectorID]     INT      NOT NULL,
    [DisplayOrder] INT      NOT NULL,
    [CreatedOn]    DATETIME NOT NULL,
    [UpdatedOn]    DATETIME NOT NULL,
    CONSTRAINT [PK_ProductVector] PRIMARY KEY CLUSTERED ([ProductID] ASC, [VectorID] ASC)
);

GO
PRINT N'Creating [dbo].[ProductView]...';

GO
CREATE TABLE [dbo].[ProductView] (
    [ViewID]         INT           IDENTITY (1, 1) NOT NULL,
    [CustomerViewID] NVARCHAR (50) NOT NULL,
    [ProductID]      INT           NOT NULL,
    [ViewDate]       DATETIME      NOT NULL,
    [UpdatedOn]      DATETIME      NOT NULL,
    [CreatedOn]      DATETIME      NOT NULL,
    CONSTRAINT [PK_ProductView] PRIMARY KEY CLUSTERED ([ViewID] ASC)
);

GO
PRINT N'Creating [dbo].[Profile]...';

GO
CREATE TABLE [dbo].[Profile] (
    [StoreID]             INT              NULL,
    [ProfileID]           INT              IDENTITY (1, 1) NOT NULL,
    [CustomerID]          INT              NULL,
    [PropertyName]        VARCHAR (50)     NULL,
    [CustomerGUID]        UNIQUEIDENTIFIER NULL,
    [PropertyValueString] NVARCHAR (MAX)   NULL,
    [UpdatedOn]           DATETIME         NULL,
    [CreatedOn]           DATETIME         NOT NULL,
    CONSTRAINT [PK_Profile] PRIMARY KEY CLUSTERED ([ProfileID] ASC)
);

GO
PRINT N'Creating [dbo].[Profile].[IX_Profile_CustomerGuid]...';

GO
CREATE NONCLUSTERED INDEX [IX_Profile_CustomerGuid]
    ON [dbo].[Profile]([CustomerGUID] ASC);

GO
PRINT N'Creating [dbo].[PromotionLineItem]...';

GO
CREATE TABLE [dbo].[PromotionLineItem] (
    [id]                   INT            IDENTITY (1, 1) NOT NULL,
    [PromotionUsageId]     INT            NOT NULL,
    [shoppingCartRecordId] INT            NOT NULL,
    [productId]            INT            NOT NULL,
    [variantId]            INT            NOT NULL,
    [sku]                  NVARCHAR (150) NOT NULL,
    [quantity]             INT            NOT NULL,
    [cartPrice]            MONEY          NOT NULL,
    [subTotal]             MONEY          NOT NULL,
    [isAGift]              BIT            NOT NULL,
    [discountAmount]       MONEY          NOT NULL,
    [UpdatedOn]            DATETIME       NOT NULL,
    [CreatedOn]            DATETIME       NOT NULL,
    CONSTRAINT [PK_[PromotionLineItem] PRIMARY KEY CLUSTERED ([id] ASC)
);

GO
PRINT N'Creating [dbo].[Promotions]...';

GO
CREATE TABLE [dbo].[Promotions] (
    [Id]                    INT              IDENTITY (1, 1) NOT NULL,
    [PromotionGuid]         UNIQUEIDENTIFIER NOT NULL,
    [Name]                  VARCHAR (100)    NOT NULL,
    [Description]           VARCHAR (MAX)    NOT NULL,
    [UsageText]             VARCHAR (MAX)    NULL,
    [EmailText]             VARCHAR (MAX)    NULL,
    [Code]                  VARCHAR (50)     NOT NULL,
    [Priority]              NUMERIC (18)     NOT NULL,
    [Active]                BIT              NOT NULL,
    [AutoAssigned]          BIT              NOT NULL,
    [CallToAction]          NVARCHAR (MAX)   NULL,
    [PromotionRuleData]     XML              NULL,
    [PromotionDiscountData] XML              NULL,
    [UpdatedOn]             DATETIME         NOT NULL,
    [CreatedOn]             DATETIME         NOT NULL,
    CONSTRAINT [PK_Promotions] PRIMARY KEY CLUSTERED ([Id] ASC)
);

GO
PRINT N'Creating [dbo].[Promotions].[XMLIX_Promotions_PromotionRuleData]...';

GO
CREATE PRIMARY XML INDEX [XMLIX_Promotions_PromotionRuleData]
    ON [dbo].[Promotions]([PromotionRuleData])
    WITH (PAD_INDEX = OFF);

GO
PRINT N'Creating [dbo].[Promotions].[XMLIX_Promotions_PromotionRuleData_Path]...';

GO
CREATE XML INDEX [XMLIX_Promotions_PromotionRuleData_Path]
    ON [dbo].[Promotions]([PromotionRuleData])
    USING XML INDEX [XMLIX_Promotions_PromotionRuleData] FOR PATH
    WITH (PAD_INDEX = OFF);

GO
PRINT N'Creating [dbo].[Promotions].[XMLIX_Promotions_PromotionDiscountData]...';

GO
CREATE PRIMARY XML INDEX [XMLIX_Promotions_PromotionDiscountData]
    ON [dbo].[Promotions]([PromotionDiscountData])
    WITH (PAD_INDEX = OFF);

GO
PRINT N'Creating [dbo].[Promotions].[XMLIX_Promotions_PromotionDiscountData_Path]...';

GO
CREATE XML INDEX [XMLIX_Promotions_PromotionDiscountData_Path]
    ON [dbo].[Promotions]([PromotionDiscountData])
    USING XML INDEX [XMLIX_Promotions_PromotionDiscountData] FOR PATH
    WITH (PAD_INDEX = OFF);

GO
PRINT N'Creating [dbo].[PromotionStore]...';

GO
CREATE TABLE [dbo].[PromotionStore] (
    [ID]          INT      IDENTITY (1, 1) NOT NULL,
    [PromotionID] INT      NOT NULL,
    [StoreID]     INT      NOT NULL,
    [CreatedOn]   DATETIME NOT NULL,
    [UpdatedOn]   DATETIME NOT NULL,
    CONSTRAINT [PK_PromotionStore] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [AK_PromotionStore] UNIQUE NONCLUSTERED ([PromotionID] ASC, [StoreID] ASC)
);

GO
PRINT N'Creating [dbo].[PromotionUsage]...';

GO
CREATE TABLE [dbo].[PromotionUsage] (
    [Id]                     INT      IDENTITY (1, 1) NOT NULL,
    [PromotionId]            INT      NOT NULL,
    [CustomerId]             INT      NOT NULL,
    [OrderId]                INT      NULL,
    [DateApplied]            DATETIME NULL,
    [ShippingDiscountAmount] MONEY    NULL,
    [LineItemDiscountAmount] MONEY    NULL,
    [OrderDiscountAmount]    MONEY    NULL,
    [DiscountAmount]         MONEY    NULL,
    [Complete]               BIT      NOT NULL,
    [UpdatedOn]              DATETIME NOT NULL,
    [CreatedOn]              DATETIME NOT NULL,
    CONSTRAINT [PK_PromotionUsage] PRIMARY KEY CLUSTERED ([Id] ASC)
);

GO
PRINT N'Creating [dbo].[QuantityDiscount]...';

GO
CREATE TABLE [dbo].[QuantityDiscount] (
    [QuantityDiscountID]   INT              IDENTITY (1, 1) NOT NULL,
    [QuantityDiscountGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]                 NVARCHAR (400)   NOT NULL,
    [DisplayOrder]         INT              NOT NULL,
    [ExtensionData]        NVARCHAR (MAX)   NULL,
    [DiscountType]         TINYINT          NOT NULL,
    [CreatedOn]            DATETIME         NOT NULL,
    [UpdatedOn]            DATETIME         NOT NULL,
    CONSTRAINT [PK_QuantityDiscount] PRIMARY KEY CLUSTERED ([QuantityDiscountID] ASC)
);

GO
PRINT N'Creating [dbo].[QuantityDiscount].[UIX_QuantityDiscount_QuantityDiscountGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_QuantityDiscount_QuantityDiscountGUID]
    ON [dbo].[QuantityDiscount]([QuantityDiscountGUID] ASC);

GO
PRINT N'Creating [dbo].[QuantityDiscount].[IX_QuantityDiscount_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_QuantityDiscount_DisplayOrder]
    ON [dbo].[QuantityDiscount]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[QuantityDiscount].[IX_QuantityDiscount_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_QuantityDiscount_DisplayOrder_Name]
    ON [dbo].[QuantityDiscount]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[QuantityDiscount].[IX_QuantityDiscount_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_QuantityDiscount_Name]
    ON [dbo].[QuantityDiscount]([Name] ASC);

GO
PRINT N'Creating [dbo].[QuantityDiscountTable]...';

GO
CREATE TABLE [dbo].[QuantityDiscountTable] (
    [QuantityDiscountTableID]   INT              IDENTITY (1, 1) NOT NULL,
    [QuantityDiscountTableGUID] UNIQUEIDENTIFIER NULL,
    [QuantityDiscountID]        INT              NULL,
    [LowQuantity]               INT              NOT NULL,
    [HighQuantity]              INT              NOT NULL,
    [DiscountPercent]           MONEY            NOT NULL,
    [CreatedOn]                 DATETIME         NOT NULL,
    [UpdatedOn]                 DATETIME         NOT NULL,
    CONSTRAINT [PK_QuantityDiscountTable] PRIMARY KEY CLUSTERED ([QuantityDiscountTableID] ASC)
);

GO
PRINT N'Creating [dbo].[QuantityDiscountTable].[UIX_QuantityDiscountTable_QuantityDiscountTableGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_QuantityDiscountTable_QuantityDiscountTableGUID]
    ON [dbo].[QuantityDiscountTable]([QuantityDiscountTableGUID] ASC);

GO
PRINT N'Creating [dbo].[QuantityDiscountTable].[IX_QuantityDiscountTable_QuantityDiscountTableID]...';

GO
CREATE NONCLUSTERED INDEX [IX_QuantityDiscountTable_QuantityDiscountTableID]
    ON [dbo].[QuantityDiscountTable]([QuantityDiscountID] ASC);

GO
PRINT N'Creating [dbo].[QuantityDiscountTable].[IX_QuantityDiscountTable_LowQuantity_HighQuantity]...';

GO
CREATE NONCLUSTERED INDEX [IX_QuantityDiscountTable_LowQuantity_HighQuantity]
    ON [dbo].[QuantityDiscountTable]([LowQuantity] ASC, [HighQuantity] ASC);

GO
PRINT N'Creating [dbo].[Rating]...';

GO
CREATE TABLE [dbo].[Rating] (
    [RatingID]        INT            IDENTITY (1, 1) NOT NULL,
    [StoreID]         INT            NOT NULL,
    [ProductID]       INT            NOT NULL,
    [CustomerID]      INT            NOT NULL,
    [Rating]          INT            NOT NULL,
    [Comments]        NVARCHAR (MAX) NULL,
    [HasComment]      TINYINT        NOT NULL,
    [IsFilthy]        TINYINT        NOT NULL,
    [IsROTD]          TINYINT        NOT NULL,
    [FoundHelpful]    INT            NOT NULL,
    [FoundNotHelpful] INT            NOT NULL,
    [CreatedOn]       DATETIME       NOT NULL,
    [UpdatedOn]       DATETIME       NOT NULL,
    CONSTRAINT [PK_Item_Ratings_1] PRIMARY KEY CLUSTERED ([RatingID] ASC)
);

GO
PRINT N'Creating [dbo].[Rating].[IX_Rating_FoundNotHelpful]...';

GO
CREATE NONCLUSTERED INDEX [IX_Rating_FoundNotHelpful]
    ON [dbo].[Rating]([FoundNotHelpful] ASC);

GO
PRINT N'Creating [dbo].[Rating].[IX_Rating_CreatedOn]...';

GO
CREATE NONCLUSTERED INDEX [IX_Rating_CreatedOn]
    ON [dbo].[Rating]([CreatedOn] ASC);

GO
PRINT N'Creating [dbo].[Rating].[IX_Rating]...';

GO
CREATE NONCLUSTERED INDEX [IX_Rating]
    ON [dbo].[Rating]([HasComment] ASC);

GO
PRINT N'Creating [dbo].[Rating].[IX_Rating_ProductID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Rating_ProductID]
    ON [dbo].[Rating]([ProductID] ASC);

GO
PRINT N'Creating [dbo].[Rating].[IX_Rating_CustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Rating_CustomerID]
    ON [dbo].[Rating]([CustomerID] ASC);

GO
PRINT N'Creating [dbo].[Rating].[IX_Rating_IsROTD]...';

GO
CREATE NONCLUSTERED INDEX [IX_Rating_IsROTD]
    ON [dbo].[Rating]([IsROTD] ASC);

GO
PRINT N'Creating [dbo].[Rating].[IX_Rating_FoundHelpful]...';

GO
CREATE NONCLUSTERED INDEX [IX_Rating_FoundHelpful]
    ON [dbo].[Rating]([FoundHelpful] ASC);

GO
PRINT N'Creating [dbo].[Rating].[IX_Rating_IsFilthy]...';

GO
CREATE NONCLUSTERED INDEX [IX_Rating_IsFilthy]
    ON [dbo].[Rating]([IsFilthy] ASC);

GO
PRINT N'Creating [dbo].[RatingCommentHelpfulness]...';

GO
CREATE TABLE [dbo].[RatingCommentHelpfulness] (
    [StoreID]          INT      NOT NULL,
    [ProductID]        INT      NOT NULL,
    [RatingCustomerID] INT      NOT NULL,
    [VotingCustomerID] INT      NOT NULL,
    [Helpful]          TINYINT  NOT NULL,
    [CreatedOn]        DATETIME NOT NULL,
    [UpdatedOn]        DATETIME NOT NULL,
    CONSTRAINT [PK_Comment_Helpfulness] PRIMARY KEY CLUSTERED ([StoreID] ASC, [ProductID] ASC, [RatingCustomerID] ASC, [VotingCustomerID] ASC)
);
GO
PRINT N'Creating [dbo].[RatingCommentHelpfulness].[IX_RatingCommentHelpfulness_StoreID]...';
GO
CREATE NONCLUSTERED INDEX [IX_RatingCommentHelpfulness_StoreID]
    ON [dbo].[RatingCommentHelpfulness]([StoreID] ASC);
GO
PRINT N'Creating [dbo].[RatingCommentHelpfulness].[IX_RatingCommentHelpfulness_VotingCustomerID]...';
GO
CREATE NONCLUSTERED INDEX [IX_RatingCommentHelpfulness_VotingCustomerID]
    ON [dbo].[RatingCommentHelpfulness]([VotingCustomerID] ASC);

GO
PRINT N'Creating [dbo].[RatingCommentHelpfulness].[IX_RatingCommentHelpfulness_ProductID]...';

GO
CREATE NONCLUSTERED INDEX [IX_RatingCommentHelpfulness_ProductID]
    ON [dbo].[RatingCommentHelpfulness]([ProductID] ASC);

GO
PRINT N'Creating [dbo].[RatingCommentHelpfulness].[IX_RatingCommentHelpfulness_RatingCustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_RatingCommentHelpfulness_RatingCustomerID]
    ON [dbo].[RatingCommentHelpfulness]([RatingCustomerID] ASC);

GO
PRINT N'Creating [dbo].[RatingCommentHelpfulness].[IX_RatingCommentHelpfulness_Helpful]...';

GO
CREATE NONCLUSTERED INDEX [IX_RatingCommentHelpfulness_Helpful]
    ON [dbo].[RatingCommentHelpfulness]([Helpful] ASC);

GO
PRINT N'Creating [dbo].[RestrictedIP]...';

GO
CREATE TABLE [dbo].[RestrictedIP] (
    [DBRecNo]   INT           IDENTITY (1, 1) NOT NULL,
    [IPAddress] NVARCHAR (25) NOT NULL,
    [CreatedOn] DATETIME      NOT NULL,
    [UpdatedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_IPAddress] PRIMARY KEY CLUSTERED ([IPAddress] ASC)
);

GO
PRINT N'Creating [dbo].[SalesPrompt]...';

GO
CREATE TABLE [dbo].[SalesPrompt] (
    [SalesPromptID]   INT              IDENTITY (1, 1) NOT NULL,
    [SalesPromptGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]            NVARCHAR (400)   NOT NULL,
    [ExtensionData]   NVARCHAR (MAX)   NULL,
    [Deleted]         TINYINT          NOT NULL,
    [CreatedOn]       DATETIME         NOT NULL,
    [UpdatedOn]       DATETIME         NOT NULL,
    CONSTRAINT [PK_SalesPrompts] PRIMARY KEY CLUSTERED ([SalesPromptID] ASC)
);

GO
PRINT N'Creating [dbo].[SalesPrompt].[UIX_SalesPrompt_SalesPromptGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_SalesPrompt_SalesPromptGUID]
    ON [dbo].[SalesPrompt]([SalesPromptGUID] ASC);

GO
PRINT N'Creating [dbo].[SalesPrompt].[IX_SalesPrompt_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_SalesPrompt_Deleted]
    ON [dbo].[SalesPrompt]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[SalesPrompt].[IX_SalesPrompt_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_SalesPrompt_Name]
    ON [dbo].[SalesPrompt]([Name] ASC);

GO
PRINT N'Creating [dbo].[SearchLog]...';

GO
CREATE TABLE [dbo].[SearchLog] (
    [SearchTerm]    NVARCHAR (255) NULL,
    [CustomerID]    INT            NOT NULL,
    [CreatedOn]     DATETIME       NOT NULL,
    [LocaleSetting] NVARCHAR (10)  NOT NULL,
    [UpdatedOn]     DATETIME       NOT NULL
);

GO
PRINT N'Creating [dbo].[Section]...';

GO
CREATE TABLE [dbo].[Section] (
    [SectionID]                  INT              IDENTITY (1, 1) NOT NULL,
    [SectionGUID]                UNIQUEIDENTIFIER NOT NULL,
    [Name]                       NVARCHAR (400)   NOT NULL,
    [Summary]                    NVARCHAR (MAX)   NULL,
    [Description]                NVARCHAR (MAX)   NULL,
    [SEKeywords]                 NVARCHAR (MAX)   NULL,
    [SEDescription]              NVARCHAR (MAX)   NULL,
    [DisplayPrefix]              NVARCHAR (MAX)   NULL,
    [SETitle]                    NVARCHAR (MAX)   NULL,
    [SEAltText]                  NVARCHAR (MAX)   NULL,
    [RelatedDocuments]           NVARCHAR (MAX)   NULL,
    [ParentSectionID]            INT              NOT NULL,
    [ColWidth]                   INT              NOT NULL,
    [SortByLooks]                TINYINT          NOT NULL,
    [DisplayOrder]               INT              NOT NULL,
    [XmlPackage]                 NVARCHAR (100)   NULL,
    [AllowCategoryFiltering]     TINYINT          NOT NULL,
    [AllowManufacturerFiltering] TINYINT          NOT NULL,
    [AllowProductTypeFiltering]  TINYINT          NOT NULL,
    [Published]                  TINYINT          NOT NULL,
    [Wholesale]                  TINYINT          NOT NULL,
    [ShowInProductBrowser]       INT              NOT NULL,
    [QuantityDiscountID]         INT              NULL,
    [SEName]                     NVARCHAR (100)   NULL,
    [ExtensionData]              NVARCHAR (MAX)   NULL,
    [ImageFilenameOverride]      NVARCHAR (MAX)   NULL,
    [IsImport]                   TINYINT          NOT NULL,
    [Deleted]                    TINYINT          NOT NULL,
    [CreatedOn]                  DATETIME         NOT NULL,
    [PageSize]                   INT              NOT NULL,
    [SkinID]                     INT              NOT NULL,
    [TemplateName]               NVARCHAR (50)    NOT NULL,
    [UpdatedOn]                  DATETIME         NOT NULL,
    CONSTRAINT [PK_Section] PRIMARY KEY CLUSTERED ([SectionID] ASC)
);

GO
PRINT N'Creating [dbo].[Section].[UIX_Section_SectionGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Section_SectionGUID]
    ON [dbo].[Section]([SectionGUID] ASC);

GO
PRINT N'Creating [dbo].[Section].[IX_Section_ParentSectionID]...';

GO
CREATE NONCLUSTERED INDEX [IX_Section_ParentSectionID]
    ON [dbo].[Section]([ParentSectionID] ASC);

GO
PRINT N'Creating [dbo].[Section].[IX_Section_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_Section_DisplayOrder]
    ON [dbo].[Section]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[Section].[IX_Section_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Section_Name]
    ON [dbo].[Section]([Name] ASC);

GO
PRINT N'Creating [dbo].[Section].[IX_Section_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Section_DisplayOrder_Name]
    ON [dbo].[Section]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[Section].[IX_Section_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_Section_Published]
    ON [dbo].[Section]([Published] ASC);

GO
PRINT N'Creating [dbo].[Section].[IX_Section_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_Section_Wholesale]
    ON [dbo].[Section]([Wholesale] ASC);

GO
PRINT N'Creating [dbo].[Section].[IX_Section_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Section_Deleted]
    ON [dbo].[Section]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[Section].[IX_Section_Deleted_Published]...';

GO
CREATE NONCLUSTERED INDEX [IX_Section_Deleted_Published]
    ON [dbo].[Section]([Deleted] ASC, [Published] ASC);

GO
PRINT N'Creating [dbo].[Section].[IX_Section_Deleted_Wholesale]...';

GO
CREATE NONCLUSTERED INDEX [IX_Section_Deleted_Wholesale]
    ON [dbo].[Section]([Deleted] ASC, [Wholesale] ASC);

GO
PRINT N'Creating [dbo].[SecurityLog]...';

GO
CREATE TABLE [dbo].[SecurityLog] (
    [logid]             BIGINT          IDENTITY (1, 1) NOT NULL,
    [SecurityAction]    NVARCHAR (1000) NOT NULL,
    [Description]       NVARCHAR (MAX)  NOT NULL,
    [ActionDate]        DATETIME        NOT NULL,
    [CustomerUpdated]   INT             NOT NULL,
    [UpdatedBy]         INT             NOT NULL,
    [CustomerSessionID] INT             NOT NULL,
    [UpdatedOn]         DATETIME        NOT NULL,
    [CreatedOn]         DATETIME        NOT NULL,
    CONSTRAINT [PK_SecurityLog] PRIMARY KEY CLUSTERED ([logid] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingByProduct]...';

GO
CREATE TABLE [dbo].[ShippingByProduct] (
    [ShippingByProductID]   INT              IDENTITY (1, 1) NOT NULL,
    [ShippingByProductGUID] UNIQUEIDENTIFIER NOT NULL,
    [VariantID]             INT              NOT NULL,
    [ShippingMethodID]      INT              NOT NULL,
    [ShippingCost]          MONEY            NOT NULL,
    [CreatedOn]             DATETIME         NOT NULL,
    [UpdatedOn]             DATETIME         NOT NULL,
    CONSTRAINT [PK_ShippingByProduct] PRIMARY KEY CLUSTERED ([ShippingByProductID] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingByProduct].[UIX_ShippingByProduct_ShippingByProductGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_ShippingByProduct_ShippingByProductGUID]
    ON [dbo].[ShippingByProduct]([ShippingByProductGUID] ASC);

GO
PRINT N'Creating [dbo].[ShippingByTotal]...';

GO
CREATE TABLE [dbo].[ShippingByTotal] (
    [RowGUID]          UNIQUEIDENTIFIER NOT NULL,
    [StoreID]          INT              NOT NULL,
    [LowValue]         MONEY            NOT NULL,
    [HighValue]        MONEY            NOT NULL,
    [ShippingMethodID] INT              NOT NULL,
    [ShippingCharge]   MONEY            NOT NULL,
    [CreatedOn]        DATETIME         NOT NULL,
    [UpdatedOn]        DATETIME         NOT NULL
);

GO
PRINT N'Creating [dbo].[ShippingByTotal].[IX_ShippingByTotal_ShippingMethodID_LowValue_HighValue]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingByTotal_ShippingMethodID_LowValue_HighValue]
    ON [dbo].[ShippingByTotal]([ShippingMethodID] ASC, [LowValue] ASC, [HighValue] ASC);

GO
PRINT N'Creating [dbo].[ShippingByTotal].[IX_ShippingByTotal_RowGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingByTotal_RowGUID]
    ON [dbo].[ShippingByTotal]([RowGUID] ASC);

GO
PRINT N'Creating [dbo].[ShippingByTotalByPercent]...';

GO
CREATE TABLE [dbo].[ShippingByTotalByPercent] (
    [RowGUID]          UNIQUEIDENTIFIER NOT NULL,
    [StoreID]          INT              NOT NULL,
    [LowValue]         MONEY            NOT NULL,
    [HighValue]        MONEY            NOT NULL,
    [ShippingMethodID] INT              NOT NULL,
    [MinimumCharge]    MONEY            NOT NULL,
    [SurCharge]        MONEY            NOT NULL,
    [PercentOfTotal]   MONEY            NOT NULL,
    [CreatedOn]        DATETIME         NOT NULL,
    [UpdatedOn]        DATETIME         NOT NULL
);

GO
PRINT N'Creating [dbo].[ShippingByTotalByPercent].[IX_ShippingByTotalByPercent_ShippingMethodID_LowValue_HighValue]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingByTotalByPercent_ShippingMethodID_LowValue_HighValue]
    ON [dbo].[ShippingByTotalByPercent]([ShippingMethodID] ASC, [LowValue] ASC, [HighValue] ASC);

GO
PRINT N'Creating [dbo].[ShippingByTotalByPercent].[IX_ShippingByTotalByPercent_RowGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingByTotalByPercent_RowGUID]
    ON [dbo].[ShippingByTotalByPercent]([RowGUID] ASC);

GO
PRINT N'Creating [dbo].[ShippingByWeight]...';

GO
CREATE TABLE [dbo].[ShippingByWeight] (
    [RowGUID]          UNIQUEIDENTIFIER NOT NULL,
    [StoreID]          INT              NOT NULL,
    [LowValue]         MONEY            NOT NULL,
    [HighValue]        MONEY            NOT NULL,
    [ShippingMethodID] INT              NOT NULL,
    [ShippingCharge]   MONEY            NOT NULL,
    [CreatedOn]        DATETIME         NOT NULL,
    [UpdatedOn]        DATETIME         NOT NULL
);

GO
PRINT N'Creating [dbo].[ShippingByWeight].[IX_ShippingByWeight_ShippingMethodID_LowValue_HighValue]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingByWeight_ShippingMethodID_LowValue_HighValue]
    ON [dbo].[ShippingByWeight]([ShippingMethodID] ASC, [LowValue] ASC, [HighValue] ASC);

GO
PRINT N'Creating [dbo].[ShippingByWeight].[IX_ShippingByWeight_RowGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingByWeight_RowGUID]
    ON [dbo].[ShippingByWeight]([RowGUID] ASC);

GO
PRINT N'Creating [dbo].[ShippingCalculation]...';

GO
CREATE TABLE [dbo].[ShippingCalculation] (
    [ShippingCalculationID]   INT              IDENTITY (1, 1) NOT NULL,
    [ShippingCalculationGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]                    NVARCHAR (400)   NOT NULL,
    [Selected]                TINYINT          NOT NULL,
    [DisplayOrder]            INT              NOT NULL,
    [CreatedOn]               DATETIME         NOT NULL,
    [UpdatedOn]               DATETIME         NOT NULL,
    CONSTRAINT [PK_ShippingCalculation] PRIMARY KEY CLUSTERED ([ShippingCalculationID] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingCalculation].[UIX_ShippingCalculation_ShippingCalculationID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_ShippingCalculation_ShippingCalculationID]
    ON [dbo].[ShippingCalculation]([ShippingCalculationGUID] ASC);

GO
PRINT N'Creating [dbo].[ShippingCalculation].[IX_ShippingCalculation_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingCalculation_DisplayOrder]
    ON [dbo].[ShippingCalculation]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[ShippingCalculation].[IX_ShippingCalculation_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingCalculation_Name]
    ON [dbo].[ShippingCalculation]([Name] ASC);

GO
PRINT N'Creating [dbo].[ShippingCalculation].[IX_ShippingCalculation_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingCalculation_DisplayOrder_Name]
    ON [dbo].[ShippingCalculation]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[ShippingCalculationStore]...';

GO
CREATE TABLE [dbo].[ShippingCalculationStore] (
    [Id]                    INT      IDENTITY (1, 1) NOT NULL,
    [StoreId]               INT      NOT NULL,
    [ShippingCalculationId] INT      NOT NULL,
    [CreatedOn]             DATETIME NULL,
    [UpdatedOn]             DATETIME NOT NULL,
    CONSTRAINT [PK_StoreShippingCalculation] PRIMARY KEY CLUSTERED ([StoreId] ASC, [ShippingCalculationId] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingImportExport]...';

GO
CREATE TABLE [dbo].[ShippingImportExport] (
    [OrderNumber]        INT            NOT NULL,
    [CustomerID]         INT            NOT NULL,
    [StoreID]            INT            NOT NULL,
    [CompanyName]        NVARCHAR (50)  NULL,
    [CustomerLastName]   NVARCHAR (50)  NOT NULL,
    [CustomerFirstName]  NVARCHAR (50)  NOT NULL,
    [CustomerPhone]      NVARCHAR (50)  NULL,
    [CustomerEmail]      NVARCHAR (100) NULL,
    [Address1]           NVARCHAR (100) NOT NULL,
    [Address2]           NVARCHAR (100) NULL,
    [Suite]              NVARCHAR (50)  NULL,
    [City]               NVARCHAR (100) NOT NULL,
    [State]              NVARCHAR (100) NOT NULL,
    [Zip]                NVARCHAR (10)  NOT NULL,
    [Country]            NVARCHAR (100) NOT NULL,
    [ServiceCarrierCode] NVARCHAR (50)  NULL,
    [TrackingNumber]     NVARCHAR (100) NULL,
    [Cost]               MONEY          NULL,
    [Weight]             MONEY          NULL,
    [UpdatedOn]          DATETIME       NOT NULL,
    [CreatedOn]          DATETIME       NOT NULL,
    CONSTRAINT [PK_ShippingImportExport] PRIMARY KEY CLUSTERED ([OrderNumber] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingMethod]...';

GO
CREATE TABLE [dbo].[ShippingMethod] (
    [ShippingMethodID]    INT              IDENTITY (1, 1) NOT NULL,
    [ShippingMethodGUID]  UNIQUEIDENTIFIER NOT NULL,
    [StoreID]             INT              NOT NULL,
    [Name]                NVARCHAR (2000)  NOT NULL,
    [FixedRate]           MONEY            NULL,
    [FixedPercentOfTotal] MONEY            NULL,
    [DisplayOrder]        INT              NOT NULL,
    [ExtensionData]       NVARCHAR (MAX)   NULL,
    [IsRTShipping]        TINYINT          NOT NULL,
    [CreatedOn]           DATETIME         NOT NULL,
    [MappedPM]            NVARCHAR (400)   NULL,
    [UpdatedOn]           DATETIME         NOT NULL,
    [DisplayName]         NVARCHAR (400)   NULL,
    [ImageFileName]       NVARCHAR (400)   NULL,
    CONSTRAINT [PK_ShippingMethod] PRIMARY KEY CLUSTERED ([ShippingMethodID] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingMethod].[UIX_ShippingMethod_ShippingMethodGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_ShippingMethod_ShippingMethodGUID]
    ON [dbo].[ShippingMethod]([ShippingMethodGUID] ASC);

GO
PRINT N'Creating [dbo].[ShippingMethod].[IX_ShippingMethod_IsRTShipping]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingMethod_IsRTShipping]
    ON [dbo].[ShippingMethod]([IsRTShipping] ASC);

GO
PRINT N'Creating [dbo].[ShippingMethod].[IX_ShippingMethod_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingMethod_DisplayOrder]
    ON [dbo].[ShippingMethod]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[ShippingMethodStore]...';

GO
CREATE TABLE [dbo].[ShippingMethodStore] (
    [Id]               INT      IDENTITY (1, 1) NOT NULL,
    [StoreId]          INT      NOT NULL,
    [ShippingMethodId] INT      NOT NULL,
    [CreatedOn]        DATETIME NULL,
    [UpdatedOn]        DATETIME NOT NULL,
    CONSTRAINT [PK_StoreShippingMethod] PRIMARY KEY CLUSTERED ([StoreId] ASC, [ShippingMethodId] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingMethodToCountryMap]...';

GO
CREATE TABLE [dbo].[ShippingMethodToCountryMap] (
    [ShippingMethodID] INT      NOT NULL,
    [StoreID]          INT      NOT NULL,
    [CountryID]        INT      NOT NULL,
    [CreatedOn]        DATETIME NOT NULL,
    [UpdatedOn]        DATETIME NOT NULL,
    CONSTRAINT [PK_ShippingMethodToCountryMap] PRIMARY KEY CLUSTERED ([ShippingMethodID] ASC, [CountryID] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingMethodToStateMap]...';

GO
CREATE TABLE [dbo].[ShippingMethodToStateMap] (
    [ShippingMethodID] INT      NOT NULL,
    [StoreID]          INT      NOT NULL,
    [StateID]          INT      NOT NULL,
    [CreatedOn]        DATETIME NOT NULL,
    [UpdatedOn]        DATETIME NOT NULL,
    CONSTRAINT [PK_ShippingMethodToStateMap] PRIMARY KEY CLUSTERED ([ShippingMethodID] ASC, [StateID] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingMethodToZoneMap]...';

GO
CREATE TABLE [dbo].[ShippingMethodToZoneMap] (
    [ShippingMethodID] INT      NOT NULL,
    [StoreID]          INT      NOT NULL,
    [ShippingZoneID]   INT      NOT NULL,
    [CreatedOn]        DATETIME NOT NULL,
    [UpdatedOn]        DATETIME NOT NULL,
    CONSTRAINT [PK_ShippingMethodToZoneMap] PRIMARY KEY CLUSTERED ([ShippingMethodID] ASC, [ShippingZoneID] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingTotalByZone]...';

GO
CREATE TABLE [dbo].[ShippingTotalByZone] (
    [RowGUID]          UNIQUEIDENTIFIER NOT NULL,
    [StoreID]          INT              NOT NULL,
    [ShippingMethodID] INT              NOT NULL,
    [LowValue]         MONEY            NOT NULL,
    [HighValue]        MONEY            NOT NULL,
    [ShippingZoneID]   INT              NOT NULL,
    [ShippingCharge]   MONEY            NOT NULL,
    [CreatedOn]        DATETIME         NOT NULL,
    [UpdatedOn]        DATETIME         NOT NULL
);

GO
PRINT N'Creating [dbo].[ShippingTotalByZone].[IX_ShippingTotalByZone_RowGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingTotalByZone_RowGUID]
    ON [dbo].[ShippingTotalByZone]([RowGUID] ASC);

GO
PRINT N'Creating [dbo].[ShippingTotalByZone].[IX_ShippingTotalByZone_ShippingZoneID_LowValue_HighValue]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingTotalByZone_ShippingZoneID_LowValue_HighValue]
    ON [dbo].[ShippingTotalByZone]([ShippingZoneID] ASC, [LowValue] ASC, [HighValue] ASC);

GO
PRINT N'Creating [dbo].[ShippingWeightByZone]...';

GO
CREATE TABLE [dbo].[ShippingWeightByZone] (
    [RowGUID]          UNIQUEIDENTIFIER NOT NULL,
    [ShippingMethodID] INT              NOT NULL,
    [LowValue]         MONEY            NOT NULL,
    [HighValue]        MONEY            NOT NULL,
    [ShippingZoneID]   INT              NOT NULL,
    [ShippingCharge]   MONEY            NOT NULL,
    [CreatedOn]        DATETIME         NOT NULL,
    [UpdatedOn]        DATETIME         NOT NULL,
    [StoreID]          INT              NOT NULL
);

GO
PRINT N'Creating [dbo].[ShippingWeightByZone].[IX_ShippingWeightByZone_RowGUID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingWeightByZone_RowGUID]
    ON [dbo].[ShippingWeightByZone]([RowGUID] ASC);

GO
PRINT N'Creating [dbo].[ShippingWeightByZone].[IX_ShippingWeightByZone_ShippingZoneID_LowValue_HighValue]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingWeightByZone_ShippingZoneID_LowValue_HighValue]
    ON [dbo].[ShippingWeightByZone]([ShippingZoneID] ASC, [LowValue] ASC, [HighValue] ASC);

GO
PRINT N'Creating [dbo].[ShippingZone]...';

GO
CREATE TABLE [dbo].[ShippingZone] (
    [ShippingZoneID]   INT              IDENTITY (1, 1) NOT NULL,
    [ShippingZoneGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (400)   NOT NULL,
    [ZipCodes]         NVARCHAR (MAX)   NULL,
    [DisplayOrder]     INT              NOT NULL,
    [ExtensionData]    NVARCHAR (MAX)   NULL,
    [Deleted]          TINYINT          NOT NULL,
    [CreatedOn]        DATETIME         NOT NULL,
    [CountryID]        INT              NULL,
    [UpdatedOn]        DATETIME         NOT NULL,
    CONSTRAINT [PK_ShippingZone] PRIMARY KEY CLUSTERED ([ShippingZoneID] ASC)
);

GO
PRINT N'Creating [dbo].[ShippingZone].[UIX_ShippingZone_ShippingZoneGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_ShippingZone_ShippingZoneGUID]
    ON [dbo].[ShippingZone]([ShippingZoneGUID] ASC);

GO
PRINT N'Creating [dbo].[ShippingZone].[IX_ShippingZone_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingZone_DisplayOrder]
    ON [dbo].[ShippingZone]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[ShippingZone].[IX_ShippingZone_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShippingZone_Deleted]
    ON [dbo].[ShippingZone]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart]...';

GO
CREATE TABLE [dbo].[ShoppingCart] (
    [ShoppingCartRecID]            INT              IDENTITY (1, 1) NOT NULL,
    [ShoppingCartRecGUID]          UNIQUEIDENTIFIER NOT NULL,
    [StoreID]                      INT              NOT NULL,
    [CustomerID]                   INT              NOT NULL,
    [ProductSKU]                   NVARCHAR (100)   NULL,
    [ProductPrice]                 MONEY            NULL,
    [ProductWeight]                MONEY            NULL,
    [ProductID]                    INT              NOT NULL,
    [VariantID]                    INT              NOT NULL,
    [Quantity]                     INT              NOT NULL,
    [RequiresCount]                INT              NOT NULL,
    [ChosenColor]                  NVARCHAR (100)   NULL,
    [ChosenColorSKUModifier]       NVARCHAR (50)    NULL,
    [ChosenSize]                   NVARCHAR (100)   NULL,
    [ChosenSizeSKUModifier]        NVARCHAR (50)    NULL,
    [IsTaxable]                    TINYINT          NOT NULL,
    [IsShipSeparately]             TINYINT          NOT NULL,
    [IsDownload]                   TINYINT          NOT NULL,
    [DownloadLocation]             NVARCHAR (MAX)   NULL,
    [FreeShipping]                 TINYINT          NOT NULL,
    [CreatedOn]                    DATETIME         NOT NULL,
    [ProductDimensions]            NVARCHAR (100)   NULL,
    [CartType]                     INT              NOT NULL,
    [IsSecureAttachment]           TINYINT          NOT NULL,
    [TextOption]                   NVARCHAR (MAX)   NULL,
    [NextRecurringShipDate]        DATETIME         NULL,
    [RecurringIndex]               INT              NOT NULL,
    [OriginalRecurringOrderNumber] INT              NULL,
    [BillingAddressID]             INT              NULL,
    [ShippingAddressID]            INT              NULL,
    [ShippingMethodID]             INT              NULL,
    [ShippingMethod]               NVARCHAR (MAX)   NULL,
    [DistributorID]                INT              NULL,
    [Notes]                        NVARCHAR (MAX)   NULL,
    [IsUpsell]                     TINYINT          NOT NULL,
    [RecurringInterval]            INT              NOT NULL,
    [RecurringIntervalType]        INT              NOT NULL,
    [ExtensionData]                NVARCHAR (MAX)   NULL,
    [CustomerEntersPrice]          TINYINT          NOT NULL,
    [IsAKit]                       TINYINT          NULL,
    [IsKit2]                       TINYINT          NOT NULL,
    [IsSystem]                     TINYINT          NULL,
    [TaxClassID]                   INT              NOT NULL,
    [TaxRate]                      MONEY            NOT NULL,
    [RecurringSubscriptionID]      NVARCHAR (100)   NOT NULL,
    [IsGift]                       BIT              NOT NULL,
    [GTIN]                         NVARCHAR (14)    NULL,
    [UpdatedOn]                    DATETIME         NOT NULL,
    CONSTRAINT [PK_ShoppingCart] PRIMARY KEY CLUSTERED ([ShoppingCartRecID] ASC)
);

GO
PRINT N'Creating [dbo].[ShoppingCart].[UIX_ShoppingCart_ShoppingCartRecGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_ShoppingCart_ShoppingCartRecGUID]
    ON [dbo].[ShoppingCart]([ShoppingCartRecGUID] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart].[IX_ShoppingCart_CustomerID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShoppingCart_CustomerID]
    ON [dbo].[ShoppingCart]([CustomerID] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart].[IX_ShoppingCart_CustomerID_CartType]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShoppingCart_CustomerID_CartType]
    ON [dbo].[ShoppingCart]([CustomerID] ASC, [CartType] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart].[IX_ShoppingCart_ProductID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShoppingCart_ProductID]
    ON [dbo].[ShoppingCart]([ProductID] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart].[IX_ShoppingCart_VariantID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShoppingCart_VariantID]
    ON [dbo].[ShoppingCart]([VariantID] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart].[IX_ShoppingCart_ProductID_VariantID_ChosenColor_ChosenSize]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShoppingCart_ProductID_VariantID_ChosenColor_ChosenSize]
    ON [dbo].[ShoppingCart]([ProductID] ASC, [VariantID] ASC, [ChosenColor] ASC, [ChosenSize] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart].[IX_ShoppingCart_CreatedOn]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShoppingCart_CreatedOn]
    ON [dbo].[ShoppingCart]([CreatedOn] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart].[IX_ShoppingCart_CartType]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShoppingCart_CartType]
    ON [dbo].[ShoppingCart]([CartType] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart].[IX_ShoppingCart_CartType_RecurringSubscriptionID]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShoppingCart_CartType_RecurringSubscriptionID]
    ON [dbo].[ShoppingCart]([CartType] ASC, [RecurringSubscriptionID] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart].[IX_ShoppingCart_NextRecurringShipDate]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShoppingCart_NextRecurringShipDate]
    ON [dbo].[ShoppingCart]([NextRecurringShipDate] ASC);

GO
PRINT N'Creating [dbo].[ShoppingCart].[IX_ShoppingCart_RecurringIndex]...';

GO
CREATE NONCLUSTERED INDEX [IX_ShoppingCart_RecurringIndex]
    ON [dbo].[ShoppingCart]([RecurringIndex] ASC);

GO
PRINT N'Creating [dbo].[State]...';

GO
CREATE TABLE [dbo].[State] (
    [StateID]       INT              IDENTITY (1, 1) NOT NULL,
    [StateGUID]     UNIQUEIDENTIFIER NOT NULL,
    [Name]          NVARCHAR (100)   NOT NULL,
    [CountryID]     INT              NULL,
    [Abbreviation]  NVARCHAR (5)     NOT NULL,
    [Published]     TINYINT          NOT NULL,
    [DisplayOrder]  INT              NOT NULL,
    [ExtensionData] NVARCHAR (MAX)   NULL,
    [CreatedOn]     DATETIME         NOT NULL,
    [UpdatedOn]     DATETIME         NOT NULL,
    CONSTRAINT [PK_State] PRIMARY KEY CLUSTERED ([StateID] ASC)
);

GO
PRINT N'Creating [dbo].[State].[UIX_State_StateGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_State_StateGUID]
    ON [dbo].[State]([StateGUID] ASC);

GO
PRINT N'Creating [dbo].[State].[UIX_State_Country_Abbrv]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_State_Country_Abbrv]
    ON [dbo].[State]([CountryID] ASC, [Abbreviation] ASC);

GO
PRINT N'Creating [dbo].[State].[IX_State_DisplayOrder]...';

GO
CREATE NONCLUSTERED INDEX [IX_State_DisplayOrder]
    ON [dbo].[State]([DisplayOrder] ASC);

GO
PRINT N'Creating [dbo].[State].[IX_State_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_State_Name]
    ON [dbo].[State]([Name] ASC);

GO
PRINT N'Creating [dbo].[State].[IX_State_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_State_DisplayOrder_Name]
    ON [dbo].[State]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[State].[IX_State_CountryID]...';

GO
CREATE NONCLUSTERED INDEX [IX_State_CountryID]
    ON [dbo].[State]([CountryID] ASC);

GO
PRINT N'Creating [dbo].[StateTaxRate]...';

GO
CREATE TABLE [dbo].[StateTaxRate] (
    [StateTaxID] INT      IDENTITY (1, 1) NOT NULL,
    [StateID]    INT      NOT NULL,
    [TaxClassID] INT      NOT NULL,
    [TaxRate]    MONEY    NULL,
    [CreatedOn]  DATETIME NOT NULL,
    [UpdatedOn]  DATETIME NOT NULL,
    CONSTRAINT [PK_StateTaxRate] PRIMARY KEY CLUSTERED ([StateTaxID] ASC)
);

GO
PRINT N'Creating [dbo].[StateTaxRate].[UIX_StateTaxRate_StateID_TaxClassID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_StateTaxRate_StateID_TaxClassID]
    ON [dbo].[StateTaxRate]([StateID] ASC, [TaxClassID] ASC);

GO
PRINT N'Creating [dbo].[Store]...';

GO
CREATE TABLE [dbo].[Store] (
    [StoreID]                  INT              IDENTITY (1, 1) NOT NULL,
    [StoreGUID]                UNIQUEIDENTIFIER NOT NULL,
    [ProductionURI]            NVARCHAR (255)   NULL,
    [StagingURI]               NVARCHAR (255)   NULL,
    [DevelopmentURI]           NVARCHAR (255)   NULL,
    [Name]                     NVARCHAR (400)   NOT NULL,
    [Summary]                  NVARCHAR (MAX)   NULL,
    [Description]              NVARCHAR (MAX)   NULL,
    [Published]                TINYINT          NOT NULL,
    [Deleted]                  TINYINT          NOT NULL,
    [SkinID]                   INT              NOT NULL,
    [IsDefault]                TINYINT          NOT NULL,
    [CreatedOn]                DATETIME         NOT NULL,
    [UpdatedOn]                DATETIME         NOT NULL,
    [ProductionDirectoryPath]  NVARCHAR (MAX)   NULL,
    [StagingDirectoryPath]     NVARCHAR (MAX)   NULL,
    [DevelopmentDirectoryPath] NVARCHAR (MAX)   NULL,
    [ProductionPort]           NVARCHAR(10)		NULL,
    [StagingPort]              NVARCHAR(10)		NULL,
    [DevelopmentPort]		   NVARCHAR(10)		NULL,
    CONSTRAINT [PK_Store] PRIMARY KEY CLUSTERED ([StoreID] ASC)
);

GO
PRINT N'Creating [dbo].[StringResource]...';

GO
CREATE TABLE [dbo].[StringResource] (
    [StringResourceID]   INT              IDENTITY (1, 1) NOT NULL,
    [StringResourceGUID] UNIQUEIDENTIFIER NOT NULL,
    [StoreID]            INT              NOT NULL,
    [Name]               NVARCHAR (100)   NOT NULL,
    [LocaleSetting]      NVARCHAR (10)    NOT NULL,
    [ConfigValue]        NVARCHAR (2500)  NULL,
    [Modified]           TINYINT          NOT NULL,
    [CreatedOn]          DATETIME         NOT NULL,
    [UpdatedOn]          DATETIME         NOT NULL,
    CONSTRAINT [PK_StringResource] PRIMARY KEY CLUSTERED ([StringResourceID] ASC)
);

GO
PRINT N'Creating [dbo].[StringResource].[UIX_StringResource_Name_LocaleSetting_StoreId]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_StringResource_Name_LocaleSetting_StoreId]
    ON [dbo].[StringResource]([Name] ASC, [LocaleSetting] ASC, [StoreID] ASC);

GO
PRINT N'Creating [dbo].[TaxClass]...';

GO
CREATE TABLE [dbo].[TaxClass] (
    [TaxClassID]   INT              IDENTITY (1, 1) NOT NULL,
    [TaxClassGUID] UNIQUEIDENTIFIER NOT NULL,
    [Name]         NVARCHAR (400)   NOT NULL,
    [TaxCode]      NVARCHAR (100)   NOT NULL,
    [DisplayOrder] INT              NOT NULL,
    [CreatedOn]    DATETIME         NOT NULL,
    [UpdatedOn]    DATETIME         NOT NULL,
    CONSTRAINT [PK_TaxClass] PRIMARY KEY CLUSTERED ([TaxClassID] ASC)
);

GO
PRINT N'Creating [dbo].[Topic]...';

GO
CREATE TABLE [dbo].[Topic] (
    [TopicID]            INT              IDENTITY (1, 1) NOT NULL,
    [TopicGUID]          UNIQUEIDENTIFIER NOT NULL,
    [Name]               NVARCHAR (400)   NOT NULL,
    [Title]              NVARCHAR (MAX)   NULL,
    [Description]        NVARCHAR (MAX)   NULL,
    [SETitle]            NVARCHAR (MAX)   NULL,
    [SEDescription]      NVARCHAR (MAX)   NULL,
    [SEKeywords]         NVARCHAR (MAX)   NULL,
    [Password]           NVARCHAR (100)   NULL,
    [RequiresDisclaimer] TINYINT          NULL,
    [XmlPackage]         NVARCHAR (100)   NULL,
    [ExtensionData]      NVARCHAR (MAX)   NULL,
    [ShowInSiteMap]      TINYINT          NOT NULL,
    [SkinID]             INT              NOT NULL,
    [HTMLOk]             TINYINT          NOT NULL,
    [Deleted]            TINYINT          NOT NULL,
    [StoreID]            INT              NOT NULL,
    [DisplayOrder]       INT              NOT NULL,
    [CreatedOn]          DATETIME         NOT NULL,
    [Published]          BIT              NOT NULL,
    [UpdatedOn]          DATETIME         NOT NULL,
    [IsFrequent]         BIT              NULL,
    CONSTRAINT [PK_Topic] PRIMARY KEY CLUSTERED ([TopicID] ASC)
);

GO
PRINT N'Creating [dbo].[Topic].[UIX_Topic_TopicGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Topic_TopicGUID]
    ON [dbo].[Topic]([TopicGUID] ASC);

GO
PRINT N'Creating [dbo].[Topic].[IX_Topic_Deleted]...';

GO
CREATE NONCLUSTERED INDEX [IX_Topic_Deleted]
    ON [dbo].[Topic]([Deleted] ASC);

GO
PRINT N'Creating [dbo].[Topic].[IX_Topic_ShowInSiteMap]...';

GO
CREATE NONCLUSTERED INDEX [IX_Topic_ShowInSiteMap]
    ON [dbo].[Topic]([ShowInSiteMap] ASC);

GO
PRINT N'Creating [dbo].[TopicStore]...';

GO
CREATE TABLE [dbo].[TopicStore] (
    [ID]        INT      IDENTITY (1, 1) NOT NULL,
    [TopicID]   INT      NOT NULL,
    [StoreID]   INT      NOT NULL,
    [CreatedOn] DATETIME NOT NULL,
    [UpdatedOn] DATETIME NOT NULL,
    CONSTRAINT [PK_TopicStore] PRIMARY KEY CLUSTERED ([TopicID] ASC, [StoreID] ASC)
);

GO
PRINT N'Creating [dbo].[Vector]...';

GO
CREATE TABLE [dbo].[Vector] (
    [VectorID]               INT              IDENTITY (1, 1) NOT NULL,
    [VectorGUID]             UNIQUEIDENTIFIER NOT NULL,
    [Name]                   NVARCHAR (400)   NOT NULL,
    [SEName]                 NVARCHAR (100)   NULL,
    [SEKeywords]             NVARCHAR (MAX)   NULL,
    [SEDescription]          NVARCHAR (MAX)   NULL,
    [SETitle]                NVARCHAR (MAX)   NULL,
    [SEAltText]              NVARCHAR (MAX)   NULL,
    [Address1]               NVARCHAR (100)   NULL,
    [Address2]               NVARCHAR (100)   NULL,
    [Suite]                  NVARCHAR (25)    NULL,
    [City]                   NVARCHAR (100)   NULL,
    [State]                  NVARCHAR (100)   NULL,
    [ZipCode]                NVARCHAR (10)    NULL,
    [Country]                NVARCHAR (100)   NULL,
    [Phone]                  NVARCHAR (25)    NULL,
    [FAX]                    NVARCHAR (25)    NULL,
    [URL]                    NVARCHAR (255)   NULL,
    [Email]                  NVARCHAR (100)   NULL,
    [Summary]                NVARCHAR (MAX)   NULL,
    [Description]            NVARCHAR (MAX)   NULL,
    [Notes]                  NVARCHAR (MAX)   NULL,
    [QuantityDiscountID]     INT              NULL,
    [SortByLooks]            TINYINT          NOT NULL,
    [XmlPackage]             NVARCHAR (100)   NULL,
    [ColWidth]               INT              NOT NULL,
    [DisplayOrder]           INT              NOT NULL,
    [ExtensionData]          NVARCHAR (MAX)   NULL,
    [NotificationXmlPackage] NVARCHAR (100)   NULL,
    [ImageFilenameOverride]  NVARCHAR (MAX)   NULL,
    [ParentVectorID]         INT              NOT NULL,
    [Published]              TINYINT          NOT NULL,
    [Wholesale]              TINYINT          NOT NULL,
    [IsImport]               TINYINT          NOT NULL,
    [Deleted]                TINYINT          NOT NULL,
    [CreatedOn]              DATETIME         NOT NULL,
    [PageSize]               INT              NOT NULL,
    [TaxClassID]             INT              NOT NULL,
    [SkinID]                 INT              NOT NULL,
    [TemplateName]           NVARCHAR (50)    NOT NULL,
    [UpdatedOn]              DATETIME         NOT NULL,
    CONSTRAINT [PK_Vector] PRIMARY KEY CLUSTERED ([VectorID] ASC)
);

GO
PRINT N'Creating [dbo].[Vector].[UIX_Vector_VectorGUID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_Vector_VectorGUID]
    ON [dbo].[Vector]([VectorGUID] ASC);

GO
PRINT N'Creating [dbo].[Vector].[IX_Vector_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Vector_Name]
    ON [dbo].[Vector]([Name] ASC);

GO
PRINT N'Creating [dbo].[Vector].[IX_Vector_DisplayOrder_Name]...';

GO
CREATE NONCLUSTERED INDEX [IX_Vector_DisplayOrder_Name]
    ON [dbo].[Vector]([DisplayOrder] ASC, [Name] ASC);

GO
PRINT N'Creating [dbo].[ZipTaxRate]...';

GO
CREATE TABLE [dbo].[ZipTaxRate] (
    [ZipTaxID]   INT           IDENTITY (1, 1) NOT NULL,
    [ZipCode]    NVARCHAR (10) NOT NULL,
    [TaxClassID] INT           NOT NULL,
    [TaxRate]    MONEY         NULL,
    [CreatedOn]  DATETIME      NOT NULL,
    [CountryID]  INT           NOT NULL,
    [UpdatedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_ZipTaxRate] PRIMARY KEY CLUSTERED ([ZipTaxID] ASC)
);

GO
PRINT N'Creating [dbo].[ZipTaxRate].[UIX_ZipTaxRate_ZipCode_TaxClassID_CountryID]...';

GO
CREATE UNIQUE NONCLUSTERED INDEX [UIX_ZipTaxRate_ZipCode_TaxClassID_CountryID]
    ON [dbo].[ZipTaxRate]([ZipCode] ASC, [TaxClassID] ASC, [CountryID] ASC);

GO
PRINT N'Creating [dbo].[SignifydOrderStatus]...'

create table [dbo].[SignifydOrderStatus](
	[SignifydOrderStatusID] int identity(1,1) NOT NULL,
	[OrderNumber] int NOT NULL,
	[GuaranteedStatus] nvarchar(max) not null,
	[InvestigationID] int not null
	constraint [PK_SignifydOrderStatus] primary key clustered ([SignifydOrderStatusID] asc)
);

GO
PRINT N'Creating [dbo].[DF_Address_UpdatedOn]...';

GO
CREATE TABLE [dbo].[CurrencyExceptions] (
    [ID]                    INT              IDENTITY (1, 1) NOT NULL,
	[CurrencyCode]          NVARCHAR(10)     NULL,
	[AmountToSmallestUnit]  INT              NOT NULL,
    [CreatedOn]             DATETIME         NOT NULL,
    [UpdatedOn]             DATETIME         NOT NULL
);

GO
PRINT N'Creating [dbo].[CurrencyExceptions]...';

GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Address_AddressGUID]...';

GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_AddressGUID] DEFAULT (newid()) FOR [AddressGUID];

GO
PRINT N'Creating [dbo].[DF_Address_ResidenceType]...';

GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_ResidenceType] DEFAULT ((0)) FOR [ResidenceType];

GO
PRINT N'Creating [dbo].[DF_Address_Deleted]...';

GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Address_CreatedOn]...';

GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Address_Crypt]...';

GO
ALTER TABLE [dbo].[Address]
    ADD CONSTRAINT [DF_Address_Crypt] DEFAULT ((1)) FOR [Crypt];

GO
PRINT N'Creating [dbo].[DF_Affiliate_AffiliateGUID]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_AffiliateGUID] DEFAULT (newid()) FOR [AffiliateGUID];

GO
PRINT N'Creating [dbo].[DF_Affiliate_SaltKey]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_SaltKey] DEFAULT ((0)) FOR [SaltKey];

GO
PRINT N'Creating [dbo].[DF_Affiliate_IsOnline]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_IsOnline] DEFAULT ((0)) FOR [IsOnline];

GO
PRINT N'Creating [dbo].[DF_Affiliate_DefaultSkinID]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_DefaultSkinID] DEFAULT ((1)) FOR [DefaultSkinID];

GO
PRINT N'Creating [dbo].[DF_Affiliate_ParentAffiliateID]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_ParentAffiliateID] DEFAULT ((0)) FOR [ParentAffiliateID];

GO
PRINT N'Creating [dbo].[DF_Affiliate_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Affiliate_Published]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Affiliate_Wholesale]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_Affiliate_Deleted]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Affiliate_CreatedOn]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Affiliate_SkinID]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Affiliate_TemplateName]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_TemplateName] DEFAULT ('') FOR [TemplateName];

GO
PRINT N'Creating [dbo].[DF_Affiliate_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Affiliate]
    ADD CONSTRAINT [DF_Affiliate_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_AffiliateActivity_AffiliateActivityGUID]...';

GO
ALTER TABLE [dbo].[AffiliateActivity]
    ADD CONSTRAINT [DF_AffiliateActivity_AffiliateActivityGUID] DEFAULT (newid()) FOR [AffiliateActivityGUID];

GO
PRINT N'Creating [dbo].[DF_AffiliateActivity_ActivityDate]...';

GO
ALTER TABLE [dbo].[AffiliateActivity]
    ADD CONSTRAINT [DF_AffiliateActivity_ActivityDate] DEFAULT (getdate()) FOR [ActivityDate];

GO
PRINT N'Creating [dbo].[DF_AffiliateActivity_CreatedOn]...';

GO
ALTER TABLE [dbo].[AffiliateActivity]
    ADD CONSTRAINT [DF_AffiliateActivity_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_AffiliateActivity_UpdatedOn]...';

GO
ALTER TABLE [dbo].[AffiliateActivity]
    ADD CONSTRAINT [DF_AffiliateActivity_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_AffiliateCommissions_RowGUID]...';

GO
ALTER TABLE [dbo].[AffiliateCommissions]
    ADD CONSTRAINT [DF_AffiliateCommissions_RowGUID] DEFAULT (newid()) FOR [RowGUID];

GO
PRINT N'Creating [dbo].[DF_AffiliateCommissions_LowValue]...';

GO
ALTER TABLE [dbo].[AffiliateCommissions]
    ADD CONSTRAINT [DF_AffiliateCommissions_LowValue] DEFAULT ((0)) FOR [LowValue];

GO
PRINT N'Creating [dbo].[DF_AffiliateCommissions_HighValue]...';

GO
ALTER TABLE [dbo].[AffiliateCommissions]
    ADD CONSTRAINT [DF_AffiliateCommissions_HighValue] DEFAULT ((9999.99)) FOR [HighValue];

GO
PRINT N'Creating [dbo].[DF_AffiliateCommissions_Commission]...';

GO
ALTER TABLE [dbo].[AffiliateCommissions]
    ADD CONSTRAINT [DF_AffiliateCommissions_Commission] DEFAULT ((0.0)) FOR [Commission];

GO
PRINT N'Creating [dbo].[DF_AffiliateCommissions_CreatedOn]...';

GO
ALTER TABLE [dbo].[AffiliateCommissions]
    ADD CONSTRAINT [DF_AffiliateCommissions_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_AffiliateCommissions_UpdatedOn]...';

GO
ALTER TABLE [dbo].[AffiliateCommissions]
    ADD CONSTRAINT [DF_AffiliateCommissions_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_AffiliateStore_AffiliateID]...';

GO
ALTER TABLE [dbo].[AffiliateStore]
    ADD CONSTRAINT [DF_AffiliateStore_AffiliateID] DEFAULT ((0)) FOR [AffiliateID];

GO
PRINT N'Creating [dbo].[DF_AffiliateStore_StoreID]...';

GO
ALTER TABLE [dbo].[AffiliateStore]
    ADD CONSTRAINT [DF_AffiliateStore_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_AffiliateStore_CreatedOn]...';

GO
ALTER TABLE [dbo].[AffiliateStore]
    ADD CONSTRAINT [DF_AffiliateStore_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_AffiliateStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[AffiliateStore]
    ADD CONSTRAINT [DF_AffiliateStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_AppConfig_UpdatedOn]...';

GO
ALTER TABLE [dbo].[AppConfig]
    ADD CONSTRAINT [DF_AppConfig_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_AppConfig_AppConfigGUID]...';

GO
ALTER TABLE [dbo].[AppConfig]
    ADD CONSTRAINT [DF_AppConfig_AppConfigGUID] DEFAULT (newid()) FOR [AppConfigGUID];

GO
PRINT N'Creating [dbo].[DF_AppConfig_StoreID]...';

GO
ALTER TABLE [dbo].[AppConfig]
    ADD CONSTRAINT [DF_AppConfig_StoreID] DEFAULT ((0)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_AppConfig_SuperOnly]...';

GO
ALTER TABLE [dbo].[AppConfig]
    ADD CONSTRAINT [DF_AppConfig_SuperOnly] DEFAULT ((0)) FOR [SuperOnly];

GO
PRINT N'Creating [dbo].[DF_AppConfig_Hidden]...';

GO
ALTER TABLE [dbo].[AppConfig]
    ADD CONSTRAINT [DF_AppConfig_Hidden] DEFAULT ((0)) FOR [Hidden];

GO
PRINT N'Creating [dbo].[DF_AppConfig_CreatedOn]...';

GO
ALTER TABLE [dbo].[AppConfig]
    ADD CONSTRAINT [DF_AppConfig_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_aspdnsf_SysLog_UpdatedOn]...';

GO
ALTER TABLE [dbo].[aspdnsf_SysLog]
    ADD CONSTRAINT [DF_aspdnsf_SysLog_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_aspdnsf_SysLog_SysLogGUID]...';

GO
ALTER TABLE [dbo].[aspdnsf_SysLog]
    ADD CONSTRAINT [DF_aspdnsf_SysLog_SysLogGUID] DEFAULT (newid()) FOR [SysLogGUID];

GO
PRINT N'Creating [dbo].[DF_aspdnsf_SysLog_CreatedOn]...';

GO
ALTER TABLE [dbo].[aspdnsf_SysLog]
    ADD CONSTRAINT [DF_aspdnsf_SysLog_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_AuditLog_CreatedOn]...';

GO
ALTER TABLE [dbo].[AuditLog]
    ADD CONSTRAINT [DF_AuditLog_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_AuditLog_UpdatedOn]...';

GO
ALTER TABLE [dbo].[AuditLog]
    ADD CONSTRAINT [DF_AuditLog_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_AuditLog_ActionDate]...';

GO
ALTER TABLE [dbo].[AuditLog]
    ADD CONSTRAINT [DF_AuditLog_ActionDate] DEFAULT (getdate()) FOR [ActionDate];

GO
PRINT N'Creating [dbo].[DF_BadWord_UpdatedOn]...';

GO
ALTER TABLE [dbo].[BadWord]
    ADD CONSTRAINT [DF_BadWord_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_BadWord_LocaleSetting]...';

GO
ALTER TABLE [dbo].[BadWord]
    ADD CONSTRAINT [DF_BadWord_LocaleSetting] DEFAULT ('en-US') FOR [LocaleSetting];

GO
PRINT N'Creating [dbo].[DF_BadWord_CreatedOn]...';

GO
ALTER TABLE [dbo].[BadWord]
    ADD CONSTRAINT [DF_BadWord_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Category_CategoryGUID]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_CategoryGUID] DEFAULT (newid()) FOR [CategoryGUID];

GO
PRINT N'Creating [dbo].[DF_Category_ParentCategoryID]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_ParentCategoryID] DEFAULT ((0)) FOR [ParentCategoryID];

GO
PRINT N'Creating [dbo].[DF_Category_ColWidth]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_ColWidth] DEFAULT ((4)) FOR [ColWidth];

GO
PRINT N'Creating [dbo].[DF_Category_SortByLooks]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_SortByLooks] DEFAULT ((0)) FOR [SortByLooks];

GO
PRINT N'Creating [dbo].[DF_Category_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Category_Published]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Category_Wholesale]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_Category_AllowSectionFiltering]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_AllowSectionFiltering] DEFAULT ((0)) FOR [AllowSectionFiltering];

GO
PRINT N'Creating [dbo].[DF_Category_AllowManufacturerFiltering]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_AllowManufacturerFiltering] DEFAULT ((0)) FOR [AllowManufacturerFiltering];

GO
PRINT N'Creating [dbo].[DF_Category_AllowProductTypeFiltering]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_AllowProductTypeFiltering] DEFAULT ((0)) FOR [AllowProductTypeFiltering];

GO
PRINT N'Creating [dbo].[DF_Category_ShowInProductBrowser]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_ShowInProductBrowser] DEFAULT ((1)) FOR [ShowInProductBrowser];

GO
PRINT N'Creating [dbo].[DF_Category_IsImport]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_IsImport] DEFAULT ((0)) FOR [IsImport];

GO
PRINT N'Creating [dbo].[DF_Category_Deleted]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Category_CreatedOn]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Category_PageSize]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_PageSize] DEFAULT ((20)) FOR [PageSize];

GO
PRINT N'Creating [dbo].[DF_Category_TaxClassID]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_Category_SkinID]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Category_TemplateName]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_TemplateName] DEFAULT ('') FOR [TemplateName];

GO
PRINT N'Creating [dbo].[DF_Category_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Category]
    ADD CONSTRAINT [DF_Category_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_CIM_AddressPaymentProfileMap_CreatedOn]...';

GO
ALTER TABLE [dbo].[CIM_AddressPaymentProfileMap]
    ADD CONSTRAINT [DF_CIM_AddressPaymentProfileMap_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating unnamed constraint on [dbo].[CIM_AddressPaymentProfileMap]...';

GO
ALTER TABLE [dbo].[CIM_AddressPaymentProfileMap]
    ADD DEFAULT ((0)) FOR [Primary];

GO
PRINT N'Creating [dbo].[DF_CIM_AddressPaymentProfileMap_UpdatedOn]...';

GO
ALTER TABLE [dbo].[CIM_AddressPaymentProfileMap]
    ADD CONSTRAINT [DF_CIM_AddressPaymentProfileMap_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Country_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Country]
    ADD CONSTRAINT [DF_Country_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Country_CountryGUID]...';

GO
ALTER TABLE [dbo].[Country]
    ADD CONSTRAINT [DF_Country_CountryGUID] DEFAULT (newid()) FOR [CountryGUID];

GO
PRINT N'Creating [dbo].[DF_Country_Published]...';

GO
ALTER TABLE [dbo].[Country]
    ADD CONSTRAINT [DF_Country_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Country_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Country]
    ADD CONSTRAINT [DF_Country_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Country_CreatedOn]...';

GO
ALTER TABLE [dbo].[Country]
    ADD CONSTRAINT [DF_Country_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Country_PostalCodeRequired]...';

GO
ALTER TABLE [dbo].[Country]
    ADD CONSTRAINT [DF_Country_PostalCodeRequired] DEFAULT ((1)) FOR [PostalCodeRequired];

GO
PRINT N'Creating [dbo].[DF_CountryTaxRate_TaxClassID]...';

GO
ALTER TABLE [dbo].[CountryTaxRate]
    ADD CONSTRAINT [DF_CountryTaxRate_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_CountryTaxRate_CreatedOn]...';

GO
ALTER TABLE [dbo].[CountryTaxRate]
    ADD CONSTRAINT [DF_CountryTaxRate_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_CountryTaxRate_UpdatedOn]...';

GO
ALTER TABLE [dbo].[CountryTaxRate]
    ADD CONSTRAINT [DF_CountryTaxRate_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Coupon_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Coupon_CouponGUID]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_CouponGUID] DEFAULT (newid()) FOR [CouponGUID];

GO
PRINT N'Creating [dbo].[DF_Coupon_StartDate]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_StartDate] DEFAULT (getdate()) FOR [StartDate];

GO
PRINT N'Creating [dbo].[DF_Coupon_DiscountPercent]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_DiscountPercent] DEFAULT ((0.0)) FOR [DiscountPercent];

GO
PRINT N'Creating [dbo].[DF_Coupon_DiscountAmount]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_DiscountAmount] DEFAULT ((0.0)) FOR [DiscountAmount];

GO
PRINT N'Creating [dbo].[DF_Coupon_DiscountIncludesFreeShipping]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_DiscountIncludesFreeShipping] DEFAULT ((0)) FOR [DiscountIncludesFreeShipping];

GO
PRINT N'Creating [dbo].[DF_Coupon_ExpiresOnFirstUseByAnyCustomer]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_ExpiresOnFirstUseByAnyCustomer] DEFAULT ((0)) FOR [ExpiresOnFirstUseByAnyCustomer];

GO
PRINT N'Creating [dbo].[DF_Coupon_ExpiresAfterOneUsageByEachCustomer]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_ExpiresAfterOneUsageByEachCustomer] DEFAULT ((1)) FOR [ExpiresAfterOneUsageByEachCustomer];

GO
PRINT N'Creating [dbo].[DF_Coupon_CouponType]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_CouponType] DEFAULT ((0)) FOR [CouponType];

GO
PRINT N'Creating [dbo].[DF_Coupon_NumUses]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_NumUses] DEFAULT ((0)) FOR [NumUses];

GO
PRINT N'Creating [dbo].[DF_Coupon_Deleted]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Coupon_CreatedOn]...';

GO
ALTER TABLE [dbo].[Coupon]
    ADD CONSTRAINT [DF_Coupon_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_CouponStore_CouponID]...';

GO
ALTER TABLE [dbo].[CouponStore]
    ADD CONSTRAINT [DF_CouponStore_CouponID] DEFAULT ((0)) FOR [CouponID];

GO
PRINT N'Creating [dbo].[DF_CouponStore_StoreID]...';

GO
ALTER TABLE [dbo].[CouponStore]
    ADD CONSTRAINT [DF_CouponStore_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_CouponStore_CreatedOn]...';

GO
ALTER TABLE [dbo].[CouponStore]
    ADD CONSTRAINT [DF_CouponStore_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_CouponStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[CouponStore]
    ADD CONSTRAINT [DF_CouponStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_CreditCardType_CardTypeGUID]...';

GO
ALTER TABLE [dbo].[CreditCardType]
    ADD CONSTRAINT [DF_CreditCardType_CardTypeGUID] DEFAULT (newid()) FOR [CardTypeGUID];

GO
PRINT N'Creating [dbo].[DF_CreditCardType_Accepted]...';

GO
ALTER TABLE [dbo].[CreditCardType]
    ADD CONSTRAINT [DF_CreditCardType_Accepted] DEFAULT ((1)) FOR [Accepted];

GO
PRINT N'Creating [dbo].[DF_CreditCardType_CreatedOn]...';

GO
ALTER TABLE [dbo].[CreditCardType]
    ADD CONSTRAINT [DF_CreditCardType_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_CreditCardType_UpdatedOn]...';

GO
ALTER TABLE [dbo].[CreditCardType]
    ADD CONSTRAINT [DF_CreditCardType_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Currency_CreatedOn]...';

GO
ALTER TABLE [dbo].[Currency]
    ADD CONSTRAINT [DF_Currency_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Currency_LastUpdated]...';

GO
ALTER TABLE [dbo].[Currency]
    ADD CONSTRAINT [DF_Currency_LastUpdated] DEFAULT (getdate()) FOR [LastUpdated];

GO
PRINT N'Creating [dbo].[DF_Currency_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Currency]
    ADD CONSTRAINT [DF_Currency_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Currency_CurrencyGUID]...';

GO
ALTER TABLE [dbo].[Currency]
    ADD CONSTRAINT [DF_Currency_CurrencyGUID] DEFAULT (newid()) FOR [CurrencyGUID];

GO
PRINT N'Creating [dbo].[DF_Currency_WasLiveRate]...';

GO
ALTER TABLE [dbo].[Currency]
    ADD CONSTRAINT [DF_Currency_WasLiveRate] DEFAULT ((0)) FOR [WasLiveRate];

GO
PRINT N'Creating [dbo].[DF_Currency_Published]...';

GO
ALTER TABLE [dbo].[Currency]
    ADD CONSTRAINT [DF_Currency_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Currency_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Currency]
    ADD CONSTRAINT [DF_Currency_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Customer_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Customer_CustomerGUID]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_CustomerGUID] DEFAULT (newid()) FOR [CustomerGUID];

GO
PRINT N'Creating [dbo].[DF_Customer_CustomerLevelID]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_CustomerLevelID] DEFAULT ((0)) FOR [CustomerLevelID];

GO
PRINT N'Creating [dbo].[DF_Customer_StoreID]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_Customer_RegisterDate]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_RegisterDate] DEFAULT (getdate()) FOR [RegisterDate];

GO
PRINT N'Creating [dbo].[DF_Customer_Email]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_Email] DEFAULT ('') FOR [Email];

GO
PRINT N'Creating [dbo].[DF_Customer_Password]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_Password] DEFAULT ('') FOR [Password];

GO
PRINT N'Creating [dbo].[DF_Customer_SaltKey]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_SaltKey] DEFAULT ((0)) FOR [SaltKey];

GO
PRINT N'Creating [dbo].[DF_Customer_SiteID]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_SiteID] DEFAULT ((1)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Customer_OkToEmail]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_OkToEmail] DEFAULT ((0)) FOR [OkToEmail];

GO
PRINT N'Creating [dbo].[DF_Customer_IsAdmin]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_IsAdmin] DEFAULT ((0)) FOR [IsAdmin];

GO
PRINT N'Creating [dbo].[DF_Customer_BillingEqualsShipping]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_BillingEqualsShipping] DEFAULT ((0)) FOR [BillingEqualsShipping];

GO
PRINT N'Creating [dbo].[DF_Customer_LocaleSetting]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_LocaleSetting] DEFAULT ('en-US') FOR [LocaleSetting];

GO
PRINT N'Creating [dbo].[DF_Customer_MicroPayBalance]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_MicroPayBalance] DEFAULT ((0.0)) FOR [MicroPayBalance];

GO
PRINT N'Creating [dbo].[DF_Customer_RecurringShippingMethodID]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_RecurringShippingMethodID] DEFAULT ((1)) FOR [RecurringShippingMethodID];

GO
PRINT N'Creating [dbo].[DF_Customer_Deleted]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Customer_CreatedOn]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_Customer_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_customer_VATSetting]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_customer_VATSetting] DEFAULT ((2)) FOR [VATSetting];

GO
PRINT N'Creating [dbo].[DF_customer_VATRegistrationID]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_customer_VATRegistrationID] DEFAULT ('') FOR [VATRegistrationID];

GO
PRINT N'Creating [dbo].[DF_customer_StoreCCInDB]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_customer_StoreCCInDB] DEFAULT ((1)) FOR [StoreCCInDB];

GO
PRINT N'Creating [dbo].[DF_customer_IsRegistered]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_customer_IsRegistered] DEFAULT ((0)) FOR [IsRegistered];

GO
PRINT N'Creating [dbo].[DF_customer_AdminCanViewCC]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_customer_AdminCanViewCC] DEFAULT ((0)) FOR [AdminCanViewCC];

GO
PRINT N'Creating [dbo].[DF_customer_PwdChanged]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_customer_PwdChanged] DEFAULT (getdate()) FOR [PwdChanged];

GO
PRINT N'Creating [dbo].[DF_customer_BadLoginCount]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_customer_BadLoginCount] DEFAULT ((0)) FOR [BadLoginCount];

GO
PRINT N'Creating [dbo].[DF_customer_Active]...';

GO
ALTER TABLE [dbo].[Customer]
    ADD CONSTRAINT [DF_customer_Active] DEFAULT ((1)) FOR [Active];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_LevelAllowsCoupons]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_LevelAllowsCoupons] DEFAULT ((1)) FOR [LevelAllowsCoupons];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_LevelDiscountsApplyToExtendedPrices]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_LevelDiscountsApplyToExtendedPrices] DEFAULT ((0)) FOR [LevelDiscountsApplyToExtendedPrices];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_LevelAllowsPO]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_LevelAllowsPO] DEFAULT ((1)) FOR [LevelAllowsPO];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_DisplayOrder]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_ParentCustomerLevelID]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_ParentCustomerLevelID] DEFAULT ((0)) FOR [ParentCustomerLevelID];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_Deleted]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_CreatedOn]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_SkinID]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_TemplateName]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_TemplateName] DEFAULT ('') FOR [TemplateName];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_UpdatedOn]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_CustomerLevelGUID]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_CustomerLevelGUID] DEFAULT (newid()) FOR [CustomerLevelGUID];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_LevelDiscountPercent]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_LevelDiscountPercent] DEFAULT ((0.0)) FOR [LevelDiscountPercent];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_LevelDiscountAmount]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_LevelDiscountAmount] DEFAULT ((0.0)) FOR [LevelDiscountAmount];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_LevelHasFreeShipping]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_LevelHasFreeShipping] DEFAULT ((0)) FOR [LevelHasFreeShipping];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_LevelAllowsQuantityDiscounts]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_LevelAllowsQuantityDiscounts] DEFAULT ((1)) FOR [LevelAllowsQuantityDiscounts];

GO
PRINT N'Creating [dbo].[DF_CustomerLevel_LevelHasNoTax]...';

GO
ALTER TABLE [dbo].[CustomerLevel]
    ADD CONSTRAINT [DF_CustomerLevel_LevelHasNoTax] DEFAULT ((0)) FOR [LevelHasNoTax];

GO
PRINT N'Creating [dbo].[DF_customersession_LastActivity]...';

GO
ALTER TABLE [dbo].[CustomerSession]
    ADD CONSTRAINT [DF_customersession_LastActivity] DEFAULT (getdate()) FOR [LastActivity];

GO
PRINT N'Creating [dbo].[DF_customersession_CustomerSessionGUID]...';

GO
ALTER TABLE [dbo].[CustomerSession]
    ADD CONSTRAINT [DF_customersession_CustomerSessionGUID] DEFAULT (newid()) FOR [CustomerSessionGUID];

GO
PRINT N'Creating [dbo].[DF_CustomerSession_CreatedOn]...';

GO
ALTER TABLE [dbo].[CustomerSession]
    ADD CONSTRAINT [DF_CustomerSession_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_CustomerSession_ExpiresOn]...';

GO
ALTER TABLE [dbo].[CustomerSession]
    ADD CONSTRAINT [DF_CustomerSession_ExpiresOn] DEFAULT (dateadd(month,(1),getdate())) FOR [ExpiresOn];

GO
PRINT N'Creating [dbo].[DF_CustomerSession_UpdatedOn]...';

GO
ALTER TABLE [dbo].[CustomerSession]
    ADD CONSTRAINT [DF_CustomerSession_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_CustomReport_CustomReportGUID]...';

GO
ALTER TABLE [dbo].[CustomReport]
    ADD CONSTRAINT [DF_CustomReport_CustomReportGUID] DEFAULT (newid()) FOR [CustomReportGUID];

GO
PRINT N'Creating [dbo].[DF_CustomReport_CreatedOn]...';

GO
ALTER TABLE [dbo].[CustomReport]
    ADD CONSTRAINT [DF_CustomReport_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_CustomReport_UpdatedOn]...';

GO
ALTER TABLE [dbo].[CustomReport]
    ADD CONSTRAINT [DF_CustomReport_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Distributor_DistributorGUID]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_DistributorGUID] DEFAULT (newid()) FOR [DistributorGUID];

GO
PRINT N'Creating [dbo].[DF_Distributor_SortByLooks]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_SortByLooks] DEFAULT ((0)) FOR [SortByLooks];

GO
PRINT N'Creating [dbo].[DF_Distributor_ColWidth]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_ColWidth] DEFAULT ((4)) FOR [ColWidth];

GO
PRINT N'Creating [dbo].[DF_Distributor_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Distributor_ParentDistributorID]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_ParentDistributorID] DEFAULT ((0)) FOR [ParentDistributorID];

GO
PRINT N'Creating [dbo].[DF_Distributor_Published]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Distributor_Wholesale]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_Distributor_IsImport]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_IsImport] DEFAULT ((0)) FOR [IsImport];

GO
PRINT N'Creating [dbo].[DF_Distributor_Deleted]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Distributor_CreatedOn]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Distributor_PageSize]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_PageSize] DEFAULT ((20)) FOR [PageSize];

GO
PRINT N'Creating [dbo].[DF_Distributor_TaxClassID]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_Distributor_SkinID]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Distributor_TemplateName]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_TemplateName] DEFAULT ('') FOR [TemplateName];

GO
PRINT N'Creating [dbo].[DF_Distributor_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Distributor]
    ADD CONSTRAINT [DF_Distributor_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Document_DocumentGUID]...';

GO
ALTER TABLE [dbo].[Document]
    ADD CONSTRAINT [DF_Document_DocumentGUID] DEFAULT (newid()) FOR [DocumentGUID];

GO
PRINT N'Creating [dbo].[DF_Document_RequiresRegistration]...';

GO
ALTER TABLE [dbo].[Document]
    ADD CONSTRAINT [DF_Document_RequiresRegistration] DEFAULT ((0)) FOR [RequiresRegistration];

GO
PRINT N'Creating [dbo].[DF_Document_Looks]...';

GO
ALTER TABLE [dbo].[Document]
    ADD CONSTRAINT [DF_Document_Looks] DEFAULT ((0)) FOR [Looks];

GO
PRINT N'Creating [dbo].[DF_Document_Published]...';

GO
ALTER TABLE [dbo].[Document]
    ADD CONSTRAINT [DF_Document_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Document_Wholesale]...';

GO
ALTER TABLE [dbo].[Document]
    ADD CONSTRAINT [DF_Document_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_Document_IsImport]...';

GO
ALTER TABLE [dbo].[Document]
    ADD CONSTRAINT [DF_Document_IsImport] DEFAULT ((0)) FOR [IsImport];

GO
PRINT N'Creating [dbo].[DF_Document_Deleted]...';

GO
ALTER TABLE [dbo].[Document]
    ADD CONSTRAINT [DF_Document_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Document_CreatedOn]...';

GO
ALTER TABLE [dbo].[Document]
    ADD CONSTRAINT [DF_Document_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Document_PageSize]...';

GO
ALTER TABLE [dbo].[Document]
    ADD CONSTRAINT [DF_Document_PageSize] DEFAULT ((20)) FOR [PageSize];

GO
PRINT N'Creating [dbo].[DF_Document_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Document]
    ADD CONSTRAINT [DF_Document_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_EntityStore_StoreID]...';

GO
ALTER TABLE [dbo].[EntityStore]
    ADD CONSTRAINT [DF_EntityStore_StoreID] DEFAULT ((0)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_EntityStore_EntityID]...';

GO
ALTER TABLE [dbo].[EntityStore]
    ADD CONSTRAINT [DF_EntityStore_EntityID] DEFAULT ((0)) FOR [EntityID];

GO
PRINT N'Creating [dbo].[DF_EntityStore_CreatedOn]...';

GO
ALTER TABLE [dbo].[EntityStore]
    ADD CONSTRAINT [DF_EntityStore_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_EntityStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[EntityStore]
    ADD CONSTRAINT [DF_EntityStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ErrorLog_CreatedOn]...';

GO
ALTER TABLE [dbo].[ErrorLog]
    ADD CONSTRAINT [DF_ErrorLog_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ErrorLog_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ErrorLog]
    ADD CONSTRAINT [DF_ErrorLog_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ErrorLog_errorDt]...';

GO
ALTER TABLE [dbo].[ErrorLog]
    ADD CONSTRAINT [DF_ErrorLog_errorDt] DEFAULT (getdate()) FOR [errorDt];

GO
PRINT N'Creating [dbo].[DF_ErrorMessage_CreatedOn]...';

GO
ALTER TABLE [dbo].[ErrorMessage]
    ADD CONSTRAINT [DF_ErrorMessage_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ErrorMessage_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ErrorMessage]
    ADD CONSTRAINT [DF_ErrorMessage_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_EventHandler_CreatedOn]...';

GO
ALTER TABLE [dbo].[EventHandler]
    ADD CONSTRAINT [DF_EventHandler_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_EventHandler_UpdatedOn]...';

GO
ALTER TABLE [dbo].[EventHandler]
    ADD CONSTRAINT [DF_EventHandler_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_EventHandler_Debug]...';

GO
ALTER TABLE [dbo].[EventHandler]
    ADD CONSTRAINT [DF_EventHandler_Debug] DEFAULT ((0)) FOR [Debug];

GO
PRINT N'Creating [dbo].[DF_EventHandler_Active]...';

GO
ALTER TABLE [dbo].[EventHandler]
    ADD CONSTRAINT [DF_EventHandler_Active] DEFAULT ((0)) FOR [Active];

GO
PRINT N'Creating [dbo].[DF_ExtendedPrice_ExtendedPriceGUID]...';

GO
ALTER TABLE [dbo].[ExtendedPrice]
    ADD CONSTRAINT [DF_ExtendedPrice_ExtendedPriceGUID] DEFAULT (newid()) FOR [ExtendedPriceGUID];

GO
PRINT N'Creating [dbo].[DF_ExtendedPrice_CustomerLevelID]...';

GO
ALTER TABLE [dbo].[ExtendedPrice]
    ADD CONSTRAINT [DF_ExtendedPrice_CustomerLevelID] DEFAULT ((0)) FOR [CustomerLevelID];

GO
PRINT N'Creating [dbo].[DF_ExtendedPrice_Price]...';

GO
ALTER TABLE [dbo].[ExtendedPrice]
    ADD CONSTRAINT [DF_ExtendedPrice_Price] DEFAULT ((0.0)) FOR [Price];

GO
PRINT N'Creating [dbo].[DF_ExtendedPrice_CreatedOn]...';

GO
ALTER TABLE [dbo].[ExtendedPrice]
    ADD CONSTRAINT [DF_ExtendedPrice_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ExtendedPrice_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ExtendedPrice]
    ADD CONSTRAINT [DF_ExtendedPrice_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_FailedTransaction_OrderNumber]...';

GO
ALTER TABLE [dbo].[FailedTransaction]
    ADD CONSTRAINT [DF_FailedTransaction_OrderNumber] DEFAULT ((0)) FOR [OrderNumber];

GO
PRINT N'Creating [dbo].[DF_FailedTransaction_OrderDate]...';

GO
ALTER TABLE [dbo].[FailedTransaction]
    ADD CONSTRAINT [DF_FailedTransaction_OrderDate] DEFAULT (getdate()) FOR [OrderDate];

GO
PRINT N'Creating [dbo].[DF_FailedTransaction_MaxMindScore]...';

GO
ALTER TABLE [dbo].[FailedTransaction]
    ADD CONSTRAINT [DF_FailedTransaction_MaxMindScore] DEFAULT ((-1)) FOR [MaxMindFraudScore];

GO
PRINT N'Creating [dbo].[DF_FailedTransaction_RecurringSubscriptionID]...';

GO
ALTER TABLE [dbo].[FailedTransaction]
    ADD CONSTRAINT [DF_FailedTransaction_RecurringSubscriptionID] DEFAULT ('') FOR [RecurringSubscriptionID];

GO
PRINT N'Creating [dbo].[DF_FailedTransaction_CustomerEMailed]...';

GO
ALTER TABLE [dbo].[FailedTransaction]
    ADD CONSTRAINT [DF_FailedTransaction_CustomerEMailed] DEFAULT ((0)) FOR [CustomerEMailed];

GO
PRINT N'Creating [dbo].[DF_FailedTransaction_CreatedOn]...';

GO
ALTER TABLE [dbo].[FailedTransaction]
    ADD CONSTRAINT [DF_FailedTransaction_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_FailedTransaction_UpdatedOn]...';

GO
ALTER TABLE [dbo].[FailedTransaction]
    ADD CONSTRAINT [DF_FailedTransaction_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Feed_FeedGUID]...';

GO
ALTER TABLE [dbo].[Feed]
    ADD CONSTRAINT [DF_Feed_FeedGUID] DEFAULT (newid()) FOR [FeedGUID];

GO
PRINT N'Creating [dbo].[DF_Feed_StoreID]...';

GO
ALTER TABLE [dbo].[Feed]
    ADD CONSTRAINT [DF_Feed_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_Feed_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Feed]
    ADD CONSTRAINT [DF_Feed_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Feed_CanAutoFTP]...';

GO
ALTER TABLE [dbo].[Feed]
    ADD CONSTRAINT [DF_Feed_CanAutoFTP] DEFAULT ((0)) FOR [CanAutoFTP];

GO
PRINT N'Creating [dbo].[DF_Feed_CreatedOn]...';

GO
ALTER TABLE [dbo].[Feed]
    ADD CONSTRAINT [DF_Feed_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Feed_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Feed]
    ADD CONSTRAINT [DF_Feed_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Genre_GenreGUID]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_GenreGUID] DEFAULT (newid()) FOR [GenreGUID];

GO
PRINT N'Creating [dbo].[DF_Genre_SortByLooks]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_SortByLooks] DEFAULT ((0)) FOR [SortByLooks];

GO
PRINT N'Creating [dbo].[DF_Genre_ColWidth]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_ColWidth] DEFAULT ((4)) FOR [ColWidth];

GO
PRINT N'Creating [dbo].[DF_Genre_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Genre_ParentGenreID]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_ParentGenreID] DEFAULT ((0)) FOR [ParentGenreID];

GO
PRINT N'Creating [dbo].[DF_Genre_Published]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Genre_Wholesale]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_Genre_IsImport]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_IsImport] DEFAULT ((0)) FOR [IsImport];

GO
PRINT N'Creating [dbo].[DF_Genre_Deleted]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Genre_CreatedOn]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Genre_PageSize]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_PageSize] DEFAULT ((20)) FOR [PageSize];

GO
PRINT N'Creating [dbo].[DF_Genre_TaxClassID]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_Genre_SkinID]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Genre_TemplateName]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_TemplateName] DEFAULT ('') FOR [TemplateName];

GO
PRINT N'Creating [dbo].[DF_Genre_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Genre]
    ADD CONSTRAINT [DF_Genre_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_GiftCard_GiftCardGUID]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_GiftCardGUID] DEFAULT (newid()) FOR [GiftCardGUID];

GO
PRINT N'Creating [dbo].[DF_GiftCard_OrderNumber]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_OrderNumber] DEFAULT ((0)) FOR [OrderNumber];

GO
PRINT N'Creating [dbo].[DF_GiftCard_UpdatedOn]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_GiftCard_ShoppingCartRecID]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_ShoppingCartRecID] DEFAULT ((0)) FOR [ShoppingCartRecID];

GO
PRINT N'Creating [dbo].[DF_GiftCard_ProductID]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_ProductID] DEFAULT ((0)) FOR [ProductID];

GO
PRINT N'Creating [dbo].[DF_GiftCard_VariantID]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_VariantID] DEFAULT ((0)) FOR [VariantID];

GO
PRINT N'Creating [dbo].[DF_GiftCard_InitialAmount]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_InitialAmount] DEFAULT ((0.0)) FOR [InitialAmount];

GO
PRINT N'Creating [dbo].[DF_GiftCard_Balance]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_Balance] DEFAULT ((0.0)) FOR [Balance];

GO
PRINT N'Creating [dbo].[DF_GiftCard_StartDate]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_StartDate] DEFAULT (getdate()) FOR [StartDate];

GO
PRINT N'Creating [dbo].[DF_GiftCard_ExpirationDate]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_ExpirationDate] DEFAULT (dateadd(year,(1),getdate())) FOR [ExpirationDate];

GO
PRINT N'Creating [dbo].[DF_GiftCard_GiftCardTypeID]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_GiftCardTypeID] DEFAULT ((101)) FOR [GiftCardTypeID];

GO
PRINT N'Creating [dbo].[DF_GiftCard_DisabledByAdministrator]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_DisabledByAdministrator] DEFAULT ((0)) FOR [DisabledByAdministrator];

GO
PRINT N'Creating [dbo].[DF_GiftCard_CreatedOn]...';

GO
ALTER TABLE [dbo].[GiftCard]
    ADD CONSTRAINT [DF_GiftCard_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_GiftCardStore_GiftCardID]...';

GO
ALTER TABLE [dbo].[GiftCardStore]
    ADD CONSTRAINT [DF_GiftCardStore_GiftCardID] DEFAULT ((0)) FOR [GiftCardID];

GO
PRINT N'Creating [dbo].[DF_GiftCardStore_StoreID]...';

GO
ALTER TABLE [dbo].[GiftCardStore]
    ADD CONSTRAINT [DF_GiftCardStore_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_GiftCardStore_CreatedOn]...';

GO
ALTER TABLE [dbo].[GiftCardStore]
    ADD CONSTRAINT [DF_GiftCardStore_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_GiftCardStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[GiftCardStore]
    ADD CONSTRAINT [DF_GiftCardStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_GiftCardUsage_UpdatedOn]...';

GO
ALTER TABLE [dbo].[GiftCardUsage]
    ADD CONSTRAINT [DF_GiftCardUsage_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_GiftCardUsage_GiftCardUsageGUID]...';

GO
ALTER TABLE [dbo].[GiftCardUsage]
    ADD CONSTRAINT [DF_GiftCardUsage_GiftCardUsageGUID] DEFAULT (newid()) FOR [GiftCardUsageGUID];

GO
PRINT N'Creating [dbo].[DF_GiftCardUsage_UsageTypeID]...';

GO
ALTER TABLE [dbo].[GiftCardUsage]
    ADD CONSTRAINT [DF_GiftCardUsage_UsageTypeID] DEFAULT ((0)) FOR [UsageTypeID];

GO
PRINT N'Creating [dbo].[DF_GiftCardUsage_UsedByCustomerID]...';

GO
ALTER TABLE [dbo].[GiftCardUsage]
    ADD CONSTRAINT [DF_GiftCardUsage_UsedByCustomerID] DEFAULT ((0)) FOR [UsedByCustomerID];

GO
PRINT N'Creating [dbo].[DF_GiftCardUsage_OrderNumber]...';

GO
ALTER TABLE [dbo].[GiftCardUsage]
    ADD CONSTRAINT [DF_GiftCardUsage_OrderNumber] DEFAULT ((0)) FOR [OrderNumber];

GO
PRINT N'Creating [dbo].[DF_GiftCardUsage_Amount]...';

GO
ALTER TABLE [dbo].[GiftCardUsage]
    ADD CONSTRAINT [DF_GiftCardUsage_Amount] DEFAULT ((0.0)) FOR [Amount];

GO
PRINT N'Creating [dbo].[DF_GiftCardUsage_CreatedOn]...';

GO
ALTER TABLE [dbo].[GiftCardUsage]
    ADD CONSTRAINT [DF_GiftCardUsage_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_GlobalConfig_UpdatedOn]...';

GO
ALTER TABLE [dbo].[GlobalConfig]
    ADD CONSTRAINT [DF_GlobalConfig_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_GlobalConfig_GlobalConfigGUID]...';

GO
ALTER TABLE [dbo].[GlobalConfig]
    ADD CONSTRAINT [DF_GlobalConfig_GlobalConfigGUID] DEFAULT (newid()) FOR [GlobalConfigGUID];

GO
PRINT N'Creating [dbo].[DF_GlobalConfig_SuperOnly]...';

GO
ALTER TABLE [dbo].[GlobalConfig]
    ADD CONSTRAINT [DF_GlobalConfig_SuperOnly] DEFAULT ((1)) FOR [SuperOnly];

GO
PRINT N'Creating [dbo].[DF_GlobalConfig_Hidden]...';

GO
ALTER TABLE [dbo].[GlobalConfig]
    ADD CONSTRAINT [DF_GlobalConfig_Hidden] DEFAULT ((0)) FOR [Hidden];

GO
PRINT N'Creating [dbo].[DF_GlobalConfig_IsMultiStore]...';

GO
ALTER TABLE [dbo].[GlobalConfig]
    ADD CONSTRAINT [DF_GlobalConfig_IsMultiStore] DEFAULT ((0)) FOR [IsMultiStore];

GO
PRINT N'Creating [dbo].[DF_GlobalConfig_CreatedOn]...';

GO
ALTER TABLE [dbo].[GlobalConfig]
    ADD CONSTRAINT [DF_GlobalConfig_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Inventory_InventoryGUID]...';

GO
ALTER TABLE [dbo].[Inventory]
    ADD CONSTRAINT [DF_Inventory_InventoryGUID] DEFAULT (newid()) FOR [InventoryGUID];

GO
PRINT N'Creating [dbo].[DF_Inventory_Quan]...';

GO
ALTER TABLE [dbo].[Inventory]
    ADD CONSTRAINT [DF_Inventory_Quan] DEFAULT ((0)) FOR [Quan];

GO
PRINT N'Creating [dbo].[DF_Inventory_WeightDelta]...';

GO
ALTER TABLE [dbo].[Inventory]
    ADD CONSTRAINT [DF_Inventory_WeightDelta] DEFAULT ((0.0)) FOR [WeightDelta];

GO
PRINT N'Creating [dbo].[DF_Inventory_CreatedOn]...';

GO
ALTER TABLE [dbo].[Inventory]
    ADD CONSTRAINT [DF_Inventory_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Inventory_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Inventory]
    ADD CONSTRAINT [DF_Inventory_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_KitCart_ShoppingCartRecID]...';

GO
ALTER TABLE [dbo].[KitCart]
    ADD CONSTRAINT [DF_KitCart_ShoppingCartRecID] DEFAULT ((0)) FOR [ShoppingCartRecID];

GO
PRINT N'Creating [dbo].[DF_KitCart_Quantity]...';

GO
ALTER TABLE [dbo].[KitCart]
    ADD CONSTRAINT [DF_KitCart_Quantity] DEFAULT ((1)) FOR [Quantity];

GO
PRINT N'Creating [dbo].[DF_KitCart_CartType]...';

GO
ALTER TABLE [dbo].[KitCart]
    ADD CONSTRAINT [DF_KitCart_CartType] DEFAULT ((0)) FOR [CartType];

GO
PRINT N'Creating [dbo].[DF_KitCart_CreatedOn]...';

GO
ALTER TABLE [dbo].[KitCart]
    ADD CONSTRAINT [DF_KitCart_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_KitCart_UpdatedOn]...';

GO
ALTER TABLE [dbo].[KitCart]
    ADD CONSTRAINT [DF_KitCart_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_KitGroup_KitGroupGUID]...';

GO
ALTER TABLE [dbo].[KitGroup]
    ADD CONSTRAINT [DF_KitGroup_KitGroupGUID] DEFAULT (newid()) FOR [KitGroupGUID];

GO
PRINT N'Creating [dbo].[DF_KitGroup_DisplayOrder]...';

GO
ALTER TABLE [dbo].[KitGroup]
    ADD CONSTRAINT [DF_KitGroup_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_KitGroup_IsRequired]...';

GO
ALTER TABLE [dbo].[KitGroup]
    ADD CONSTRAINT [DF_KitGroup_IsRequired] DEFAULT ((0)) FOR [IsRequired];

GO
PRINT N'Creating [dbo].[DF_KitGroup_CreatedOn]...';

GO
ALTER TABLE [dbo].[KitGroup]
    ADD CONSTRAINT [DF_KitGroup_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_KitGroup_UpdatedOn]...';

GO
ALTER TABLE [dbo].[KitGroup]
    ADD CONSTRAINT [DF_KitGroup_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_KitItem_IsReadOnly]...';

GO
ALTER TABLE [dbo].[KitGroup]
    ADD CONSTRAINT [DF_KitItem_IsReadOnly] DEFAULT ((0)) FOR [IsReadOnly];

GO
PRINT N'Creating [dbo].[DF_KitGroupType_UpdatedOn]...';

GO
ALTER TABLE [dbo].[KitGroupType]
    ADD CONSTRAINT [DF_KitGroupType_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_KitGroupType_KitGroupTypeGUID]...';

GO
ALTER TABLE [dbo].[KitGroupType]
    ADD CONSTRAINT [DF_KitGroupType_KitGroupTypeGUID] DEFAULT (newid()) FOR [KitGroupTypeGUID];

GO
PRINT N'Creating [dbo].[DF_KitGroupType_DisplayOrder]...';

GO
ALTER TABLE [dbo].[KitGroupType]
    ADD CONSTRAINT [DF_KitGroupType_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_KitGroupType_CreatedOn]...';

GO
ALTER TABLE [dbo].[KitGroupType]
    ADD CONSTRAINT [DF_KitGroupType_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_KitItem_UpdatedOn]...';

GO
ALTER TABLE [dbo].[KitItem]
    ADD CONSTRAINT [DF_KitItem_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_KitItem_KitItemGUID]...';

GO
ALTER TABLE [dbo].[KitItem]
    ADD CONSTRAINT [DF_KitItem_KitItemGUID] DEFAULT (newid()) FOR [KitItemGUID];

GO
PRINT N'Creating [dbo].[DF_KitItem_PriceDelta]...';

GO
ALTER TABLE [dbo].[KitItem]
    ADD CONSTRAINT [DF_KitItem_PriceDelta] DEFAULT ((0.0)) FOR [PriceDelta];

GO
PRINT N'Creating [dbo].[DF_KitItem_WeightDelta]...';

GO
ALTER TABLE [dbo].[KitItem]
    ADD CONSTRAINT [DF_KitItem_WeightDelta] DEFAULT ((0.0)) FOR [WeightDelta];

GO
PRINT N'Creating [dbo].[DF_KitItem_IsDefault]...';

GO
ALTER TABLE [dbo].[KitItem]
    ADD CONSTRAINT [DF_KitItem_IsDefault] DEFAULT ((0)) FOR [IsDefault];

GO
PRINT N'Creating [dbo].[DF_KitItem_DisplayOrder]...';

GO
ALTER TABLE [dbo].[KitItem]
    ADD CONSTRAINT [DF_KitItem_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_KitItem_InventoryQuantityDelta]...';

GO
ALTER TABLE [dbo].[KitItem]
    ADD CONSTRAINT [DF_KitItem_InventoryQuantityDelta] DEFAULT ((0)) FOR [InventoryQuantityDelta];

GO
PRINT N'Creating [dbo].[DF_KitItem_CreatedOn]...';

GO
ALTER TABLE [dbo].[KitItem]
    ADD CONSTRAINT [DF_KitItem_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Library_LibraryGUID]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_LibraryGUID] DEFAULT (newid()) FOR [LibraryGUID];

GO
PRINT N'Creating [dbo].[DF_Library_ParentLibraryID]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_ParentLibraryID] DEFAULT ((0)) FOR [ParentLibraryID];

GO
PRINT N'Creating [dbo].[DF_Library_ColWidth]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_ColWidth] DEFAULT ((4)) FOR [ColWidth];

GO
PRINT N'Creating [dbo].[DF_Library_SortByLooks]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_SortByLooks] DEFAULT ((0)) FOR [SortByLooks];

GO
PRINT N'Creating [dbo].[DF_Library_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Library_Published]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Library_Wholesale]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_Library_IsImport]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_IsImport] DEFAULT ((0)) FOR [IsImport];

GO
PRINT N'Creating [dbo].[DF_Library_Deleted]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Library_CreatedOn]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Library_PageSize]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_PageSize] DEFAULT ((20)) FOR [PageSize];

GO
PRINT N'Creating [dbo].[DF_Library_SkinID]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Library_TemplateName]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_TemplateName] DEFAULT ('') FOR [TemplateName];

GO
PRINT N'Creating [dbo].[DF_Library_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Library]
    ADD CONSTRAINT [DF_Library_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_LocaleSetting_LocaleSettingGUID]...';

GO
ALTER TABLE [dbo].[LocaleSetting]
    ADD CONSTRAINT [DF_LocaleSetting_LocaleSettingGUID] DEFAULT (newid()) FOR [LocaleSettingGUID];

GO
PRINT N'Creating [dbo].[DF_LocaleSetting_DisplayOrder]...';

GO
ALTER TABLE [dbo].[LocaleSetting]
    ADD CONSTRAINT [DF_LocaleSetting_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_LocaleSetting_CreatedOn]...';

GO
ALTER TABLE [dbo].[LocaleSetting]
    ADD CONSTRAINT [DF_LocaleSetting_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_LocaleSetting_DefaultCurrencyID]...';

GO
ALTER TABLE [dbo].[LocaleSetting]
    ADD CONSTRAINT [DF_LocaleSetting_DefaultCurrencyID] DEFAULT ((1)) FOR [DefaultCurrencyID];

GO
PRINT N'Creating [dbo].[DF_LocaleSetting_UpdatedOn]...';

GO
ALTER TABLE [dbo].[LocaleSetting]
    ADD CONSTRAINT [DF_LocaleSetting_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_ManufacturerGUID]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_ManufacturerGUID] DEFAULT (newid()) FOR [ManufacturerGUID];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_SortByLooks]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_SortByLooks] DEFAULT ((0)) FOR [SortByLooks];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_ColWidth]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_ColWidth] DEFAULT ((4)) FOR [ColWidth];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_Published]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_Wholesale]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_ParentManufacturerID]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_ParentManufacturerID] DEFAULT ((0)) FOR [ParentManufacturerID];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_IsImport]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_IsImport] DEFAULT ((0)) FOR [IsImport];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_Deleted]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_CreatedOn]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_PageSize]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_PageSize] DEFAULT ((20)) FOR [PageSize];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_SkinID]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_TemplateName]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_TemplateName] DEFAULT ('') FOR [TemplateName];

GO
PRINT N'Creating [dbo].[DF_Manufacturer_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Manufacturer]
    ADD CONSTRAINT [DF_Manufacturer_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_MultiShipOrder_Shipment_CreatedOn]...';

GO
ALTER TABLE [dbo].[MultiShipOrder_Shipment]
    ADD CONSTRAINT [DF_MultiShipOrder_Shipment_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_MultiShipOrder_Shipment_UpdatedOn]...';

GO
ALTER TABLE [dbo].[MultiShipOrder_Shipment]
    ADD CONSTRAINT [DF_MultiShipOrder_Shipment_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_News_NewsGUID]...';

GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_NewsGUID] DEFAULT (newid()) FOR [NewsGUID];

GO
PRINT N'Creating [dbo].[DF_News_ExpiresOn]...';

GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_ExpiresOn] DEFAULT (dateadd(month,(1),getdate())) FOR [ExpiresOn];

GO
PRINT N'Creating [dbo].[DF_News_Published]...';

GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_News_Wholesale]...';

GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_News_Deleted]...';

GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_News_CreatedOn]...';

GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_News_UpdatedOn]...';

GO
ALTER TABLE [dbo].[News]
    ADD CONSTRAINT [DF_News_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_NewsStore_NewsID]...';

GO
ALTER TABLE [dbo].[NewsStore]
    ADD CONSTRAINT [DF_NewsStore_NewsID] DEFAULT ((0)) FOR [NewsID];

GO
PRINT N'Creating [dbo].[DF_NewsStore_StoreID]...';

GO
ALTER TABLE [dbo].[NewsStore]
    ADD CONSTRAINT [DF_NewsStore_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_NewsStore_CreatedOn]...';

GO
ALTER TABLE [dbo].[NewsStore]
    ADD CONSTRAINT [DF_NewsStore_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_NewsStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[NewsStore]
    ADD CONSTRAINT [DF_NewsStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_OrderNumbers_OrderNumberGUID]...';

GO
ALTER TABLE [dbo].[OrderNumbers]
    ADD CONSTRAINT [DF_OrderNumbers_OrderNumberGUID] DEFAULT (newid()) FOR [OrderNumberGUID];

GO
PRINT N'Creating [dbo].[DF_OrderNumbers_CreatedOn]...';

GO
ALTER TABLE [dbo].[OrderNumbers]
    ADD CONSTRAINT [DF_OrderNumbers_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_OrderNumbers_UpdatedOn]...';

GO
ALTER TABLE [dbo].[OrderNumbers]
    ADD CONSTRAINT [DF_OrderNumbers_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_OrderOption_OrderOptionGUID]...';

GO
ALTER TABLE [dbo].[OrderOption]
    ADD CONSTRAINT [DF_OrderOption_OrderOptionGUID] DEFAULT (newid()) FOR [OrderOptionGUID];

GO
PRINT N'Creating [dbo].[DF_OrderOption_DisplayOrder]...';

GO
ALTER TABLE [dbo].[OrderOption]
    ADD CONSTRAINT [DF_OrderOption_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_OrderOption_UpdatedOn]...';

GO
ALTER TABLE [dbo].[OrderOption]
    ADD CONSTRAINT [DF_OrderOption_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_OrderOption_TaxClassID]...';

GO
ALTER TABLE [dbo].[OrderOption]
    ADD CONSTRAINT [DF_OrderOption_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_OrderOption_CreatedOn]...';

GO
ALTER TABLE [dbo].[OrderOption]
    ADD CONSTRAINT [DF_OrderOption_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_OrderOptionStore_OrderOptionID]...';

GO
ALTER TABLE [dbo].[OrderOptionStore]
    ADD CONSTRAINT [DF_OrderOptionStore_OrderOptionID] DEFAULT ((0)) FOR [OrderOptionID];

GO
PRINT N'Creating [dbo].[DF_OrderOptionStore_StoreID]...';

GO
ALTER TABLE [dbo].[OrderOptionStore]
    ADD CONSTRAINT [DF_OrderOptionStore_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_OrderOptionStore_CreatedOn]...';

GO
ALTER TABLE [dbo].[OrderOptionStore]
    ADD CONSTRAINT [DF_OrderOptionStore_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_OrderOptionStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[OrderOptionStore]
    ADD CONSTRAINT [DF_OrderOptionStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Orders_CreatedOn]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Orders_OrderGUID]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_OrderGUID] DEFAULT (newid()) FOR [OrderGUID];

GO
PRINT N'Creating [dbo].[DF_Orders_StoreID]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_Orders_QuoteCheckout]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_QuoteCheckout] DEFAULT ((0)) FOR [QuoteCheckout];

GO
PRINT N'Creating [dbo].[DF_Orders_IsNew]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_IsNew] DEFAULT ((1)) FOR [IsNew];

GO
PRINT N'Creating [dbo].[DF_Orders_SiteID]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_SiteID] DEFAULT ((1)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Orders_BillingEqualsShipping]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_BillingEqualsShipping] DEFAULT ((0)) FOR [BillingEqualsShipping];

GO
PRINT N'Creating [dbo].[DF_Orders_ShippingResidenceType]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_ShippingResidenceType] DEFAULT ((0)) FOR [ShippingResidenceType];

GO
PRINT N'Creating [dbo].[DF_Orders_ShippingMethodID]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_ShippingMethodID] DEFAULT ((0)) FOR [ShippingMethodID];

GO
PRINT N'Creating [dbo].[DF_Orders_CouponType]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_CouponType] DEFAULT ((0)) FOR [CouponType];

GO
PRINT N'Creating [dbo].[DF_Orders_Deleted]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Orders_OrderSubtotal]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_OrderSubtotal] DEFAULT ((0.0)) FOR [OrderSubtotal];

GO
PRINT N'Creating [dbo].[DF_Orders_OrderTax]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_OrderTax] DEFAULT ((0.0)) FOR [OrderTax];

GO
PRINT N'Creating [dbo].[DF_Orders_OrderShippingCosts]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_OrderShippingCosts] DEFAULT ((0.0)) FOR [OrderShippingCosts];

GO
PRINT N'Creating [dbo].[DF_Orders_OrderTotal]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_OrderTotal] DEFAULT ((0.0)) FOR [OrderTotal];

GO
PRINT N'Creating [dbo].[DF_Orders_OrderDate]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_OrderDate] DEFAULT (getdate()) FOR [OrderDate];

GO
PRINT N'Creating [dbo].[DF_Orders_LevelID]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_LevelID] DEFAULT ((0)) FOR [LevelID];

GO
PRINT N'Creating [dbo].[DF_Orders_AffiliateCommissionRecorded]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_AffiliateCommissionRecorded] DEFAULT ((0)) FOR [AffiliateCommissionRecorded];

GO
PRINT N'Creating [dbo].[DF_Orders_OrderWeight]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_OrderWeight] DEFAULT ((0.0)) FOR [OrderWeight];

GO
PRINT N'Creating [dbo].[DF_Orders_AlreadyConfirmed]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_AlreadyConfirmed] DEFAULT ((0)) FOR [AlreadyConfirmed];

GO
PRINT N'Creating [dbo].[DF_Orders_ReadyToShip]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_ReadyToShip] DEFAULT ((0)) FOR [ReadyToShip];

GO
PRINT N'Creating [dbo].[DF_Orders_IsPrinted]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_IsPrinted] DEFAULT ((0)) FOR [IsPrinted];

GO
PRINT N'Creating [dbo].[DF_Orders_InvReduced]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_InvReduced] DEFAULT ((0)) FOR [InventoryWasReduced];

GO
PRINT N'Creating [dbo].[DF_Orders_MaxMindScore]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_MaxMindScore] DEFAULT ((-1)) FOR [MaxMindFraudScore];

GO
PRINT N'Creating [dbo].[DF_Orders_Crypt]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_Crypt] DEFAULT ((1)) FOR [Crypt];

GO
PRINT N'Creating [dbo].[DF_Orders_TransactionType]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_TransactionType] DEFAULT ((0)) FOR [TransactionType];

GO
PRINT N'Creating [dbo].[DF_Orders_RecurringSubscriptionID]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_RecurringSubscriptionID] DEFAULT ('') FOR [RecurringSubscriptionID];

GO
PRINT N'Creating [dbo].[DF_Orders_RecurringSubscriptionCommand]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_RecurringSubscriptionCommand] DEFAULT ('') FOR [RecurringSubscriptionCommand];

GO
PRINT N'Creating [dbo].[DF_Orders_RecurringSubscriptionResult]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_RecurringSubscriptionResult] DEFAULT ('') FOR [RecurringSubscriptionResult];

GO
PRINT N'Creating [dbo].[DF_Orders_RelatedOrderNumber]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_RelatedOrderNumber] DEFAULT ((0)) FOR [RelatedOrderNumber];

GO
PRINT N'Creating [dbo].[DF_Orders_BuySafeCommand]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_BuySafeCommand] DEFAULT ('') FOR [BuySafeCommand];

GO
PRINT N'Creating [dbo].[DF_Orders_BuySafeResult]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_BuySafeResult] DEFAULT ('') FOR [BuySafeResult];

GO
PRINT N'Creating [dbo].[DF_Orders_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [DF_Orders_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Orders_KitCart_WeightDelta]...';

GO
ALTER TABLE [dbo].[Orders_KitCart]
    ADD CONSTRAINT [DF_Orders_KitCart_WeightDelta] DEFAULT ((0.0)) FOR [KitItemWeightDelta];

GO
PRINT N'Creating [dbo].[DF_Orders_KitCart_CreatedOn]...';

GO
ALTER TABLE [dbo].[Orders_KitCart]
    ADD CONSTRAINT [DF_Orders_KitCart_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Orders_KitCart_CartType]...';

GO
ALTER TABLE [dbo].[Orders_KitCart]
    ADD CONSTRAINT [DF_Orders_KitCart_CartType] DEFAULT ((0)) FOR [CartType];

GO
PRINT N'Creating [dbo].[DF_Orders_KitCart_KitGroupIsReadOnly]...';

GO
ALTER TABLE [dbo].[Orders_KitCart]
    ADD CONSTRAINT [DF_Orders_KitCart_KitGroupIsReadOnly] DEFAULT ((0)) FOR [KitGroupIsReadOnly];

GO
PRINT N'Creating [dbo].[DF_Orders_KitCart_KitItemInventoryQuantityDelta]...';

GO
ALTER TABLE [dbo].[Orders_KitCart]
    ADD CONSTRAINT [DF_Orders_KitCart_KitItemInventoryQuantityDelta] DEFAULT ((0)) FOR [KitItemInventoryQuantityDelta];

GO
PRINT N'Creating [dbo].[DF_Orders_KitCart_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Orders_KitCart]
    ADD CONSTRAINT [DF_Orders_KitCart_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_IsTaxable]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_IsTaxable] DEFAULT ((0)) FOR [IsTaxable];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_IsShipSeparately]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_IsShipSeparately] DEFAULT ((0)) FOR [IsShipSeparately];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_IsDownload]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_IsDownload] DEFAULT ((0)) FOR [IsDownload];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_FreeShipping]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_FreeShipping] DEFAULT ((0)) FOR [FreeShipping];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_IsSecureAttachment]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_IsSecureAttachment] DEFAULT ((0)) FOR [IsSecureAttachment];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_CartType]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_CartType] DEFAULT ((0)) FOR [CartType];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_ShippingAddressID]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_ShippingAddressID] DEFAULT ((0)) FOR [ShippingAddressID];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_CreatedOn]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_CustomerEntersPrice]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_CustomerEntersPrice] DEFAULT ((0)) FOR [CustomerEntersPrice];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_TaxClassID]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_TaxRate]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_TaxRate] DEFAULT ((0)) FOR [TaxRate];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_IsGift]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_IsGift] DEFAULT ((0)) FOR [IsGift];

GO
PRINT N'Creating [dbo].[DF_Orders_ShoppingCart_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Orders_ShoppingCart]
    ADD CONSTRAINT [DF_Orders_ShoppingCart_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_OrderShipment_CreatedOn]...';

GO
ALTER TABLE [dbo].[OrderShipment]
    ADD CONSTRAINT [DF_OrderShipment_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_OrderShipment_UpdatedOn]...';

GO
ALTER TABLE [dbo].[OrderShipment]
    ADD CONSTRAINT [DF_OrderShipment_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_OrderTransaction_CreatedOn]...';

GO
ALTER TABLE [dbo].[OrderTransaction]
    ADD CONSTRAINT [DF_OrderTransaction_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_OrderTransaction_UpdatedOn]...';

GO
ALTER TABLE [dbo].[OrderTransaction]
    ADD CONSTRAINT [DF_OrderTransaction_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_PasswordLog_CreatedOn]...';

GO
ALTER TABLE [dbo].[PasswordLog]
    ADD CONSTRAINT [DF_PasswordLog_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_PasswordLog_UpdatedOn]...';

GO
ALTER TABLE [dbo].[PasswordLog]
    ADD CONSTRAINT [DF_PasswordLog_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_PasswordLogSaltKey]...';

GO
ALTER TABLE [dbo].[PasswordLog]
    ADD CONSTRAINT [DF_PasswordLogSaltKey] DEFAULT ((0)) FOR [SaltKey];

GO
PRINT N'Creating [dbo].[DF_Product_ProductGUID]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_ProductGUID] DEFAULT (newid()) FOR [ProductGUID];

GO
PRINT N'Creating [dbo].[DF_Product_ProductTypeID]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_ProductTypeID] DEFAULT ((1)) FOR [ProductTypeID];

GO
PRINT N'Creating [dbo].[DF_Product_TaxClassID]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_Product_SalesPromptID]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_SalesPromptID] DEFAULT ((1)) FOR [SalesPromptID];

GO
PRINT N'Creating [dbo].[DF_Product_IsFeatured]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_IsFeatured] DEFAULT ((0)) FOR [IsFeatured];

GO
PRINT N'Creating [dbo].[DF_Product_ColWidth]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_ColWidth] DEFAULT ((4)) FOR [ColWidth];

GO
PRINT N'Creating [dbo].[DF_Product_Published]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Product_Wholesale]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_Product_RequiresRegistration]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_RequiresRegistration] DEFAULT ((0)) FOR [RequiresRegistration];

GO
PRINT N'Creating [dbo].[DF_Product_Looks]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_Looks] DEFAULT ((0)) FOR [Looks];

GO
PRINT N'Creating [dbo].[DF_Product_UpsellProductDiscountPercentage]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_UpsellProductDiscountPercentage] DEFAULT ((0.0)) FOR [UpsellProductDiscountPercentage];

GO
PRINT N'Creating [dbo].[DF_Product_TrackInventoryBySizeAndColor]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_TrackInventoryBySizeAndColor] DEFAULT ((0)) FOR [TrackInventoryBySizeAndColor];

GO
PRINT N'Creating [dbo].[DF_Product_TrackInventoryBySize]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_TrackInventoryBySize] DEFAULT ((1)) FOR [TrackInventoryBySize];

GO
PRINT N'Creating [dbo].[DF_Product_TrackInventoryByColor]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_TrackInventoryByColor] DEFAULT ((1)) FOR [TrackInventoryByColor];

GO
PRINT N'Creating [dbo].[DF_Product_IsAKit]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_IsAKit] DEFAULT ((0)) FOR [IsAKit];

GO
PRINT N'Creating [dbo].[DF_Product_ShowInProductBrowser]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_ShowInProductBrowser] DEFAULT ((1)) FOR [ShowInProductBrowser];

GO
PRINT N'Creating [dbo].[DF_Product_ShowBuyButton]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_ShowBuyButton] DEFAULT ((1)) FOR [ShowBuyButton];

GO
PRINT N'Creating [dbo].[DF_Product_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Product_HidePriceUntilCart]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_HidePriceUntilCart] DEFAULT ((0)) FOR [HidePriceUntilCart];

GO
PRINT N'Creating [dbo].[DF_Product_IsCalltoOrder]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_IsCalltoOrder] DEFAULT ((0)) FOR [IsCalltoOrder];

GO
PRINT N'Creating [dbo].[DF_Product_ExcludeFromPriceFeeds]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_ExcludeFromPriceFeeds] DEFAULT ((0)) FOR [ExcludeFromPriceFeeds];

GO
PRINT N'Creating [dbo].[DF_Product_RequiresTextOption]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_RequiresTextOption] DEFAULT ((0)) FOR [RequiresTextOption];

GO
PRINT N'Creating [dbo].[DF_Product_IsImport]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_IsImport] DEFAULT ((0)) FOR [IsImport];

GO
PRINT N'Creating [dbo].[DF_Product_IsSystem]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_IsSystem] DEFAULT ((0)) FOR [IsSystem];

GO
PRINT N'Creating [dbo].[DF_Product_Deleted]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Product_CreatedOn]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Product_SkinID]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Product_TemplateName]...';

GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [DF_Product_TemplateName] DEFAULT ('') FOR [TemplateName];

GO
PRINT N'Creating [dbo].[DF_ProductAffiliate_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductAffiliate]
    ADD CONSTRAINT [DF_ProductAffiliate_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductAffiliate_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductAffiliate]
    ADD CONSTRAINT [DF_ProductAffiliate_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductAffiliate_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductAffiliate]
    ADD CONSTRAINT [DF_ProductAffiliate_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductCategory_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductCategory]
    ADD CONSTRAINT [DF_ProductCategory_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductCategory_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductCategory]
    ADD CONSTRAINT [DF_ProductCategory_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductCategory_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductCategory]
    ADD CONSTRAINT [DF_ProductCategory_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductCustomerLevel_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductCustomerLevel]
    ADD CONSTRAINT [DF_ProductCustomerLevel_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductCustomerLevel_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductCustomerLevel]
    ADD CONSTRAINT [DF_ProductCustomerLevel_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductCustomerLevel_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductCustomerLevel]
    ADD CONSTRAINT [DF_ProductCustomerLevel_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductDistributor_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductDistributor]
    ADD CONSTRAINT [DF_ProductDistributor_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductDistributor_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductDistributor]
    ADD CONSTRAINT [DF_ProductDistributor_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductDistributor_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductDistributor]
    ADD CONSTRAINT [DF_ProductDistributor_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductGenre_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductGenre]
    ADD CONSTRAINT [DF_ProductGenre_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductGenre_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductGenre]
    ADD CONSTRAINT [DF_ProductGenre_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductGenre_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductGenre]
    ADD CONSTRAINT [DF_ProductGenre_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductLocaleSetting_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductLocaleSetting]
    ADD CONSTRAINT [DF_ProductLocaleSetting_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductLocaleSetting_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductLocaleSetting]
    ADD CONSTRAINT [DF_ProductLocaleSetting_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductLocaleSetting_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductLocaleSetting]
    ADD CONSTRAINT [DF_ProductLocaleSetting_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductManufacturer_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductManufacturer]
    ADD CONSTRAINT [DF_ProductManufacturer_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductManufacturer_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductManufacturer]
    ADD CONSTRAINT [DF_ProductManufacturer_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductManufacturer_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductManufacturer]
    ADD CONSTRAINT [DF_ProductManufacturer_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductSection_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductSection]
    ADD CONSTRAINT [DF_ProductSection_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductSection_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductSection]
    ADD CONSTRAINT [DF_ProductSection_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductSection_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductSection]
    ADD CONSTRAINT [DF_ProductSection_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductStore_ProductID]...';

GO
ALTER TABLE [dbo].[ProductStore]
    ADD CONSTRAINT [DF_ProductStore_ProductID] DEFAULT ((0)) FOR [ProductID];

GO
PRINT N'Creating [dbo].[DF_ProductStore_StoreID]...';

GO
ALTER TABLE [dbo].[ProductStore]
    ADD CONSTRAINT [DF_ProductStore_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ProductStore_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductStore]
    ADD CONSTRAINT [DF_ProductStore_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductStore]
    ADD CONSTRAINT [DF_ProductStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductType_ProductTypeGUID]...';

GO
ALTER TABLE [dbo].[ProductType]
    ADD CONSTRAINT [DF_ProductType_ProductTypeGUID] DEFAULT (newid()) FOR [ProductTypeGUID];

GO
PRINT N'Creating [dbo].[DF_ProductType_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductType]
    ADD CONSTRAINT [DF_ProductType_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductType_TaxClassID]...';

GO
ALTER TABLE [dbo].[ProductType]
    ADD CONSTRAINT [DF_ProductType_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_ProductType_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductType]
    ADD CONSTRAINT [DF_ProductType_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductType_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductType]
    ADD CONSTRAINT [DF_ProductType_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_VariantGUID]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_VariantGUID] DEFAULT (newid()) FOR [VariantGUID];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_IsDefault]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_IsDefault] DEFAULT ((0)) FOR [IsDefault];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_Price]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_Price] DEFAULT ((0.0)) FOR [Price];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_Points]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_Points] DEFAULT ((0)) FOR [Points];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_Inventory]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_Inventory] DEFAULT ((1000000)) FOR [Inventory];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_IsTaxable]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_IsTaxable] DEFAULT ((1)) FOR [IsTaxable];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_IsShipSeparately]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_IsShipSeparately] DEFAULT ((0)) FOR [IsShipSeparately];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_IsDownload]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_IsDownload] DEFAULT ((0)) FOR [IsDownload];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_FreeShipping]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_FreeShipping] DEFAULT ((0)) FOR [FreeShipping];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_Published]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_Wholesale]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_IsSecureAttachment]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_IsSecureAttachment] DEFAULT ((0)) FOR [IsSecureAttachment];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_IsRecurring]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_IsRecurring] DEFAULT ((0)) FOR [IsRecurring];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_RecurringInterval]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_RecurringInterval] DEFAULT ((1)) FOR [RecurringInterval];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_RecurringIntervalType]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_RecurringIntervalType] DEFAULT ((3)) FOR [RecurringIntervalType];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_IsImport]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_IsImport] DEFAULT ((0)) FOR [IsImport];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_Deleted]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_CustomerEntersPrice]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_CustomerEntersPrice] DEFAULT ((0)) FOR [CustomerEntersPrice];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_Condition]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_Condition] DEFAULT ((0)) FOR [Condition];

GO
PRINT N'Creating [dbo].[DF_ProductVariant_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [DF_ProductVariant_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductVector_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ProductVector]
    ADD CONSTRAINT [DF_ProductVector_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ProductVector_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductVector]
    ADD CONSTRAINT [DF_ProductVector_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductVector_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductVector]
    ADD CONSTRAINT [DF_ProductVector_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductView_CreatedOn]...';

GO
ALTER TABLE [dbo].[ProductView]
    ADD CONSTRAINT [DF_ProductView_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ProductView_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ProductView]
    ADD CONSTRAINT [DF_ProductView_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Profile_CreatedOn]...';

GO
ALTER TABLE [dbo].[Profile]
    ADD CONSTRAINT [DF_Profile_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_PromotionLineItem_UpdatedOn]...';

GO
ALTER TABLE [dbo].[PromotionLineItem]
    ADD CONSTRAINT [DF_PromotionLineItem_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_PromotionLineItem_CreatedOn]...';

GO
ALTER TABLE [dbo].[PromotionLineItem]
    ADD CONSTRAINT [DF_PromotionLineItem_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Promotions_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Promotions]
    ADD CONSTRAINT [DF_Promotions_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Promotions_CreatedOn]...';

GO
ALTER TABLE [dbo].[Promotions]
    ADD CONSTRAINT [DF_Promotions_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Promotion_PromotionGUID]...';

GO
ALTER TABLE [dbo].[Promotions]
    ADD CONSTRAINT [DF_Promotion_PromotionGUID] DEFAULT (newid()) FOR [PromotionGuid];

GO
PRINT N'Creating [dbo].[DF_Promotions_Code]...';

GO
ALTER TABLE [dbo].[Promotions]
    ADD CONSTRAINT [DF_Promotions_Code] DEFAULT ('') FOR [Code];

GO
PRINT N'Creating [dbo].[DF_PromotionStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[PromotionStore]
    ADD CONSTRAINT [DF_PromotionStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_PromotionStore_CreatedOn]...';

GO
ALTER TABLE [dbo].[PromotionStore]
    ADD CONSTRAINT [DF_PromotionStore_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_PromotionUsage_UpdatedOn]...';

GO
ALTER TABLE [dbo].[PromotionUsage]
    ADD CONSTRAINT [DF_PromotionUsage_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_PromotionUsage_CreatedOn]...';

GO
ALTER TABLE [dbo].[PromotionUsage]
    ADD CONSTRAINT [DF_PromotionUsage_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_PromotionUsage_Complete]...';

GO
ALTER TABLE [dbo].[PromotionUsage]
    ADD CONSTRAINT [DF_PromotionUsage_Complete] DEFAULT ((0)) FOR [Complete];

GO
PRINT N'Creating [dbo].[DF_QuantityDiscount_UpdatedOn]...';

GO
ALTER TABLE [dbo].[QuantityDiscount]
    ADD CONSTRAINT [DF_QuantityDiscount_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_QuantityDiscount_QuantityDiscountGUID]...';

GO
ALTER TABLE [dbo].[QuantityDiscount]
    ADD CONSTRAINT [DF_QuantityDiscount_QuantityDiscountGUID] DEFAULT (newid()) FOR [QuantityDiscountGUID];

GO
PRINT N'Creating [dbo].[DF_QuantityDiscount_DisplayOrder]...';

GO
ALTER TABLE [dbo].[QuantityDiscount]
    ADD CONSTRAINT [DF_QuantityDiscount_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_QuantityDiscount_DiscountType]...';

GO
ALTER TABLE [dbo].[QuantityDiscount]
    ADD CONSTRAINT [DF_QuantityDiscount_DiscountType] DEFAULT ((0)) FOR [DiscountType];

GO
PRINT N'Creating [dbo].[DF_QuantityDiscount_CreatedOn]...';

GO
ALTER TABLE [dbo].[QuantityDiscount]
    ADD CONSTRAINT [DF_QuantityDiscount_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_QuantityDiscountTable_UpdatedOn]...';

GO
ALTER TABLE [dbo].[QuantityDiscountTable]
    ADD CONSTRAINT [DF_QuantityDiscountTable_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_QuantityDiscountTable_CreatedOn]...';

GO
ALTER TABLE [dbo].[QuantityDiscountTable]
    ADD CONSTRAINT [DF_QuantityDiscountTable_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Rating_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Rating]
    ADD CONSTRAINT [DF_Rating_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Rating_StoreID]...';

GO
ALTER TABLE [dbo].[Rating]
    ADD CONSTRAINT [DF_Rating_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_Rating_HasComment]...';

GO
ALTER TABLE [dbo].[Rating]
    ADD CONSTRAINT [DF_Rating_HasComment] DEFAULT ((0)) FOR [HasComment];

GO
PRINT N'Creating [dbo].[DF_Rating_IsFilthy]...';

GO
ALTER TABLE [dbo].[Rating]
    ADD CONSTRAINT [DF_Rating_IsFilthy] DEFAULT ((0)) FOR [IsFilthy];

GO
PRINT N'Creating [dbo].[DF_Rating_IsROTD]...';

GO
ALTER TABLE [dbo].[Rating]
    ADD CONSTRAINT [DF_Rating_IsROTD] DEFAULT ((0)) FOR [IsROTD];

GO
PRINT N'Creating [dbo].[DF_Rating_FoundHelpful]...';

GO
ALTER TABLE [dbo].[Rating]
    ADD CONSTRAINT [DF_Rating_FoundHelpful] DEFAULT ((0)) FOR [FoundHelpful];

GO
PRINT N'Creating [dbo].[DF_Rating_FoundNotHelpful]...';

GO
ALTER TABLE [dbo].[Rating]
    ADD CONSTRAINT [DF_Rating_FoundNotHelpful] DEFAULT ((0)) FOR [FoundNotHelpful];

GO
PRINT N'Creating [dbo].[DF_Rating_CreatedOn]...';

GO
ALTER TABLE [dbo].[Rating]
    ADD CONSTRAINT [DF_Rating_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_RatingCommentHelpfulness_UpdatedOn]...';

GO
ALTER TABLE [dbo].[RatingCommentHelpfulness]
    ADD CONSTRAINT [DF_RatingCommentHelpfulness_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating unnamed constraint on [dbo].[RatingCommentHelpfulness]...';

GO
ALTER TABLE [dbo].[RatingCommentHelpfulness]
    ADD DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_RatingCommentHelpfulness_CreatedOn]...';

GO
ALTER TABLE [dbo].[RatingCommentHelpfulness]
    ADD CONSTRAINT [DF_RatingCommentHelpfulness_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_RestrictedIP_UpdatedOn]...';

GO
ALTER TABLE [dbo].[RestrictedIP]
    ADD CONSTRAINT [DF_RestrictedIP_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_RestrictedIP_CreatedOn]...';

GO
ALTER TABLE [dbo].[RestrictedIP]
    ADD CONSTRAINT [DF_RestrictedIP_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_SalesPrompt_UpdatedOn]...';

GO
ALTER TABLE [dbo].[SalesPrompt]
    ADD CONSTRAINT [DF_SalesPrompt_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_SalesPrompt_SalesPromptGUID]...';

GO
ALTER TABLE [dbo].[SalesPrompt]
    ADD CONSTRAINT [DF_SalesPrompt_SalesPromptGUID] DEFAULT (newid()) FOR [SalesPromptGUID];

GO
PRINT N'Creating [dbo].[DF_SalesPrompt_Deleted]...';

GO
ALTER TABLE [dbo].[SalesPrompt]
    ADD CONSTRAINT [DF_SalesPrompt_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_SalesPrompt_CreatedOn]...';

GO
ALTER TABLE [dbo].[SalesPrompt]
    ADD CONSTRAINT [DF_SalesPrompt_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_SearchLog_UpdatedOn]...';

GO
ALTER TABLE [dbo].[SearchLog]
    ADD CONSTRAINT [DF_SearchLog_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_SearchLog_CustomerID]...';

GO
ALTER TABLE [dbo].[SearchLog]
    ADD CONSTRAINT [DF_SearchLog_CustomerID] DEFAULT ((0)) FOR [CustomerID];

GO
PRINT N'Creating [dbo].[DF_SearchLog_CreatedOn]...';

GO
ALTER TABLE [dbo].[SearchLog]
    ADD CONSTRAINT [DF_SearchLog_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_SearchLog_LocaleSetting]...';

GO
ALTER TABLE [dbo].[SearchLog]
    ADD CONSTRAINT [DF_SearchLog_LocaleSetting] DEFAULT ('en-US') FOR [LocaleSetting];

GO
PRINT N'Creating [dbo].[DF_Section_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Section_SectionGUID]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_SectionGUID] DEFAULT (newid()) FOR [SectionGUID];

GO
PRINT N'Creating [dbo].[DF_Section_ParentSectionID]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_ParentSectionID] DEFAULT ((0)) FOR [ParentSectionID];

GO
PRINT N'Creating [dbo].[DF_Section_ColWidth]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_ColWidth] DEFAULT ((4)) FOR [ColWidth];

GO
PRINT N'Creating [dbo].[DF_Section_SortByLooks]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_SortByLooks] DEFAULT ((0)) FOR [SortByLooks];

GO
PRINT N'Creating [dbo].[DF_Section_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Section_AllowCategoryFiltering]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_AllowCategoryFiltering] DEFAULT ((0)) FOR [AllowCategoryFiltering];

GO
PRINT N'Creating [dbo].[DF_Section_AllowManufacturerFiltering]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_AllowManufacturerFiltering] DEFAULT ((0)) FOR [AllowManufacturerFiltering];

GO
PRINT N'Creating [dbo].[DF_Section_AllowProductTypeFiltering]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_AllowProductTypeFiltering] DEFAULT ((0)) FOR [AllowProductTypeFiltering];

GO
PRINT N'Creating [dbo].[DF_Section_Published]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Section_Wholesale]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_Section_ShowInProductBrowser]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_ShowInProductBrowser] DEFAULT ((1)) FOR [ShowInProductBrowser];

GO
PRINT N'Creating [dbo].[DF_Section_IsImport]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_IsImport] DEFAULT ((0)) FOR [IsImport];

GO
PRINT N'Creating [dbo].[DF_Section_Deleted]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Section_CreatedOn]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Section_PageSize]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_PageSize] DEFAULT ((20)) FOR [PageSize];

GO
PRINT N'Creating [dbo].[DF_Section_SkinID]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Section_TemplateName]...';

GO
ALTER TABLE [dbo].[Section]
    ADD CONSTRAINT [DF_Section_TemplateName] DEFAULT ('') FOR [TemplateName];

GO
PRINT N'Creating [dbo].[DF_SecurityLog_UpdatedOn]...';

GO
ALTER TABLE [dbo].[SecurityLog]
    ADD CONSTRAINT [DF_SecurityLog_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_SecurityLog_CreatedOn]...';

GO
ALTER TABLE [dbo].[SecurityLog]
    ADD CONSTRAINT [DF_SecurityLog_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_SecurityLog_ActionDate]...';

GO
ALTER TABLE [dbo].[SecurityLog]
    ADD CONSTRAINT [DF_SecurityLog_ActionDate] DEFAULT (getdate()) FOR [ActionDate];

GO
PRINT N'Creating [dbo].[DF_ShippingByProduct_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingByProduct]
    ADD CONSTRAINT [DF_ShippingByProduct_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingByProduct_ShippingByProductGUID]...';

GO
ALTER TABLE [dbo].[ShippingByProduct]
    ADD CONSTRAINT [DF_ShippingByProduct_ShippingByProductGUID] DEFAULT (newid()) FOR [ShippingByProductGUID];

GO
PRINT N'Creating [dbo].[DF_ShippingByProduct_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingByProduct]
    ADD CONSTRAINT [DF_ShippingByProduct_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingByTotal_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingByTotal]
    ADD CONSTRAINT [DF_ShippingByTotal_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingByTotal_RowGUID]...';

GO
ALTER TABLE [dbo].[ShippingByTotal]
    ADD CONSTRAINT [DF_ShippingByTotal_RowGUID] DEFAULT (newid()) FOR [RowGUID];

GO
PRINT N'Creating [dbo].[DF_ShippingByTotal_StoreID]...';

GO
ALTER TABLE [dbo].[ShippingByTotal]
    ADD CONSTRAINT [DF_ShippingByTotal_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShippingByTotal_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingByTotal]
    ADD CONSTRAINT [DF_ShippingByTotal_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingByTotalByPercent_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingByTotalByPercent]
    ADD CONSTRAINT [DF_ShippingByTotalByPercent_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingByTotalByPercent_RowGUID]...';

GO
ALTER TABLE [dbo].[ShippingByTotalByPercent]
    ADD CONSTRAINT [DF_ShippingByTotalByPercent_RowGUID] DEFAULT (newid()) FOR [RowGUID];

GO
PRINT N'Creating [dbo].[DF_ShippingByTotalByPercent_StoreID]...';

GO
ALTER TABLE [dbo].[ShippingByTotalByPercent]
    ADD CONSTRAINT [DF_ShippingByTotalByPercent_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShippingByTotalByPercent_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingByTotalByPercent]
    ADD CONSTRAINT [DF_ShippingByTotalByPercent_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingByWeight_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingByWeight]
    ADD CONSTRAINT [DF_ShippingByWeight_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingByWeight_RowGUID]...';

GO
ALTER TABLE [dbo].[ShippingByWeight]
    ADD CONSTRAINT [DF_ShippingByWeight_RowGUID] DEFAULT (newid()) FOR [RowGUID];

GO
PRINT N'Creating [dbo].[DF_ShippingByWeight_StoreID]...';

GO
ALTER TABLE [dbo].[ShippingByWeight]
    ADD CONSTRAINT [DF_ShippingByWeight_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShippingByWeight_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingByWeight]
    ADD CONSTRAINT [DF_ShippingByWeight_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingCalculation_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingCalculation]
    ADD CONSTRAINT [DF_ShippingCalculation_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingCalculation_ShippingCalculationGUID]...';

GO
ALTER TABLE [dbo].[ShippingCalculation]
    ADD CONSTRAINT [DF_ShippingCalculation_ShippingCalculationGUID] DEFAULT (newid()) FOR [ShippingCalculationGUID];

GO
PRINT N'Creating [dbo].[DF_ShippingCalculation_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ShippingCalculation]
    ADD CONSTRAINT [DF_ShippingCalculation_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ShippingCalculation_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingCalculation]
    ADD CONSTRAINT [DF_ShippingCalculation_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingCalculationStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingCalculationStore]
    ADD CONSTRAINT [DF_ShippingCalculationStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_StoreShippingCalculation_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingCalculationStore]
    ADD CONSTRAINT [DF_StoreShippingCalculation_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingImportExport_StoreID]...';

GO
ALTER TABLE [dbo].[ShippingImportExport]
    ADD CONSTRAINT [DF_ShippingImportExport_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShippingImportExport_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingImportExport]
    ADD CONSTRAINT [DF_ShippingImportExport_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingImportExport_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingImportExport]
    ADD CONSTRAINT [DF_ShippingImportExport_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingMethod_ShippingMethodGUID]...';

GO
ALTER TABLE [dbo].[ShippingMethod]
    ADD CONSTRAINT [DF_ShippingMethod_ShippingMethodGUID] DEFAULT (newid()) FOR [ShippingMethodGUID];

GO
PRINT N'Creating [dbo].[DF_ShippingMethod_StoreID]...';

GO
ALTER TABLE [dbo].[ShippingMethod]
    ADD CONSTRAINT [DF_ShippingMethod_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShippingMethod_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ShippingMethod]
    ADD CONSTRAINT [DF_ShippingMethod_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ShippingMethod_IsRTShipping]...';

GO
ALTER TABLE [dbo].[ShippingMethod]
    ADD CONSTRAINT [DF_ShippingMethod_IsRTShipping] DEFAULT ((0)) FOR [IsRTShipping];

GO
PRINT N'Creating [dbo].[DF_ShippingMethod_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingMethod]
    ADD CONSTRAINT [DF_ShippingMethod_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingMethod_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingMethod]
    ADD CONSTRAINT [DF_ShippingMethod_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingMethodStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingMethodStore]
    ADD CONSTRAINT [DF_ShippingMethodStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_StoreShippingMethod_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingMethodStore]
    ADD CONSTRAINT [DF_StoreShippingMethod_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingMethodToCountryMap_StoreID]...';

GO
ALTER TABLE [dbo].[ShippingMethodToCountryMap]
    ADD CONSTRAINT [DF_ShippingMethodToCountryMap_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShippingMethodToCountryMap_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingMethodToCountryMap]
    ADD CONSTRAINT [DF_ShippingMethodToCountryMap_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingMethodToCountryMap_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingMethodToCountryMap]
    ADD CONSTRAINT [DF_ShippingMethodToCountryMap_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingMethodToStateMap_StoreID]...';

GO
ALTER TABLE [dbo].[ShippingMethodToStateMap]
    ADD CONSTRAINT [DF_ShippingMethodToStateMap_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShippingMethodToStateMap_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingMethodToStateMap]
    ADD CONSTRAINT [DF_ShippingMethodToStateMap_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingMethodToStateMap_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingMethodToStateMap]
    ADD CONSTRAINT [DF_ShippingMethodToStateMap_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingMethodToZoneMap_StoreID]...';

GO
ALTER TABLE [dbo].[ShippingMethodToZoneMap]
    ADD CONSTRAINT [DF_ShippingMethodToZoneMap_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShippingMethodToZoneMap_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingMethodToZoneMap]
    ADD CONSTRAINT [DF_ShippingMethodToZoneMap_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingMethodToZoneMap_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingMethodToZoneMap]
    ADD CONSTRAINT [DF_ShippingMethodToZoneMap_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingTotalByZone_RowGUID]...';

GO
ALTER TABLE [dbo].[ShippingTotalByZone]
    ADD CONSTRAINT [DF_ShippingTotalByZone_RowGUID] DEFAULT (newid()) FOR [RowGUID];

GO
PRINT N'Creating [dbo].[DF_ShippingTotalByZone_StoreID]...';

GO
ALTER TABLE [dbo].[ShippingTotalByZone]
    ADD CONSTRAINT [DF_ShippingTotalByZone_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShippingTotalByZone_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingTotalByZone]
    ADD CONSTRAINT [DF_ShippingTotalByZone_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingTotalByZone_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingTotalByZone]
    ADD CONSTRAINT [DF_ShippingTotalByZone_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingWeightByZone_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingWeightByZone]
    ADD CONSTRAINT [DF_ShippingWeightByZone_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingWeightByZone_RowGUID]...';

GO
ALTER TABLE [dbo].[ShippingWeightByZone]
    ADD CONSTRAINT [DF_ShippingWeightByZone_RowGUID] DEFAULT (newid()) FOR [RowGUID];

GO
PRINT N'Creating [dbo].[DF_ShippingWeightByZone_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingWeightByZone]
    ADD CONSTRAINT [DF_ShippingWeightByZone_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating unnamed constraint on [dbo].[ShippingWeightByZone]...';

GO
ALTER TABLE [dbo].[ShippingWeightByZone]
    ADD DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShippingZone_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShippingZone]
    ADD CONSTRAINT [DF_ShippingZone_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShippingZone_ShippingZoneGUID]...';

GO
ALTER TABLE [dbo].[ShippingZone]
    ADD CONSTRAINT [DF_ShippingZone_ShippingZoneGUID] DEFAULT (newid()) FOR [ShippingZoneGUID];

GO
PRINT N'Creating [dbo].[DF_ShippingZone_DisplayOrder]...';

GO
ALTER TABLE [dbo].[ShippingZone]
    ADD CONSTRAINT [DF_ShippingZone_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_ShippingZone_Deleted]...';

GO
ALTER TABLE [dbo].[ShippingZone]
    ADD CONSTRAINT [DF_ShippingZone_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_ShippingZone_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShippingZone]
    ADD CONSTRAINT [DF_ShippingZone_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_ShoppingCartRecGUID]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_ShoppingCartRecGUID] DEFAULT (newid()) FOR [ShoppingCartRecGUID];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_StoreID]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_Quantity]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_Quantity] DEFAULT ((1)) FOR [Quantity];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_RequiresCount]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_RequiresCount] DEFAULT ((0)) FOR [RequiresCount];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_IsTaxable]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_IsTaxable] DEFAULT ((1)) FOR [IsTaxable];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_IsShipSeparately]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_IsShipSeparately] DEFAULT ((0)) FOR [IsShipSeparately];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_IsDownload]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_IsDownload] DEFAULT ((0)) FOR [IsDownload];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_FreeShipping]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_FreeShipping] DEFAULT ((0)) FOR [FreeShipping];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_CreatedOn]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_CartType]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_CartType] DEFAULT ((0)) FOR [CartType];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_IsSecureAttachment]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_IsSecureAttachment] DEFAULT ((0)) FOR [IsSecureAttachment];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_RecurringIndex]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_RecurringIndex] DEFAULT ((0)) FOR [RecurringIndex];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_IsUpsell]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_IsUpsell] DEFAULT ((0)) FOR [IsUpsell];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_RecurringInterval]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_RecurringInterval] DEFAULT ((1)) FOR [RecurringInterval];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_RecurringIntervalType]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_RecurringIntervalType] DEFAULT ((3)) FOR [RecurringIntervalType];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_CustomerEntersPrice]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_CustomerEntersPrice] DEFAULT ((0)) FOR [CustomerEntersPrice];

GO
PRINT N'Creating [dbo].[DF_ShoppingCartIsKit2]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCartIsKit2] DEFAULT ((0)) FOR [IsKit2];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_TaxClassID]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_TaxRate]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_TaxRate] DEFAULT ((0)) FOR [TaxRate];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_RecurringSubscriptionID]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_RecurringSubscriptionID] DEFAULT ('') FOR [RecurringSubscriptionID];

GO
PRINT N'Creating [dbo].[DF_ShoppingCart_IsGift]...';

GO
ALTER TABLE [dbo].[ShoppingCart]
    ADD CONSTRAINT [DF_ShoppingCart_IsGift] DEFAULT ((0)) FOR [IsGift];

GO
PRINT N'Creating [dbo].[DF_State_UpdatedOn]...';

GO
ALTER TABLE [dbo].[State]
    ADD CONSTRAINT [DF_State_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_State_StateGUID]...';

GO
ALTER TABLE [dbo].[State]
    ADD CONSTRAINT [DF_State_StateGUID] DEFAULT (newid()) FOR [StateGUID];

GO
PRINT N'Creating [dbo].[DF_State_Published]...';

GO
ALTER TABLE [dbo].[State]
    ADD CONSTRAINT [DF_State_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_State_DisplayOrder]...';

GO
ALTER TABLE [dbo].[State]
    ADD CONSTRAINT [DF_State_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_State_CreatedOn]...';

GO
ALTER TABLE [dbo].[State]
    ADD CONSTRAINT [DF_State_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_StateTaxRate_UpdatedOn]...';

GO
ALTER TABLE [dbo].[StateTaxRate]
    ADD CONSTRAINT [DF_StateTaxRate_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_StateTaxRate_TaxClassID]...';

GO
ALTER TABLE [dbo].[StateTaxRate]
    ADD CONSTRAINT [DF_StateTaxRate_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_StateTaxRate_CreatedOn]...';

GO
ALTER TABLE [dbo].[StateTaxRate]
    ADD CONSTRAINT [DF_StateTaxRate_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Store_StoreGUID]...';

GO
ALTER TABLE [dbo].[Store]
    ADD CONSTRAINT [DF_Store_StoreGUID] DEFAULT (newid()) FOR [StoreGUID];

GO
PRINT N'Creating [dbo].[DF_Store_Published]...';

GO
ALTER TABLE [dbo].[Store]
    ADD CONSTRAINT [DF_Store_Published] DEFAULT ((0)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Store_Deleted]...';

GO
ALTER TABLE [dbo].[Store]
    ADD CONSTRAINT [DF_Store_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Store_SkinID]...';

GO
ALTER TABLE [dbo].[Store]
    ADD CONSTRAINT [DF_Store_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Store_IsDefault]...';

GO
ALTER TABLE [dbo].[Store]
    ADD CONSTRAINT [DF_Store_IsDefault] DEFAULT ((0)) FOR [IsDefault];

GO
PRINT N'Creating [dbo].[DF_Store_Created]...';

GO
ALTER TABLE [dbo].[Store]
    ADD CONSTRAINT [DF_Store_Created] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Store_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Store]
    ADD CONSTRAINT [DF_Store_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_StringResource_StringResourceGUID]...';

GO
ALTER TABLE [dbo].[StringResource]
    ADD CONSTRAINT [DF_StringResource_StringResourceGUID] DEFAULT (newid()) FOR [StringResourceGUID];

GO
PRINT N'Creating [dbo].[DF__StoreID]...';

GO
ALTER TABLE [dbo].[StringResource]
    ADD CONSTRAINT [DF__StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_StringResource_Modified]...';

GO
ALTER TABLE [dbo].[StringResource]
    ADD CONSTRAINT [DF_StringResource_Modified] DEFAULT ((0)) FOR [Modified];

GO
PRINT N'Creating [dbo].[DF_StringResource_CreatedOn]...';

GO
ALTER TABLE [dbo].[StringResource]
    ADD CONSTRAINT [DF_StringResource_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_StringResource_UpdatedOn]...';

GO
ALTER TABLE [dbo].[StringResource]
    ADD CONSTRAINT [DF_StringResource_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_TaxClass_UpdatedOn]...';

GO
ALTER TABLE [dbo].[TaxClass]
    ADD CONSTRAINT [DF_TaxClass_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_TaxClass_TaxClassGUID]...';

GO
ALTER TABLE [dbo].[TaxClass]
    ADD CONSTRAINT [DF_TaxClass_TaxClassGUID] DEFAULT (newid()) FOR [TaxClassGUID];

GO
PRINT N'Creating [dbo].[DF_TaxClass_DisplayOrder]...';

GO
ALTER TABLE [dbo].[TaxClass]
    ADD CONSTRAINT [DF_TaxClass_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_TaxClass_CreatedOn]...';

GO
ALTER TABLE [dbo].[TaxClass]
    ADD CONSTRAINT [DF_TaxClass_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Topic_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating unnamed constraint on [dbo].[Topic]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD DEFAULT ((1)) FOR [IsFrequent];

GO
PRINT N'Creating [dbo].[DF_Topic_TopicGUID]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_TopicGUID] DEFAULT (newid()) FOR [TopicGUID];

GO
PRINT N'Creating [dbo].[DF_Topic_RequiresDisclaimer]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_RequiresDisclaimer] DEFAULT ((0)) FOR [RequiresDisclaimer];

GO
PRINT N'Creating [dbo].[DF_Topic_ShowInSiteMap]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_ShowInSiteMap] DEFAULT ((1)) FOR [ShowInSiteMap];

GO
PRINT N'Creating [dbo].[DF_Topic_SiteID]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_SiteID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Topic_HTMLOk]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_HTMLOk] DEFAULT ((1)) FOR [HTMLOk];

GO
PRINT N'Creating [dbo].[DF_Topic_Deleted]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Topic_StoreID]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_StoreID] DEFAULT ((0)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_Topic_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Topic_CreatedOn]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Topic_Published]...';

GO
ALTER TABLE [dbo].[Topic]
    ADD CONSTRAINT [DF_Topic_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_TopicStore_UpdatedOn]...';

GO
ALTER TABLE [dbo].[TopicStore]
    ADD CONSTRAINT [DF_TopicStore_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_TopicStore_TopicID]...';

GO
ALTER TABLE [dbo].[TopicStore]
    ADD CONSTRAINT [DF_TopicStore_TopicID] DEFAULT ((0)) FOR [TopicID];

GO
PRINT N'Creating [dbo].[DF_TopicStore_StoreID]...';

GO
ALTER TABLE [dbo].[TopicStore]
    ADD CONSTRAINT [DF_TopicStore_StoreID] DEFAULT ((1)) FOR [StoreID];

GO
PRINT N'Creating [dbo].[DF_TopicStore_CreatedOn]...';

GO
ALTER TABLE [dbo].[TopicStore]
    ADD CONSTRAINT [DF_TopicStore_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Vector_UpdatedOn]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[DF_Vector_VectorGUID]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_VectorGUID] DEFAULT (newid()) FOR [VectorGUID];

GO
PRINT N'Creating [dbo].[DF_Vector_SortByLooks]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_SortByLooks] DEFAULT ((0)) FOR [SortByLooks];

GO
PRINT N'Creating [dbo].[DF_Vector_ColWidth]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_ColWidth] DEFAULT ((4)) FOR [ColWidth];

GO
PRINT N'Creating [dbo].[DF_Vector_DisplayOrder]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_DisplayOrder] DEFAULT ((1)) FOR [DisplayOrder];

GO
PRINT N'Creating [dbo].[DF_Vector_ParentVectorID]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_ParentVectorID] DEFAULT ((0)) FOR [ParentVectorID];

GO
PRINT N'Creating [dbo].[DF_Vector_Published]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_Published] DEFAULT ((1)) FOR [Published];

GO
PRINT N'Creating [dbo].[DF_Vector_Wholesale]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_Wholesale] DEFAULT ((0)) FOR [Wholesale];

GO
PRINT N'Creating [dbo].[DF_Vector_IsImport]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_IsImport] DEFAULT ((0)) FOR [IsImport];

GO
PRINT N'Creating [dbo].[DF_Vector_Deleted]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_Deleted] DEFAULT ((0)) FOR [Deleted];

GO
PRINT N'Creating [dbo].[DF_Vector_CreatedOn]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_Vector_PageSize]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_PageSize] DEFAULT ((20)) FOR [PageSize];

GO
PRINT N'Creating [dbo].[DF_Vector_TaxClassID]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_Vector_SkinID]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_SkinID] DEFAULT ((0)) FOR [SkinID];

GO
PRINT N'Creating [dbo].[DF_Vector_TemplateName]...';

GO
ALTER TABLE [dbo].[Vector]
    ADD CONSTRAINT [DF_Vector_TemplateName] DEFAULT ('') FOR [TemplateName];

GO
PRINT N'Creating [dbo].[DF_ZipTaxRate_TaxClassID]...';

GO
ALTER TABLE [dbo].[ZipTaxRate]
    ADD CONSTRAINT [DF_ZipTaxRate_TaxClassID] DEFAULT ((1)) FOR [TaxClassID];

GO
PRINT N'Creating [dbo].[DF_ZipTaxRate_CreatedOn]...';

GO
ALTER TABLE [dbo].[ZipTaxRate]
    ADD CONSTRAINT [DF_ZipTaxRate_CreatedOn] DEFAULT (getdate()) FOR [CreatedOn];

GO
PRINT N'Creating [dbo].[DF_ZipTaxRate_CountryID]...';

GO
ALTER TABLE [dbo].[ZipTaxRate]
    ADD CONSTRAINT [DF_ZipTaxRate_CountryID] DEFAULT ((1)) FOR [CountryID];

GO
PRINT N'Creating [dbo].[DF_ZipTaxRate_UpdatedOn]...';

GO
ALTER TABLE [dbo].[ZipTaxRate]
    ADD CONSTRAINT [DF_ZipTaxRate_UpdatedOn] DEFAULT (getdate()) FOR [UpdatedOn];

GO
PRINT N'Creating [dbo].[Product].[_OR_Aspdnsf_Product_I_P_D_P]...';

GO
CREATE STATISTICS [_OR_Aspdnsf_Product_I_P_D_P]
    ON [dbo].[Product]([IsFeatured], [Published], [Deleted], [ProductID]);

GO
PRINT N'Creating [dbo].[ProductVariant].[_OR_Aspdnsf_ProductVariant_V_P_D]...';

GO
CREATE STATISTICS [_OR_Aspdnsf_ProductVariant_V_P_D]
    ON [dbo].[ProductVariant]([VariantID], [Published], [Deleted]);

GO
PRINT N'Creating [dbo].[Profile].[_OR_Aspdnsf_Profile_C_S_P]...';

GO
CREATE STATISTICS [_OR_Aspdnsf_Profile_C_S_P]
    ON [dbo].[Profile]([CustomerGUID], [StoreID], [PropertyName]);

GO
PRINT N'Creating [dbo].[ShoppingCart].[_OR_Aspdnsf_ShoppingCart_S_C_Q]...';

GO
CREATE STATISTICS [_OR_Aspdnsf_ShoppingCart_S_C_Q]
    ON [dbo].[ShoppingCart]([CustomerID], [Quantity]);

GO
PRINT N'Creating [dbo].[ShoppingCart].[_OR_Aspdnsf_ShoppingCart_I_C_S]...';

GO
CREATE STATISTICS [_OR_Aspdnsf_ShoppingCart_I_C_S]
    ON [dbo].[ShoppingCart]([IsKit2], [CustomerID], [ShoppingCartRecID]);

GO
PRINT N'Creating [dbo].[ShoppingCart].[_OR_Aspdnsf_ShoppingCart_S_P_V_C_C]...';

GO
CREATE STATISTICS [_OR_Aspdnsf_ShoppingCart_S_P_V_C_C]
    ON [dbo].[ShoppingCart]([ShoppingCartRecID], [ProductID], [VariantID], [CustomerID], [CartType]);

GO
PRINT N'Creating unnamed constraint on [dbo].[CIM_AddressPaymentProfileMap]...';

GO
ALTER TABLE [dbo].[CIM_AddressPaymentProfileMap] WITH NOCHECK
    ADD FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Address] ([AddressID]);

GO
PRINT N'Creating unnamed constraint on [dbo].[CIM_AddressPaymentProfileMap]...';

GO
ALTER TABLE [dbo].[CIM_AddressPaymentProfileMap] WITH NOCHECK
    ADD FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customer] ([CustomerID]);

GO
PRINT N'Creating [dbo].[FK_PromotionLineItem_PromotionUsageId]...';

GO
ALTER TABLE [dbo].[PromotionLineItem] WITH NOCHECK
    ADD CONSTRAINT [FK_PromotionLineItem_PromotionUsageId] FOREIGN KEY ([PromotionUsageId]) REFERENCES [dbo].[PromotionUsage] ([Id]) ON DELETE CASCADE;

GO
PRINT N'Creating [dbo].[FK_PromotionStore_PromotionId]...';

GO
ALTER TABLE [dbo].[PromotionStore] WITH NOCHECK
    ADD CONSTRAINT [FK_PromotionStore_PromotionId] FOREIGN KEY ([PromotionID]) REFERENCES [dbo].[Promotions] ([Id]) ON DELETE CASCADE;

GO
PRINT N'Creating [dbo].[FK_PromotionStore_StoreID]...';

GO
ALTER TABLE [dbo].[PromotionStore] WITH NOCHECK
    ADD CONSTRAINT [FK_PromotionStore_StoreID] FOREIGN KEY ([StoreID]) REFERENCES [dbo].[Store] ([StoreID]) ON DELETE CASCADE;

GO
PRINT N'Creating [dbo].[FK_PromotionUsage_PromotionId]...';

GO
ALTER TABLE [dbo].[PromotionUsage] WITH NOCHECK
    ADD CONSTRAINT [FK_PromotionUsage_PromotionId] FOREIGN KEY ([PromotionId]) REFERENCES [dbo].[Promotions] ([Id]);

GO
PRINT N'Creating [dbo].[CHK_Store_HasURI]...';

GO
ALTER TABLE [dbo].[Store] WITH NOCHECK
    ADD CONSTRAINT [CHK_Store_HasURI] CHECK (NOT ([ProductionURI] IS NULL AND [StagingURI] IS NULL AND [DevelopmentURI] IS NULL));

GO
PRINT N'Creating [dbo].[Address_Updated]...';

GO

CREATE TRIGGER [dbo].[Address_Updated]
	ON [Address]
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Address_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			[Address]
		SET
			[Address].UpdatedOn = current_timestamp
		FROM
			[Address] [a]
			   INNER JOIN INSERTED i
			   ON [a].AddressID = i.AddressID
	END
GO
PRINT N'Creating [dbo].[Affiliate_Updated]...';

GO

CREATE TRIGGER [dbo].[Affiliate_Updated]
	ON Affiliate
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Affiliate_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Affiliate
		SET
			Affiliate.UpdatedOn = current_timestamp
		FROM
			Affiliate [a]
			   INNER JOIN INSERTED i
			   ON [a].AffiliateID = i.AffiliateID
	END
GO
PRINT N'Creating [dbo].[AffiliateActivity_Updated]...';

GO

CREATE TRIGGER [dbo].[AffiliateActivity_Updated]
	ON AffiliateActivity
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('AffiliateActivity_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			AffiliateActivity
		SET
			AffiliateActivity.UpdatedOn = current_timestamp
		FROM
			AffiliateActivity [a]
			   INNER JOIN INSERTED i
			   ON [a].AffiliateActivityID = i.AffiliateActivityID
	END
GO
PRINT N'Creating [dbo].[AffiliateCommissions_Updated]...';

GO

CREATE TRIGGER [dbo].[AffiliateCommissions_Updated]
	ON AffiliateCommissions
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('AffiliateCommissions_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			AffiliateCommissions
		SET
			AffiliateCommissions.UpdatedOn = current_timestamp
		FROM
			AffiliateCommissions [a]
			   INNER JOIN INSERTED i
			   ON [a].RowGUID = i.RowGUID
	END
GO
PRINT N'Creating [dbo].[AffiliateStore_Updated]...';

GO

CREATE TRIGGER [dbo].[AffiliateStore_Updated]
	ON AffiliateStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('AffiliateStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			AffiliateStore
		SET
			AffiliateStore.UpdatedOn = current_timestamp
		FROM
			AffiliateStore [a]
			   INNER JOIN INSERTED i
			   ON [a].ID = i.ID
	END
GO
PRINT N'Creating [dbo].[AppConfig_Updated]...';

GO

CREATE TRIGGER [dbo].[AppConfig_Updated]
	ON AppConfig
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('AppConfig_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			AppConfig
		SET
			AppConfig.UpdatedOn = current_timestamp
		FROM
			AppConfig [a]
			   INNER JOIN INSERTED i
			   ON [a].AppConfigID = i.AppConfigID
	END
GO
PRINT N'Creating [dbo].[aspdnsf_Syslog_Updated]...';

GO

CREATE TRIGGER [dbo].[aspdnsf_Syslog_Updated]
	ON aspdnsf_Syslog
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('aspdnsf_Syslog_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			aspdnsf_Syslog
		SET
			aspdnsf_Syslog.UpdatedOn = current_timestamp
		FROM
			aspdnsf_Syslog [a]
			   INNER JOIN INSERTED i
			   ON [a].SyslogID = i.SyslogID
	END
GO
PRINT N'Creating [dbo].[AuditLog_Updated]...';

GO

CREATE TRIGGER [dbo].[AuditLog_Updated]
	ON AuditLog
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('AuditLog_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			AuditLog
		SET
			AuditLog.UpdatedOn = current_timestamp
		FROM
			AuditLog [a]
			   INNER JOIN INSERTED i
			   ON [a].AuditLogID = i.AuditLogID
	END
GO
PRINT N'Creating [dbo].[BadWord_Updated]...';

GO

CREATE TRIGGER [dbo].[BadWord_Updated]
	ON BadWord
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('BadWord_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			BadWord
		SET
			BadWord.UpdatedOn = current_timestamp
		FROM
			BadWord [a]
			   INNER JOIN INSERTED i
			   ON [a].BadWordID = i.BadWordID
			   AND [a].LocaleSetting = i.LocaleSetting
	END
GO
PRINT N'Creating [dbo].[UpdateCategoryLocalizedObjectName_Deletes]...';

GO

create trigger dbo.UpdateCategoryLocalizedObjectName_Deletes
on dbo.Category after delete as begin
	set nocount on

	-- When an entity is deleted, remove all its localized names
	delete LocalizedObjectName
	from LocalizedObjectName
		inner join deleted on LocalizedObjectName.ObjectId = deleted.CategoryID and LocalizedObjectName.ObjectType = 'category'
end
GO
PRINT N'Creating [dbo].[Category_Updated]...';

GO

CREATE TRIGGER [dbo].[Category_Updated]
	ON Category
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Category_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Category
		SET
			Category.UpdatedOn = current_timestamp
		FROM
			Category [c]
			   INNER JOIN INSERTED i
			   ON [c].CategoryID = i.CategoryID
	END
GO
PRINT N'Creating [dbo].[CIM_AddressPaymentProfileMap_Updated]...';

GO

CREATE TRIGGER [dbo].[Customer_SyncCustomerDataRetention]
   ON [Customer]
   AFTER INSERT,DELETE
AS 
BEGIN
	IF @@rowcount = 0 RETURN;

	IF trigger_nestlevel(object_ID('Customer_SyncCustomerDataRetention')) > 1 RETURN;

	SET NOCOUNT ON;
	
	if exists(select * from Inserted)
	begin
		-- insert
		insert CustomerDataRetention
		(CustomerId, CustomerLastActiveOn)
		select CustomerId, getdate() from Inserted
	end

	if exists(select * from Deleted)
	begin
		-- delete
		delete from CustomerDataRetention
		where CustomerId in 
			(select CustomerId from Deleted)
	end
END
GO


CREATE TRIGGER [dbo].[CIM_AddressPaymentProfileMap_Updated]
	ON CIM_AddressPaymentProfileMap
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('CIM_AddressPaymentProfileMap_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			CIM_AddressPaymentProfileMap
		SET
			CIM_AddressPaymentProfileMap.UpdatedOn = current_timestamp
		FROM
			CIM_AddressPaymentProfileMap [c]
			   INNER JOIN INSERTED i
			   ON [c].CIMID = i.CIMID
	END
GO
PRINT N'Creating [dbo].[Country_Updated]...';

GO

CREATE TRIGGER [dbo].[Country_Updated]
	ON Country
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Country_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Country
		SET
			Country.UpdatedOn = current_timestamp
		FROM
			Country [c]
			   INNER JOIN INSERTED i
			   ON [c].CountryID = i.CountryID
	END
GO
PRINT N'Creating [dbo].[CountryTaxRate_Updated]...';

GO

CREATE TRIGGER [dbo].[CountryTaxRate_Updated]
	ON CountryTaxRate
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('CountryTaxRate_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			CountryTaxRate
		SET
			CountryTaxRate.UpdatedOn = current_timestamp
		FROM
			CountryTaxRate [c]
			   INNER JOIN INSERTED i
			   ON [c].CountryTaxID = i.CountryTaxID
	END
GO
PRINT N'Creating [dbo].[Coupon_Updated]...';

GO

CREATE TRIGGER [dbo].[Coupon_Updated]
	ON Coupon
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Coupon_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Coupon
		SET
			Coupon.UpdatedOn = current_timestamp
		FROM
			Coupon [c]
			   INNER JOIN INSERTED i
			   ON [c].CouponID = i.CouponID
	END
GO
PRINT N'Creating [dbo].[CouponStore_Updated]...';

GO

CREATE TRIGGER [dbo].[CouponStore_Updated]
	ON CouponStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('CouponStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			CouponStore
		SET
			CouponStore.UpdatedOn = current_timestamp
		FROM
			CouponStore [c]
			   INNER JOIN INSERTED i
			   ON [c].CouponID = i.CouponID
			   AND [c].StoreId = i.StoreId
	END
GO
PRINT N'Creating [dbo].[CreditCardType_Updated]...';

GO

CREATE TRIGGER [dbo].[CreditCardType_Updated]
	ON CreditCardType
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('CreditCardType_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			CreditCardType
		SET
			CreditCardType.UpdatedOn = current_timestamp
		FROM
			CreditCardType [c]
			   INNER JOIN INSERTED i
			   ON [c].CardTypeID = i.CardTypeID
	END
GO
PRINT N'Creating [dbo].[Currency_Updated]...';

GO

CREATE TRIGGER [dbo].[Currency_Updated]
	ON Currency
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Currency_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Currency
		SET
			Currency.UpdatedOn = current_timestamp
		FROM
			Currency [c]
			   INNER JOIN INSERTED i
			   ON [c].CurrencyID = i.CurrencyID
	END
GO
PRINT N'Creating [dbo].[Customer_Updated]...';

GO

CREATE TRIGGER [dbo].[Customer_Updated]
	ON Customer
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Customer_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Customer
		SET
			Customer.UpdatedOn = current_timestamp
		FROM
			Customer [c]
			   INNER JOIN INSERTED i
			   ON [c].CustomerID = i.CustomerID
	END
GO
PRINT N'Creating [dbo].[CustomerLevel_Updated]...';

GO

CREATE TRIGGER [dbo].[CustomerLevel_Updated]
	ON CustomerLevel
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('CustomerLevel_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			CustomerLevel
		SET
			CustomerLevel.UpdatedOn = current_timestamp
		FROM
			CustomerLevel [cl]
			   INNER JOIN INSERTED i
			   ON [cl].CustomerLevelID = i.CustomerLevelID
	END
GO
PRINT N'Creating [dbo].[CustomerSession_Updated]...';

GO

CREATE TRIGGER [dbo].[CustomerSession_Updated]
	ON CustomerSession
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('CustomerSession_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			CustomerSession
		SET
			CustomerSession.UpdatedOn = current_timestamp
		FROM
			CustomerSession [cl]
			   INNER JOIN INSERTED i
			   ON [cl].CustomerSessionID = i.CustomerSessionID
	END
GO
PRINT N'Creating [dbo].[CustomReport_Updated]...';

GO

CREATE TRIGGER [dbo].[CustomReport_Updated]
	ON CustomReport
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('CustomReport_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			CustomReport
		SET
			CustomReport.UpdatedOn = current_timestamp
		FROM
			CustomReport [cl]
			   INNER JOIN INSERTED i
			   ON [cl].CustomReportID = i.CustomReportID
	END
GO
PRINT N'Creating [dbo].[UpdateDistributorLocalizedObjectName_Deletes]...';

GO

create trigger dbo.UpdateDistributorLocalizedObjectName_Deletes
on dbo.Distributor after delete as begin
	set nocount on

	-- When an entity is deleted, remove all its localized names
	delete LocalizedObjectName
	from LocalizedObjectName
		inner join deleted on LocalizedObjectName.ObjectId = deleted.DistributorID and LocalizedObjectName.ObjectType = 'distributor'
end
GO
PRINT N'Creating [dbo].[Document_Updated]...';

GO

CREATE TRIGGER [dbo].[Document_Updated]
	ON Document
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Document_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Document
		SET
			Document.UpdatedOn = current_timestamp
		FROM
			Document [d]
			   INNER JOIN INSERTED i
			   ON [d].DocumentID = i.DocumentID
	END
GO

PRINT N'Creating [dbo].[EntityStore_Updated]...';

GO

CREATE TRIGGER [dbo].[EntityStore_Updated]
	ON EntityStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('EntityStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			EntityStore
		SET
			EntityStore.UpdatedOn = current_timestamp
		FROM
			EntityStore [es]
			   INNER JOIN INSERTED i
			   ON [es].EntityID = i.EntityID
			   AND [es].StoreID = i.StoreID
	END
GO
PRINT N'Creating [dbo].[ErrorLog_Updated]...';

GO

CREATE TRIGGER [dbo].[ErrorLog_Updated]
	ON ErrorLog
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ErrorLog_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ErrorLog
		SET
			ErrorLog.UpdatedOn = current_timestamp
		FROM
			ErrorLog [e]
			   INNER JOIN INSERTED i
			   ON [e].logid = i.logid
	END
GO
PRINT N'Creating [dbo].[ErrorMessage_Updated]...';

GO

CREATE TRIGGER [dbo].[ErrorMessage_Updated]
	ON ErrorMessage
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ErrorMessage_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ErrorMessage
		SET
			ErrorMessage.UpdatedOn = current_timestamp
		FROM
			ErrorMessage [e]
			   INNER JOIN INSERTED i
			   ON [e].MessageId = i.MessageId
	END
GO
PRINT N'Creating [dbo].[EventHandler_Updated]...';

GO

CREATE TRIGGER [dbo].[EventHandler_Updated]
	ON EventHandler
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('EventHandler_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			EventHandler
		SET
			EventHandler.UpdatedOn = current_timestamp
		FROM
			EventHandler [e]
			   INNER JOIN INSERTED i
			   ON [e].EventId = i.EventId
	END
GO
PRINT N'Creating [dbo].[ExtendedPrice_Updated]...';

GO

CREATE TRIGGER [dbo].[ExtendedPrice_Updated]
	ON ExtendedPrice
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ExtendedPrice_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ExtendedPrice
		SET
			ExtendedPrice.UpdatedOn = current_timestamp
		FROM
			ExtendedPrice [e]
			   INNER JOIN INSERTED i
			   ON [e].ExtendedPriceId = i.ExtendedPriceId
	END
GO
PRINT N'Creating [dbo].[FailedTransaction_Updated]...';

GO

CREATE TRIGGER [dbo].[FailedTransaction_Updated]
	ON FailedTransaction
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('FailedTransaction_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			FailedTransaction
		SET
			FailedTransaction.UpdatedOn = current_timestamp
		FROM
			FailedTransaction [f]
			   INNER JOIN INSERTED i
			   ON [f].DBRecNo = i.DBRecNo
	END
GO
PRINT N'Creating [dbo].[Feed_Updated]...';

GO

CREATE TRIGGER [dbo].[Feed_Updated]
	ON Feed
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Feed_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Feed
		SET
			Feed.UpdatedOn = current_timestamp
		FROM
			Feed [f]
			   INNER JOIN INSERTED i
			   ON [f].FeedID = i.FeedID
	END
GO
PRINT N'Creating [dbo].[UpdateGenreLocalizedObjectName_Deletes]...';

GO

create trigger dbo.UpdateGenreLocalizedObjectName_Deletes
on dbo.Genre after delete as begin
	set nocount on

	-- When an entity is deleted, remove all its localized names
	delete LocalizedObjectName
	from LocalizedObjectName
		inner join deleted on LocalizedObjectName.ObjectId = deleted.GenreID and LocalizedObjectName.ObjectType = 'genre'
end
GO
PRINT N'Creating [dbo].[Genre_Updated]...';

GO

CREATE TRIGGER [dbo].[Genre_Updated]
	ON Genre
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Genre_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Genre
		SET
			Genre.UpdatedOn = current_timestamp
		FROM
			Genre [g]
			   INNER JOIN INSERTED i
			   ON [g].GenreID = i.GenreID
	END
GO
PRINT N'Creating [dbo].[GiftCard_Updated]...';

GO

CREATE TRIGGER [dbo].[GiftCard_Updated]
	ON GiftCard
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('GiftCard_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			GiftCard
		SET
			GiftCard.UpdatedOn = current_timestamp
		FROM
			GiftCard [g]
			   INNER JOIN INSERTED i
			   ON [g].GiftCardID = i.GiftCardID
	END
GO
PRINT N'Creating [dbo].[GiftCardStore_Updated]...';

GO

CREATE TRIGGER [dbo].[GiftCardStore_Updated]
	ON GiftCardStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('GiftCardStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			GiftCardStore
		SET
			GiftCardStore.UpdatedOn = current_timestamp
		FROM
			GiftCardStore [g]
			   INNER JOIN INSERTED i
			   ON [g].GiftCardID = i.GiftCardID
			   AND [g].StoreID = i.StoreID
	END
GO
PRINT N'Creating [dbo].[GiftCardUsage_Updated]...';

GO

CREATE TRIGGER [dbo].[GiftCardUsage_Updated]
	ON GiftCardUsage
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('GiftCardUsage_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			GiftCardUsage
		SET
			GiftCardUsage.UpdatedOn = current_timestamp
		FROM
			GiftCardUsage [g]
			   INNER JOIN INSERTED i
			   ON [g].GiftCardUsageID = i.GiftCardUsageID
	END
GO
PRINT N'Creating [dbo].[GlobalConfig_Updated]...';

GO

CREATE TRIGGER [dbo].[GlobalConfig_Updated]
	ON GlobalConfig
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('GlobalConfig_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			GlobalConfig
		SET
			GlobalConfig.UpdatedOn = current_timestamp
		FROM
			GlobalConfig [g]
			   INNER JOIN INSERTED i
			   ON [g].GlobalConfigID = i.GlobalConfigID
	END
GO
PRINT N'Creating [dbo].[Inventory_Updated]...';

GO

CREATE TRIGGER [dbo].[Inventory_Updated]
	ON Inventory
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Inventory_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Inventory
		SET
			Inventory.UpdatedOn = current_timestamp
		FROM
			Inventory [inv]
			   INNER JOIN INSERTED i
			   ON [inv].InventoryID = i.InventoryID
	END
GO
PRINT N'Creating [dbo].[KitCart_Updated]...';

GO

CREATE TRIGGER [dbo].[KitCart_Updated]
	ON KitCart
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('KitCart_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			KitCart
		SET
			KitCart.UpdatedOn = current_timestamp
		FROM
			KitCart [k]
			   INNER JOIN INSERTED i
			   ON [k].KitCartRecID = i.KitCartRecID
	END
GO
PRINT N'Creating [dbo].[KitGroup_Updated]...';

GO

CREATE TRIGGER [dbo].[KitGroup_Updated]
	ON KitGroup
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('KitGroup_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			KitGroup
		SET
			KitGroup.UpdatedOn = current_timestamp
		FROM
			KitGroup [k]
			   INNER JOIN INSERTED i
			   ON [k].KitGroupID = i.KitGroupID
	END
GO
PRINT N'Creating [dbo].[KitGroupType_Updated]...';

GO

CREATE TRIGGER [dbo].[KitGroupType_Updated]
	ON KitGroupType
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('KitGroupType_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			KitGroupType
		SET
			KitGroupType.UpdatedOn = current_timestamp
		FROM
			KitGroupType [k]
			   INNER JOIN INSERTED i
			   ON [k].KitGroupTypeID = i.KitGroupTypeID
	END
GO
PRINT N'Creating [dbo].[KitItem_Updated]...';

GO

CREATE TRIGGER [dbo].[KitItem_Updated]
	ON KitItem
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('KitItem_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			KitItem
		SET
			KitItem.UpdatedOn = current_timestamp
		FROM
			KitItem [k]
			   INNER JOIN INSERTED i
			   ON [k].KitItemID = i.KitItemID
	END
GO
PRINT N'Creating [dbo].[Library_Updated]...';

GO

CREATE TRIGGER [dbo].[Library_Updated]
	ON Library
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Library_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Library
		SET
			Library.UpdatedOn = current_timestamp
		FROM
			Library [l]
			   INNER JOIN INSERTED i
			   ON [l].LibraryID = i.LibraryID
	END
GO
PRINT N'Creating [dbo].[LocaleSetting_Updated]...';

GO

CREATE TRIGGER [dbo].[LocaleSetting_Updated]
	ON LocaleSetting
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('LocaleSetting_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			LocaleSetting
		SET
			LocaleSetting.UpdatedOn = current_timestamp
		FROM
			LocaleSetting [l]
			   INNER JOIN INSERTED i
			   ON [l].LocaleSettingID = i.LocaleSettingID
	END
GO
PRINT N'Creating [dbo].[UpdateManufacturerLocalizedObjectName_Deletes]...';

GO

create trigger dbo.UpdateManufacturerLocalizedObjectName_Deletes
on dbo.Manufacturer after delete as begin
	set nocount on

	-- When an entity is deleted, remove all its localized names
	delete LocalizedObjectName
	from LocalizedObjectName
		inner join deleted on LocalizedObjectName.ObjectId = deleted.ManufacturerID and LocalizedObjectName.ObjectType = 'manufacturer'
end
GO
PRINT N'Creating [dbo].[Manufacturer_Updated]...';

GO

CREATE TRIGGER [dbo].[Manufacturer_Updated]
	ON Manufacturer
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Manufacturer_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Manufacturer
		SET
			Manufacturer.UpdatedOn = current_timestamp
		FROM
			Manufacturer [m]
			   INNER JOIN INSERTED i
			   ON [m].ManufacturerID = i.ManufacturerID
	END
GO
PRINT N'Creating [dbo].[MultiShipOrder_Shipment_Updated]...';

GO

CREATE TRIGGER [dbo].[MultiShipOrder_Shipment_Updated]
	ON MultiShipOrder_Shipment
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('MultiShipOrder_Shipment_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			MultiShipOrder_Shipment
		SET
			MultiShipOrder_Shipment.UpdatedOn = current_timestamp
		FROM
			MultiShipOrder_Shipment [m]
			   INNER JOIN INSERTED i
			   ON [m].MultiShipOrder_ShipmentGUID = i.MultiShipOrder_ShipmentGUID
	END
GO
PRINT N'Creating [dbo].[News_Updated]...';

GO

CREATE TRIGGER [dbo].[News_Updated]
	ON News
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('News_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			News
		SET
			News.UpdatedOn = current_timestamp
		FROM
			News [n]
			   INNER JOIN INSERTED i
			   ON [n].NewsID = i.NewsID
	END
GO
PRINT N'Creating [dbo].[NewsStore_Updated]...';

GO

CREATE TRIGGER [dbo].[NewsStore_Updated]
	ON NewsStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('NewsStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			NewsStore
		SET
			NewsStore.UpdatedOn = current_timestamp
		FROM
			NewsStore [n]
			   INNER JOIN INSERTED i
			   ON [n].NewsID = i.NewsID
			   AND [n].StoreID = i.StoreID
	END
GO
PRINT N'Creating [dbo].[OrderNumber_Updated]...';

GO

CREATE TRIGGER [dbo].[OrderNumber_Updated]
	ON OrderNumbers
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('OrderNumber_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			OrderNumbers
		SET
			OrderNumbers.UpdatedOn = current_timestamp
		FROM
			OrderNumbers [o]
			   INNER JOIN INSERTED i
			   ON [o].OrderNumber = i.OrderNumber
	END
GO
PRINT N'Creating [dbo].[OrderOption_Updated]...';

GO

CREATE TRIGGER [dbo].[OrderOption_Updated]
	ON OrderOption
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('OrderOption_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			OrderOption
		SET
			OrderOption.UpdatedOn = current_timestamp
		FROM
			OrderOption [o]
			   INNER JOIN INSERTED i
			   ON [o].OrderOptionID = i.OrderOptionID
	END
GO
PRINT N'Creating [dbo].[OrderOptionStore_Updated]...';

GO

CREATE TRIGGER [dbo].[OrderOptionStore_Updated]
	ON OrderOptionStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('OrderOptionStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			OrderOptionStore
		SET
			OrderOptionStore.UpdatedOn = current_timestamp
		FROM
			OrderOptionStore [o]
			   INNER JOIN INSERTED i
			   ON [o].OrderOptionID = i.OrderOptionID
			   AND [o].StoreID = i.StoreID
	END
GO
PRINT N'Creating [dbo].[Orders_Updated]...';

GO

CREATE TRIGGER [dbo].[Orders_Updated]
	ON Orders
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Orders_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Orders
		SET
			Orders.UpdatedOn = current_timestamp
		FROM
			Orders [o]
			   INNER JOIN INSERTED i
			   ON [o].OrderNumber = i.OrderNumber
	END
GO
PRINT N'Creating [dbo].[Orders_KitCart_Updated]...';

GO

CREATE TRIGGER [dbo].[Orders_KitCart_Updated]
	ON Orders_KitCart
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Orders_KitCart_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Orders_KitCart
		SET
			Orders_KitCart.UpdatedOn = current_timestamp
		FROM
			Orders_KitCart [o]
			   INNER JOIN INSERTED i
			   ON [o].KitCartRecID = i.KitCartRecID
	END
GO
PRINT N'Creating [dbo].[Orders_ShoppingCart_Updated]...';

GO

CREATE TRIGGER [dbo].[Orders_ShoppingCart_Updated]
	ON Orders_ShoppingCart
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Orders_ShoppingCart_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Orders_ShoppingCart
		SET
			Orders_ShoppingCart.UpdatedOn = current_timestamp
		FROM
			Orders_ShoppingCart [o]
			   INNER JOIN INSERTED i
			   ON [o].ShoppingCartRecID = i.ShoppingCartRecID
	END
GO
PRINT N'Creating [dbo].[OrderShipment_Updated]...';

GO

CREATE TRIGGER [dbo].[OrderShipment_Updated]
	ON OrderShipment
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('OrderShipment_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			OrderShipment
		SET
			OrderShipment.UpdatedOn = current_timestamp
		FROM
			OrderShipment [o]
			   INNER JOIN INSERTED i
			   ON [o].OrderShipmentID = i.OrderShipmentID
	END
GO
PRINT N'Creating [dbo].[OrderTransaction_Updated]...';

GO

CREATE TRIGGER [dbo].[OrderTransaction_Updated]
	ON OrderTransaction
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('OrderTransaction_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			OrderTransaction
		SET
			OrderTransaction.UpdatedOn = current_timestamp
		FROM
			OrderTransaction [o]
			   INNER JOIN INSERTED i
			   ON [o].OrderTransactionID = i.OrderTransactionID
	END
GO
PRINT N'Creating [dbo].[PasswordLog_Updated]...';

GO

CREATE TRIGGER [dbo].[PasswordLog_Updated]
	ON PasswordLog
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('PasswordLog_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			PasswordLog
		SET
			PasswordLog.UpdatedOn = current_timestamp
		FROM
			PasswordLog [p]
			   INNER JOIN INSERTED i
			   ON [p].CustomerID = i.CustomerID
			   AND [p].ChangeDt = i.ChangeDt
	END
GO
PRINT N'Creating [dbo].[UpdateProductLocalizedObjectName_Deletes]...';

GO

create trigger dbo.UpdateProductLocalizedObjectName_Deletes
on dbo.Product after delete as begin
	set nocount on

	-- When a product is deleted, remove all its localized names
	delete LocalizedObjectName
	from LocalizedObjectName
		inner join deleted on LocalizedObjectName.ObjectId = deleted.ProductID and LocalizedObjectName.ObjectType = 'product'
end
GO
PRINT N'Creating [dbo].[Product_Updated]...';

GO

CREATE TRIGGER [dbo].[Product_Updated]
	ON Product
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Product_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Product
		SET
			Product.UpdatedOn = current_timestamp
		FROM
			Product [p]
			   INNER JOIN INSERTED i
			   ON [p].ProductID = i.ProductID
	END
GO
PRINT N'Creating [dbo].[ProductAffiliate_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductAffiliate_Updated]
	ON ProductAffiliate
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductAffiliate_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductAffiliate
		SET
			ProductAffiliate.UpdatedOn = current_timestamp
		FROM
			ProductAffiliate [p]
			   INNER JOIN INSERTED i
			   ON [p].ProductID = i.ProductID
			   AND [p].AffiliateID = i.AffiliateID
	END
GO
PRINT N'Creating [dbo].[ProductCategory_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductCategory_Updated]
	ON ProductCategory
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductCategory_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductCategory
		SET
			ProductCategory.UpdatedOn = current_timestamp
		FROM
			ProductCategory [pc]
			   INNER JOIN INSERTED i
			   ON [pc].CategoryID = i.CategoryID
			   AND [pc].ProductID = i.ProductID
	END
GO
PRINT N'Creating [dbo].[ProductCustomerLevel_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductCustomerLevel_Updated]
	ON ProductCustomerLevel
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductCustomerLevel_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductCustomerLevel
		SET
			ProductCustomerLevel.UpdatedOn = current_timestamp
		FROM
			ProductCustomerLevel [pcl]
			   INNER JOIN INSERTED i
			   ON [pcl].CustomerLevelID = i.CustomerLevelID
			   AND [pcl].ProductID = i.ProductID
	END
GO
PRINT N'Creating [dbo].[ProductDistributor_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductDistributor_Updated]
	ON ProductDistributor
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductDistributor_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductDistributor
		SET
			ProductDistributor.UpdatedOn = current_timestamp
		FROM
			ProductDistributor [pd]
			   INNER JOIN INSERTED i
			   ON [pd].DistributorID = i.DistributorID
			   AND [pd].ProductID = i.ProductID
	END
GO
PRINT N'Creating [dbo].[ProductGenre_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductGenre_Updated]
	ON ProductGenre
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductGenre_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductGenre
		SET
			ProductGenre.UpdatedOn = current_timestamp
		FROM
			ProductGenre [pg]
			   INNER JOIN INSERTED i
			   ON [pg].GenreID = i.GenreID
			   AND [pg].ProductID = i.ProductID
	END
GO
PRINT N'Creating [dbo].[ProductLocaleSetting_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductLocaleSetting_Updated]
	ON ProductLocaleSetting
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductLocaleSetting_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductLocaleSetting
		SET
			ProductLocaleSetting.UpdatedOn = current_timestamp
		FROM
			ProductLocaleSetting [pl]
			   INNER JOIN INSERTED i
			   ON [pl].LocaleSettingID = i.LocaleSettingID
			   AND [pl].ProductID = i.ProductID
	END
GO
PRINT N'Creating [dbo].[ProductManufacturer_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductManufacturer_Updated]
	ON ProductManufacturer
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductManufacturer_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductManufacturer
		SET
			ProductManufacturer.UpdatedOn = current_timestamp
		FROM
			ProductManufacturer [pm]
			   INNER JOIN INSERTED i
			   ON [pm].ManufacturerID = i.ManufacturerID
			   AND [pm].ProductID = i.ProductID
	END
GO
PRINT N'Creating [dbo].[ProductSection_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductSection_Updated]
	ON ProductSection
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductSection_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductSection
		SET
			ProductSection.UpdatedOn = current_timestamp
		FROM
			ProductSection [ps]
			   INNER JOIN INSERTED i
			   ON [ps].SectionID = i.SectionID
			   AND [ps].ProductID = i.ProductID
	END
GO
PRINT N'Creating [dbo].[ProductStore_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductStore_Updated]
	ON ProductStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductStore
		SET
			ProductStore.UpdatedOn = current_timestamp
		FROM
			ProductStore [ps]
			   INNER JOIN INSERTED i
			   ON [ps].ID = i.ID
	END
GO
PRINT N'Creating [dbo].[ProductType_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductType_Updated]
	ON ProductType
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductType_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductType
		SET
			ProductType.UpdatedOn = current_timestamp
		FROM
			ProductType [p]
			   INNER JOIN INSERTED i
			   ON [p].ProductTypeID = i.ProductTypeID
	END
GO
PRINT N'Creating [dbo].[UpdateProductVariantLocalizedObjectName_Deletes]...';

GO

create trigger dbo.UpdateProductVariantLocalizedObjectName_Deletes
on dbo.ProductVariant after delete as begin
	set nocount on

	-- When a product is deleted, remove all its localized names
	delete LocalizedObjectName
	from LocalizedObjectName
		inner join deleted on LocalizedObjectName.ObjectId = deleted.VariantID and LocalizedObjectName.ObjectType = 'productvariant'
end
GO
PRINT N'Creating [dbo].[ProductVariant_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductVariant_Updated]
	ON ProductVariant
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductVariant_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductVariant
		SET
			ProductVariant.UpdatedOn = current_timestamp
		FROM
			ProductVariant [p]
			   INNER JOIN INSERTED i
			   ON [p].VariantID = i.VariantID
	END
GO
PRINT N'Creating [dbo].[ProductVector_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductVector_Updated]
	ON ProductVector
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductVector_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductVector
		SET
			ProductVector.UpdatedOn = current_timestamp
		FROM
			ProductVector [pv]
			   INNER JOIN INSERTED i
			   ON [pv].VectorID = i.VectorID
			   AND [pv].ProductID = i.ProductID
	END
GO
PRINT N'Creating [dbo].[ProductView_Updated]...';

GO

CREATE TRIGGER [dbo].[ProductView_Updated]
	ON ProductView
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ProductView_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ProductView
		SET
			ProductView.UpdatedOn = current_timestamp
		FROM
			ProductView [p]
			   INNER JOIN INSERTED i
			   ON [p].ViewID = i.ViewID
	END
GO
PRINT N'Creating [dbo].[PromotionLineItem_Updated]...';

GO

CREATE TRIGGER [dbo].[PromotionLineItem_Updated]
	ON PromotionLineItem
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('PromotionLineItem_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			PromotionLineItem
		SET
			PromotionLineItem.UpdatedOn = current_timestamp
		FROM
			PromotionLineItem [p]
			   INNER JOIN INSERTED i
			   ON [p].id = i.id
	END
GO
PRINT N'Creating [dbo].[Promotions_Updated]...';

GO

CREATE TRIGGER [dbo].[Promotions_Updated]
	ON Promotions
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Promotions_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Promotions
		SET
			Promotions.UpdatedOn = current_timestamp
		FROM
			Promotions [p]
			   INNER JOIN INSERTED i
			   ON [p].Id = i.Id
	END
GO
PRINT N'Creating [dbo].[PromotionStore_Updated]...';

GO

CREATE TRIGGER [dbo].[PromotionStore_Updated]
	ON PromotionStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('PromotionStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			PromotionStore
		SET
			PromotionStore.UpdatedOn = current_timestamp
		FROM
			PromotionStore [p]
			   INNER JOIN INSERTED i
			   ON [p].ID = i.ID
	END
GO
PRINT N'Creating [dbo].[PromotionUsage_Updated]...';

GO

CREATE TRIGGER [dbo].[PromotionUsage_Updated]
	ON PromotionUsage
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('PromotionUsage_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			PromotionUsage
		SET
			PromotionUsage.UpdatedOn = current_timestamp
		FROM
			PromotionUsage [p]
			   INNER JOIN INSERTED i
			   ON [p].Id = i.Id
	END
GO
PRINT N'Creating [dbo].[QuantityDiscount_Updated]...';

GO

CREATE TRIGGER [dbo].[QuantityDiscount_Updated]
	ON QuantityDiscount
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('QuantityDiscount_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			QuantityDiscount
		SET
			QuantityDiscount.UpdatedOn = current_timestamp
		FROM
			QuantityDiscount [q]
			   INNER JOIN INSERTED i
			   ON [q].QuantityDiscountID = i.QuantityDiscountID
	END
GO
PRINT N'Creating [dbo].[QuantityDiscountTable_Updated]...';

GO

CREATE TRIGGER [dbo].[QuantityDiscountTable_Updated]
	ON QuantityDiscountTable
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('QuantityDiscountTable_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			QuantityDiscountTable
		SET
			QuantityDiscountTable.UpdatedOn = current_timestamp
		FROM
			QuantityDiscountTable [q]
			   INNER JOIN INSERTED i
			   ON [q].QuantityDiscountTableID = i.QuantityDiscountTableID
	END
GO
PRINT N'Creating [dbo].[Rating_Updated]...';

GO

CREATE TRIGGER [dbo].[Rating_Updated]
	ON Rating
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Rating_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Rating
		SET
			Rating.UpdatedOn = current_timestamp
		FROM
			Rating [r]
			   INNER JOIN INSERTED i
			   ON [r].RatingID = i.RatingID
	END
GO
PRINT N'Creating [dbo].[RatingCommentHelpfulness_Updated]...';

GO

CREATE TRIGGER [dbo].[RatingCommentHelpfulness_Updated]
	ON RatingCommentHelpfulness
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('RatingCommentHelpfulness_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			RatingCommentHelpfulness
		SET
			RatingCommentHelpfulness.UpdatedOn = current_timestamp
		FROM
			RatingCommentHelpfulness [r]
			   INNER JOIN INSERTED i
			   ON [r].StoreID = i.StoreID
			   AND [r].ProductID = i.ProductID
			   AND [r].RatingCustomerID = i.RatingCustomerID
			   AND [r].VotingCustomerID = i.VotingCustomerID
	END
GO
PRINT N'Creating [dbo].[RestrictedIP_Updated]...';

GO

CREATE TRIGGER [dbo].[RestrictedIP_Updated]
	ON RestrictedIP
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('RestrictedIP_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			RestrictedIP
		SET
			RestrictedIP.UpdatedOn = current_timestamp
		FROM
			RestrictedIP [r]
			   INNER JOIN INSERTED i
			   ON [r].DBRecNo = i.DBRecNo
	END
GO
PRINT N'Creating [dbo].[SalesPrompt_Updated]...';

GO

CREATE TRIGGER [dbo].[SalesPrompt_Updated]
	ON SalesPrompt
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('SalesPrompt_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			SalesPrompt
		SET
			SalesPrompt.UpdatedOn = current_timestamp
		FROM
			SalesPrompt [s]
			   INNER JOIN INSERTED i
			   ON [s].SalesPromptID = i.SalesPromptID
	END
GO
PRINT N'Creating [dbo].[SearchLog_Updated]...';

GO

CREATE TRIGGER [dbo].[SearchLog_Updated]
	ON SearchLog
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('SearchLog_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			SearchLog
		SET
			SearchLog.UpdatedOn = current_timestamp
		FROM
			SearchLog [s]
			   INNER JOIN INSERTED i
			   ON [s].SearchTerm = i.SearchTerm
			   AND [s].CustomerID = i.CustomerID
			   AND [s].CreatedOn = i.CreatedOn
	END
GO
PRINT N'Creating [dbo].[Section_Updated]...';

GO

CREATE TRIGGER [dbo].[Section_Updated]
	ON Section
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Section_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Section
		SET
			Section.UpdatedOn = current_timestamp
		FROM
			Section [s]
			   INNER JOIN INSERTED i
			   ON [s].SectionID = i.SectionID
	END
GO
PRINT N'Creating [dbo].[UpdateSectionLocalizedObjectName_Deletes]...';

GO

create trigger dbo.UpdateSectionLocalizedObjectName_Deletes
on dbo.Section after delete as begin
	set nocount on

	-- When an entity is deleted, remove all its localized names
	delete LocalizedObjectName
	from LocalizedObjectName
		inner join deleted on LocalizedObjectName.ObjectId = deleted.SectionID and LocalizedObjectName.ObjectType = 'section'
end
GO
PRINT N'Creating [dbo].[SecurityLog_Updated]...';

GO

CREATE TRIGGER [dbo].[SecurityLog_Updated]
	ON SecurityLog
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('SecurityLog_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			SecurityLog
		SET
			SecurityLog.UpdatedOn = current_timestamp
		FROM
			SecurityLog [s]
			   INNER JOIN INSERTED i
			   ON [s].logid = i.logid
	END
GO
PRINT N'Creating [dbo].[ShippingByProduct_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingByProduct_Updated]
	ON ShippingByProduct
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingByProduct_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingByProduct
		SET
			ShippingByProduct.UpdatedOn = current_timestamp
		FROM
			ShippingByProduct [s]
			   INNER JOIN INSERTED i
			   ON [s].ShippingByProductID = i.ShippingByProductID
	END
GO
PRINT N'Creating [dbo].[ShippingByTotal_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingByTotal_Updated]
	ON ShippingByTotal
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingByTotal_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingByTotal
		SET
			ShippingByTotal.UpdatedOn = current_timestamp
		FROM
			ShippingByTotal [s]
			   INNER JOIN INSERTED i
			   ON [s].RowGUID = i.RowGUID
	END
GO
PRINT N'Creating [dbo].[ShippingByTotalByPercent_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingByTotalByPercent_Updated]
	ON ShippingByTotalByPercent
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingByTotalByPercent_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingByTotalByPercent
		SET
			ShippingByTotalByPercent.UpdatedOn = current_timestamp
		FROM
			ShippingByTotalByPercent [s]
			   INNER JOIN INSERTED i
			   ON [s].RowGUID = i.RowGUID
	END
GO
PRINT N'Creating [dbo].[ShippingByWeight_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingByWeight_Updated]
	ON ShippingByWeight
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingByWeight_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingByWeight
		SET
			ShippingByWeight.UpdatedOn = current_timestamp
		FROM
			ShippingByWeight [s]
			   INNER JOIN INSERTED i
			   ON [s].RowGUID = i.RowGUID
	END
GO
PRINT N'Creating [dbo].[ShippingCalculation_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingCalculation_Updated]
	ON ShippingCalculation
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingCalculation_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingCalculation
		SET
			ShippingCalculation.UpdatedOn = current_timestamp
		FROM
			ShippingCalculation [s]
			   INNER JOIN INSERTED i
			   ON [s].ShippingCalculationID = i.ShippingCalculationID
	END
GO
PRINT N'Creating [dbo].[ShippingCalculationStore_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingCalculationStore_Updated]
	ON ShippingCalculationStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingCalculationStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingCalculationStore
		SET
			ShippingCalculationStore.UpdatedOn = current_timestamp
		FROM
			ShippingCalculationStore [s]
			   INNER JOIN INSERTED i
			   ON [s].ShippingCalculationID = i.ShippingCalculationID
			   AND [s].StoreId = i.StoreId
	END
GO
PRINT N'Creating [dbo].[ShippingImportExport_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingImportExport_Updated]
	ON ShippingImportExport
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingImportExport_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingImportExport
		SET
			ShippingImportExport.UpdatedOn = current_timestamp
		FROM
			ShippingImportExport [s]
			   INNER JOIN INSERTED i
			   ON [s].OrderNumber = i.OrderNumber
	END
GO
PRINT N'Creating [dbo].[ShippingMethod_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingMethod_Updated]
	ON ShippingMethod
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingMethod_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingMethod
		SET
			ShippingMethod.UpdatedOn = current_timestamp
		FROM
			ShippingMethod [s]
			   INNER JOIN INSERTED i
			   ON [s].ShippingMethodID = i.ShippingMethodID
	END
GO
PRINT N'Creating [dbo].[ShippingMethodStore_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingMethodStore_Updated]
	ON ShippingMethodStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingMethodStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingMethodStore
		SET
			ShippingMethodStore.UpdatedOn = current_timestamp
		FROM
			ShippingMethodStore [s]
			   INNER JOIN INSERTED i
			   ON [s].ShippingMethodID = i.ShippingMethodID
			   AND [s].StoreId = i.StoreId
	END
GO
PRINT N'Creating [dbo].[ShippingMethodToCountryMap_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingMethodToCountryMap_Updated]
	ON ShippingMethodToCountryMap
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingMethodToCountryMap_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingMethodToCountryMap
		SET
			ShippingMethodToCountryMap.UpdatedOn = current_timestamp
		FROM
			ShippingMethodToCountryMap [s]
			   INNER JOIN INSERTED i
			   ON [s].ShippingMethodID = i.ShippingMethodID
			   AND [s].CountryID = i.CountryID
	END
GO
PRINT N'Creating [dbo].[ShippingMethodToStateMap_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingMethodToStateMap_Updated]
	ON ShippingMethodToStateMap
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingMethodToStateMap_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingMethodToStateMap
		SET
			ShippingMethodToStateMap.UpdatedOn = current_timestamp
		FROM
			ShippingMethodToStateMap [s]
			   INNER JOIN INSERTED i
			   ON [s].ShippingMethodID = i.ShippingMethodID
			   AND [s].StateID = i.StateID
	END
GO
PRINT N'Creating [dbo].[ShippingMethodToZoneMap_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingMethodToZoneMap_Updated]
	ON ShippingMethodToZoneMap
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingMethodToZoneMap_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingMethodToZoneMap
		SET
			ShippingMethodToZoneMap.UpdatedOn = current_timestamp
		FROM
			ShippingMethodToZoneMap [s]
			   INNER JOIN INSERTED i
			   ON [s].ShippingMethodID = i.ShippingMethodID
			   AND [s].ShippingZoneID = i.ShippingZoneID
	END
GO
PRINT N'Creating [dbo].[ShippingTotalByZone_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingTotalByZone_Updated]
	ON ShippingTotalByZone
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingTotalByZone_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingTotalByZone
		SET
			ShippingTotalByZone.UpdatedOn = current_timestamp
		FROM
			ShippingTotalByZone [s]
			   INNER JOIN INSERTED i
			   ON [s].RowGUID = i.RowGUID
	END
GO
PRINT N'Creating [dbo].[ShippingWeightByZone_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingWeightByZone_Updated]
	ON ShippingWeightByZone
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingWeightByZone_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingWeightByZone
		SET
			ShippingWeightByZone.UpdatedOn = current_timestamp
		FROM
			ShippingWeightByZone [s]
			   INNER JOIN INSERTED i
			   ON [s].RowGUID = i.RowGUID
	END
GO
PRINT N'Creating [dbo].[ShippingZone_Updated]...';

GO

CREATE TRIGGER [dbo].[ShippingZone_Updated]
	ON ShippingZone
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShippingZone_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShippingZone
		SET
			ShippingZone.UpdatedOn = current_timestamp
		FROM
			ShippingZone [s]
			   INNER JOIN INSERTED i
			   ON [s].ShippingZoneID = i.ShippingZoneID
	END
GO
PRINT N'Creating [dbo].[ShoppingCart_Updated]...';

GO

CREATE TRIGGER [dbo].[ShoppingCart_Updated]
	ON ShoppingCart
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ShoppingCart_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ShoppingCart
		SET
			ShoppingCart.UpdatedOn = current_timestamp
		FROM
			ShoppingCart [s]
			   INNER JOIN INSERTED i
			   ON [s].ShoppingCartRecID = i.ShoppingCartRecID
	END
GO
PRINT N'Creating [dbo].[State_Updated]...';

GO

CREATE TRIGGER [dbo].[State_Updated]
	ON [State]
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('State_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			[State]
		SET
			[State].UpdatedOn = current_timestamp
		FROM
			[State] [s]
			   INNER JOIN INSERTED i
			   ON [s].StateID = i.StateID
	END
GO
PRINT N'Creating [dbo].[StateTaxRate_Updated]...';

GO

CREATE TRIGGER [dbo].[StateTaxRate_Updated]
	ON StateTaxRate
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('StateTaxRate_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			StateTaxRate
		SET
			StateTaxRate.UpdatedOn = current_timestamp
		FROM
			StateTaxRate [s]
			   INNER JOIN INSERTED i
			   ON [s].StateTaxID = i.StateTaxID
	END
GO
PRINT N'Creating [dbo].[Store_Updated]...';

GO

CREATE TRIGGER [dbo].[Store_Updated]
	ON Store
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Store_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Store
		SET
			Store.UpdatedOn = current_timestamp
		FROM
			Store [s]
			   INNER JOIN INSERTED i
			   ON [s].StoreID = i.StoreID
	END
GO
PRINT N'Creating [dbo].[StringResource_Updated]...';

GO

CREATE TRIGGER [dbo].[StringResource_Updated]
	ON StringResource
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('StringResource_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			StringResource
		SET
			StringResource.UpdatedOn = current_timestamp
		FROM
			StringResource [s]
			   INNER JOIN INSERTED i
			   ON [s].StringResourceID = i.StringResourceID
	END
GO
PRINT N'Creating [dbo].[TaxClass_Updated]...';

GO

CREATE TRIGGER [dbo].[TaxClass_Updated]
	ON TaxClass
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('TaxClass_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			TaxClass
		SET
			TaxClass.UpdatedOn = current_timestamp
		FROM
			TaxClass [s]
			   INNER JOIN INSERTED i
			   ON [s].TaxClassID = i.TaxClassID
	END
GO
PRINT N'Creating [dbo].[Topic_Updated]...';

GO

CREATE TRIGGER [dbo].[Topic_Updated]
	ON Topic
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Topic_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Topic
		SET
			Topic.UpdatedOn = current_timestamp
		FROM
			Topic [s]
			   INNER JOIN INSERTED i
			   ON [s].TopicID = i.TopicID
	END
GO
PRINT N'Creating [dbo].[TopicStore_Updated]...';

GO

CREATE TRIGGER [dbo].[TopicStore_Updated]
	ON TopicStore
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('TopicStore_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			TopicStore
		SET
			TopicStore.UpdatedOn = current_timestamp
		FROM
			TopicStore [s]
			   INNER JOIN INSERTED i
			   ON [s].TopicID = i.TopicID
			   AND [s].StoreID = i.StoreID
	END
GO
PRINT N'Creating [dbo].[Vector_Updated]...';

GO

CREATE TRIGGER [dbo].[Vector_Updated]
	ON Vector
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('Vector_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			Vector
		SET
			Vector.UpdatedOn = current_timestamp
		FROM
			Vector [v]
			   INNER JOIN INSERTED i
			   ON [v].VectorID = i.VectorID
	END
GO
PRINT N'Creating [dbo].[UpdateVectorLocalizedObjectName_Deletes]...';

GO

create trigger dbo.UpdateVectorLocalizedObjectName_Deletes
on dbo.Vector after delete as begin
	set nocount on

	-- When an entity is deleted, remove all its localized names
	delete LocalizedObjectName
	from LocalizedObjectName
		inner join deleted on LocalizedObjectName.ObjectId = deleted.VectorID and LocalizedObjectName.ObjectType = 'vector'
end
GO
PRINT N'Creating [dbo].[ZipTaxRate_Updated]...';

GO

CREATE TRIGGER [dbo].[ZipTaxRate_Updated]
	ON ZipTaxRate
	FOR UPDATE, INSERT
	AS
	BEGIN
		IF @@rowcount = 0 RETURN;

		IF trigger_nestlevel(object_ID('ZipTaxRate_Updated')) > 1 RETURN;

		SET NOCOUNT ON

		UPDATE
			ZipTaxRate
		SET
			ZipTaxRate.UpdatedOn = current_timestamp
		FROM
			ZipTaxRate [v]
			   INNER JOIN INSERTED i
			   ON [v].ZipTaxID = i.ZipTaxID
	END
GO
PRINT N'Creating [dbo].[ExchangeRate]...';

GO


create function dbo.ExchangeRate(@CurrencyCode varchar(3))
RETURNS money
AS
BEGIN
    declare @SourceExchangerate money, @TargetExchangerate money, @Exchangerate money, @StoreBaseCurrency varchar(3)
    select @StoreBaseCurrency = ConfigValue from dbo.Appconfig with (nolock) where [name] = 'Localization.StoreCurrency'
    select @TargetExchangerate = ExchangeRate from dbo.currency with (nolock) where CurrencyCode = @CurrencyCode
    select @SourceExchangerate = ExchangeRate from dbo.currency with (nolock) where CurrencyCode = @StoreBaseCurrency
    if @SourceExchangerate is null or @SourceExchangerate = 0 or @TargetExchangerate is null or @TargetExchangerate = 0
        set @exchangerate = 1
    else
        set @exchangerate = @TargetExchangerate/@SourceExchangerate

    RETURN @exchangerate
END
GO
PRINT N'Creating [dbo].[getCategoryPath]...';

GO


CREATE function [dbo].[getCategoryPath](@categoryID int)
    RETURNS nvarchar(4000)
AS
BEGIN
    DECLARE @categorypath nvarchar(4000), @catID int, @catName nvarchar(400)
    SET @categorypath  = ''

    SELECT @catID = ParentCategoryID, @catName = Name From dbo.category with (nolock) where CategoryID = @categoryID
    WHILE @@rowcount > 0 BEGIN
        SET @categorypath = '\' + @catName + @categorypath
        SELECT @catID = ParentCategoryID, @catName = Name From dbo.category with (nolock) where CategoryID = @catID
    END

    RETURN @categorypath
END
GO
PRINT N'Creating [dbo].[GetCustomerLevelPrice]...';

GO

CREATE FUNCTION dbo.GetCustomerLevelPrice(@VariantID int, @CustomerLevelID int)
RETURNS decimal(15, 6)
AS
BEGIN
    DECLARE @levelprice money, @LevelDiscountPercent money, @LevelDiscountsApplyToExtendedPrices tinyint
    SELECT @LevelDiscountPercent = LevelDiscountPercent, @LevelDiscountsApplyToExtendedPrices = LevelDiscountsApplyToExtendedPrices FROM dbo.customerlevel with (nolock) WHERE customerlevelid = @CustomerLevelID

    SELECT @levelprice = case
                          when @CustomerLevelID = 0 and pv.SalePrice is not null and pv.SalePrice > 0 then pv.SalePrice
                          when e.price is not null and pcl.CustomerLevelID is not null then case when isnull(@LevelDiscountsApplyToExtendedPrices, 0) = 1 and isnull(@LevelDiscountPercent, 0.0) > 0 then (e.price * (100.0-@LevelDiscountPercent))/100.0 else e.price end
                          else case when isnull(@LevelDiscountPercent, 0.0) > 0 then round((pv.Price * (100.0-@LevelDiscountPercent))/100.0, 2) else pv.Price end
                         end
    FROM dbo.ProductVariant pv with (nolock)
        left join dbo.ExtendedPrice e with (nolock) on pv.VariantID = e.VariantID and e.CustomerLevelID = @CustomerLevelID
        left join ProductCustomerlevel pcl with (nolock) on pv.ProductID = pcl.ProductID and pcl.CustomerLevelID  =@CustomerLevelID
    WHERE pv.VariantID = @VariantID


    RETURN @levelprice
END
GO
PRINT N'Creating [dbo].[GetIndexColumnOrder]...';

GO



CREATE FUNCTION [dbo].[GetIndexColumnOrder]
(
    @object_id INT,
    @index_id TINYINT,
    @column_id TINYINT
)
RETURNS NVARCHAR(5)
AS
BEGIN
    DECLARE @r NVARCHAR(5)
    SELECT @r = CASE INDEXKEY_PROPERTY
    (
        @object_id,
        @index_id,
        @column_id,
        'IsDescending'
    )
        WHEN 1 THEN N' DESC'
        ELSE N''
    END
    RETURN @r
END
GO
PRINT N'Creating [dbo].[GetIndexColumns]...';

GO


CREATE FUNCTION [dbo].[GetIndexColumns]
(
    @table_name SYSNAME,
    @object_id INT,
    @index_id TINYINT
)
RETURNS NVARCHAR(4000)
AS
BEGIN
    DECLARE
        @colnames NVARCHAR(4000),
        @thisColID INT,
        @thisColName SYSNAME

    SET @colnames = INDEX_COL(@table_name, @index_id, 1)
        + dbo.GetIndexColumnOrder(@object_id, @index_id, 1)

    SET @thisColID = 2
    SET @thisColName = INDEX_COL(@table_name, @index_id, @thisColID)
        + dbo.GetIndexColumnOrder(@object_id, @index_id, @thisColID)

    WHILE (@thisColName IS NOT NULL)
    BEGIN
        SET @thisColID = @thisColID + 1
        SET @colnames = @colnames + ', ' + @thisColName

        SET @thisColName = INDEX_COL(@table_name, @index_id, @thisColID)
            + dbo.GetIndexColumnOrder(@object_id, @index_id, @thisColID)
    END
    RETURN @colNames
END
GO
PRINT N'Creating [dbo].[getSectionPath]...';

GO


create function [dbo].[getSectionPath](@sectionID int)
    RETURNS nvarchar(4000)
AS
BEGIN
    DECLARE @Sectionpath nvarchar(4000), @SecID int, @SectionName nvarchar(400)
    SET @Sectionpath  = ''

    SELECT @SecID = ParentSectionID, @SectionName = Name From dbo.Section with (nolock) where SectionID = @sectionID
    WHILE @@rowcount > 0 BEGIN
        SET @Sectionpath = '\' + @SectionName + @Sectionpath
        SELECT @SecID = ParentSectionID, @SectionName = Name From dbo.Section with (nolock) where SectionID = @SecID
    END

    RETURN @Sectionpath
END
GO
PRINT N'Creating [dbo].[KitPriceDelta]...';

GO


CREATE FUNCTION dbo.KitPriceDelta(@CustomerID int, @ProductID int, @ShoppingCartRecID int)
RETURNS decimal(15, 6)
AS
BEGIN
    DECLARE @deltaprice money

    SELECT @deltaprice = sum(quantity*pricedelta)
    FROM dbo.kitcart kc with (NOLOCK)  join dbo.kititem ki with (NOLOCK) on kc.kititemid = ki.kititemid
    WHERE CustomerID = @CustomerID and ProductID = @ProductID and ShoppingCartRecid = @ShoppingCartRecID

    RETURN @deltaprice
END
GO
PRINT N'Creating [dbo].[KitWeightDelta]...';

GO


CREATE FUNCTION dbo.KitWeightDelta(@CustomerID int, @ProductID int, @ShoppingCartRecID int)
RETURNS money
AS
BEGIN
    DECLARE @deltaweight money

    SELECT @deltaweight = sum(quantity*weightdelta)
    FROM dbo.kitcart kc with (NOLOCK)  join dbo.kititem ki with (NOLOCK) on kc.kititemid = ki.kititemid
    WHERE CustomerID = @CustomerID and ProductID = @ProductID and ShoppingCartRecid = @ShoppingCartRecID

    RETURN @deltaweight

END
GO
PRINT N'Creating [dbo].[MakeSEName]...';

GO


create function dbo.MakeSEName(@string varchar(8000))
RETURNS varchar(4000)
AS
BEGIN
    declare @charindex int, @newstring varchar(8000)

    set @string = replace(replace(replace(@string, ' ', '-'), '---', '-'), '--', '-')

    set @newstring = ''

    select @charindex = PATINDEX('%[^a-z0-9_-]%', @string)

    IF @charindex = len(@string)
        select @newstring = left(@string, @charindex-1)

    ELSE BEGIN
        select @newstring = @newstring + left(@string, @charindex-1), @string = substring(@string, @charindex+1, len(@string)-@charindex+1)
        WHILE PATINDEX('%[^a-z0-9_-]%', @string) > 0 BEGIN
            select @charindex = PATINDEX('%[^a-z0-9_-]%', @string)
            IF @charindex = len(@string)
                select @newstring = @newstring + left(@string, @charindex-1), @string = ''
            ELSE
                select @newstring = @newstring + left(@string, @charindex-1), @string = substring(@string, @charindex+1, len(@string)-@charindex+1)
        END
    END
    RETURN lower(@newstring)

END
GO
PRINT N'Creating [dbo].[SetMlValue]...';

GO

create function dbo.SetMlValue(@originalValue nvarchar(max), @newValue nvarchar(max), @locale nvarchar(max))
	returns nvarchar(max)
as begin

	if(left(@originalValue, 4) = '<ml>') begin
		declare @localeXml xml = cast(@originalValue as xml)

		set @localeXml.modify('delete /ml/locale[@name = sql:variable("@locale")]')
		set @localeXml.modify('insert <locale name="{sql:variable(''@locale'')}">{sql:variable("@newValue")}</locale> into (/ml)[1]')

		return cast(@localeXml as nvarchar(max))
	end
	else begin
		return @newValue
	end

	return @newValue
end
GO
PRINT N'Creating [dbo].[ZeroFloor]...';

GO


CREATE FUNCTION dbo.ZeroFloor(@value decimal(15, 6))
RETURNS decimal(15, 6)
AS BEGIN
    IF @value < 0
        SET @value = 0
    RETURN @value
END
GO
PRINT N'Creating [dbo].[ParseMlLocales]...';

GO

/*********** ML Data Parsing Functions ********************/

create function dbo.ParseMlLocales(@value nvarchar(max))
	returns @locales TABLE (
		Locale nvarchar(max),
		Value nvarchar(max)
	)
as begin

	if(left(@value, 4) = '<ml>') begin
		declare @localeXml xml = cast(@value as xml)

		insert into @locales
		select
			T.locale.value('(@name)[1]', 'nvarchar(max)'),
			T.locale.value('(text())[1]', 'nvarchar(max)')
		from
			@localeXml.nodes('ml/locale') AS T(locale);
	end
	else begin
		insert into @locales
		values (null, @value)
	end

	return
end
GO
PRINT N'Creating [dbo].[Split]...';

GO


CREATE FUNCTION dbo.Split(@String nvarchar(max), @Delimiter char(1))
RETURNS @Results TABLE (Items nvarchar(4000))
AS
BEGIN
    DECLARE @STARTINDEX INT, @ENDINDEX INT, @STRINGLEN int, @LOOPSTRING NVARCHAR(4000)
    SET @STRINGLEN = DATALENGTH(ISNULL(@STRING, N''))/2
    SET @STARTINDEX = 1

    DECLARE @SLICE nvarchar(4000)
    DECLARE @SUBSTR nvarchar(4000)

    SET @SLICE  = N''

    WHILE @STARTINDEX < @STRINGLEN+1 BEGIN

        SET @SUBSTR = SUBSTRING(@STRING, @STARTINDEX, 1)

        IF @SUBSTR = @Delimiter BEGIN
            IF @SLICE != N''
                INSERT INTO @Results(Items) VALUES(@SLICE)
            SET @SLICE = N''
        END
        ELSE
            SET @SLICE = @SLICE+@SUBSTR

        SET @STARTINDEX = @STARTINDEX + 1
    END
    IF LEN(@SLICE) > 0
        INSERT INTO @Results(Items) VALUES(@SLICE)
    RETURN
END
GO
PRINT N'Creating [dbo].[GetMlValue]...';

GO

create function dbo.GetMlValue(@value nvarchar(max), @locale nvarchar(max))
	returns nvarchar(max)
as begin

	declare @localeValue nvarchar(max)

	select @localeValue = Value
	from dbo.ParseMlLocales(@value)
	where Locale = @locale or Locale is null

	return @localeValue
end
GO
PRINT N'Creating [dbo].[UpdateCategoryLocalizedObjectName_Changes]...';

GO

---- Category triggers ----
create trigger dbo.UpdateCategoryLocalizedObjectName_Changes
on dbo.Category after insert, update as
	if(update(Name)) begin
		set nocount on

		-- Create new entries for new locale/category combinations
		insert into LocalizedObjectName (LocaleId, ObjectId, ObjectType, LocalizedName)
		select
			LocaleSetting.LocaleSettingID,
			inserted.CategoryID,
			'category',
			ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
		where
			(
				(ML.Locale is not null and LocaleSetting.LocaleSettingID is not null)
				or (ML.Locale is null and LocaleSetting.LocaleSettingID is null)
			)
			and not exists (
				select 1
				from LocalizedObjectName
				where
					(
						LocaleId = LocaleSetting.LocaleSettingID
						or (LocaleId is null and LocaleSetting.LocaleSettingID is null)
					)
					and ObjectId = inserted.CategoryID
					and ObjectType = 'category')

		-- Update existing locale/category combinations
		update LocalizedObjectName
		set LocalizedName = ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
			left join LocalizedObjectName on
				LocalizedObjectName.ObjectId = inserted.CategoryID
				and LocalizedObjectName.ObjectType = 'category'
				and (
					LocalizedObjectName.LocaleId = LocaleSetting.LocaleSettingID
					or (LocalizedObjectName.LocaleId is null and LocaleSetting.LocaleSettingID is null)
				)

		---- Remove any locale/category combinations that no longer exist
		delete LocalizedObjectName
		from inserted
			inner join LocalizedObjectName on LocalizedObjectName.ObjectId = inserted.CategoryID
		where
			LocalizedObjectName.ObjectType = 'category'
			and not exists (
				select 1
				from Category
					cross apply dbo.ParseMlLocales(Category.Name) as ML
					left join LocaleSetting on LocaleSetting.Name = ML.Locale
				where
					Category.CategoryID = LocalizedObjectName.ObjectId
					and (
						LocaleSetting.LocaleSettingID = LocalizedObjectName.LocaleId
						or (LocaleSetting.LocaleSettingID is null and LocalizedObjectName.LocaleId is null)
					)
			)
	end
GO
PRINT N'Creating [dbo].[UpdateDistributorLocalizedObjectName_Changes]...';

GO

---- Distributor triggers ----
create trigger dbo.UpdateDistributorLocalizedObjectName_Changes
on dbo.Distributor after insert, update as
	if(update(Name)) begin
		set nocount on

		-- Create new entries for new locale/distributor combinations
		insert into LocalizedObjectName (LocaleId, ObjectId, ObjectType, LocalizedName)
		select
			LocaleSetting.LocaleSettingID,
			inserted.DistributorID,
			'distributor',
			ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
		where
			(
				(ML.Locale is not null and LocaleSetting.LocaleSettingID is not null)
				or (ML.Locale is null and LocaleSetting.LocaleSettingID is null)
			)
			and not exists (
				select 1
				from LocalizedObjectName
				where
					(
						LocaleId = LocaleSetting.LocaleSettingID
						or (LocaleId is null and LocaleSetting.LocaleSettingID is null)
					)
					and ObjectId = inserted.DistributorID
					and ObjectType = 'distributor')

		-- Update existing locale/distributor combinations
		update LocalizedObjectName
		set LocalizedName = ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
			left join LocalizedObjectName on
				LocalizedObjectName.ObjectId = inserted.DistributorID
				and LocalizedObjectName.ObjectType = 'distributor'
				and (
					LocalizedObjectName.LocaleId = LocaleSetting.LocaleSettingID
					or (LocalizedObjectName.LocaleId is null and LocaleSetting.LocaleSettingID is null)
				)

		---- Remove any locale/distributor combinations that no longer exist
		delete LocalizedObjectName
		from inserted
			inner join LocalizedObjectName on LocalizedObjectName.ObjectId = inserted.DistributorID
		where
			LocalizedObjectName.ObjectType = 'distributor'
			and not exists (
				select 1
				from Distributor
					cross apply dbo.ParseMlLocales(Distributor.Name) as ML
					left join LocaleSetting on LocaleSetting.Name = ML.Locale
				where
					Distributor.DistributorID = LocalizedObjectName.ObjectId
					and (
						LocaleSetting.LocaleSettingID = LocalizedObjectName.LocaleId
						or (LocaleSetting.LocaleSettingID is null and LocalizedObjectName.LocaleId is null)
					)
			)
	end
GO
PRINT N'Creating [dbo].[UpdateGenreLocalizedObjectName_Changes]...';

GO

---- Genre triggers ----
create trigger dbo.UpdateGenreLocalizedObjectName_Changes
on dbo.Genre after insert, update as
	if(update(Name)) begin
		set nocount on

		-- Create new entries for new locale/genre combinations
		insert into LocalizedObjectName (LocaleId, ObjectId, ObjectType, LocalizedName)
		select
			LocaleSetting.LocaleSettingID,
			inserted.GenreID,
			'genre',
			ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
		where
			(
				(ML.Locale is not null and LocaleSetting.LocaleSettingID is not null)
				or (ML.Locale is null and LocaleSetting.LocaleSettingID is null)
			)
			and not exists (
				select 1
				from LocalizedObjectName
				where
					(
						LocaleId = LocaleSetting.LocaleSettingID
						or (LocaleId is null and LocaleSetting.LocaleSettingID is null)
					)
					and ObjectId = inserted.GenreID
					and ObjectType = 'genre')

		-- Update existing locale/genre combinations
		update LocalizedObjectName
		set LocalizedName = ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
			left join LocalizedObjectName on
				LocalizedObjectName.ObjectId = inserted.GenreID
				and LocalizedObjectName.ObjectType = 'genre'
				and (
					LocalizedObjectName.LocaleId = LocaleSetting.LocaleSettingID
					or (LocalizedObjectName.LocaleId is null and LocaleSetting.LocaleSettingID is null)
				)

		---- Remove any locale/genre combinations that no longer exist
		delete LocalizedObjectName
		from inserted
			inner join LocalizedObjectName on LocalizedObjectName.ObjectId = inserted.GenreID
		where
			LocalizedObjectName.ObjectType = 'genre'
			and not exists (
				select 1
				from Genre
					cross apply dbo.ParseMlLocales(Genre.Name) as ML
					left join LocaleSetting on LocaleSetting.Name = ML.Locale
				where
					Genre.GenreID = LocalizedObjectName.ObjectId
					and (
						LocaleSetting.LocaleSettingID = LocalizedObjectName.LocaleId
						or (LocaleSetting.LocaleSettingID is null and LocalizedObjectName.LocaleId is null)
					)
			)
	end
GO
PRINT N'Creating [dbo].[UpdateManufacturerLocalizedObjectName_Changes]...';

GO

---- Manufacturer triggers ----
create trigger dbo.UpdateManufacturerLocalizedObjectName_Changes
on dbo.Manufacturer after insert, update as
	if(update(Name)) begin
		set nocount on

		-- Create new entries for new locale/manufacturer combinations
		insert into LocalizedObjectName (LocaleId, ObjectId, ObjectType, LocalizedName)
		select
			LocaleSetting.LocaleSettingID,
			inserted.ManufacturerID,
			'manufacturer',
			ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
		where
			(
				(ML.Locale is not null and LocaleSetting.LocaleSettingID is not null)
				or (ML.Locale is null and LocaleSetting.LocaleSettingID is null)
			)
			and not exists (
				select 1
				from LocalizedObjectName
				where
					(
						LocaleId = LocaleSetting.LocaleSettingID
						or (LocaleId is null and LocaleSetting.LocaleSettingID is null)
					)
					and ObjectId = inserted.ManufacturerID
					and ObjectType = 'manufacturer')

		-- Update existing locale/manufacturer combinations
		update LocalizedObjectName
		set LocalizedName = ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
			left join LocalizedObjectName on
				LocalizedObjectName.ObjectId = inserted.ManufacturerID
				and LocalizedObjectName.ObjectType = 'manufacturer'
				and (
					LocalizedObjectName.LocaleId = LocaleSetting.LocaleSettingID
					or (LocalizedObjectName.LocaleId is null and LocaleSetting.LocaleSettingID is null)
				)

		---- Remove any locale/manufacturer combinations that no longer exist
		delete LocalizedObjectName
		from inserted
			inner join LocalizedObjectName on LocalizedObjectName.ObjectId = inserted.ManufacturerID
		where
			LocalizedObjectName.ObjectType = 'manufacturer'
			and not exists (
				select 1
				from Manufacturer
					cross apply dbo.ParseMlLocales(Manufacturer.Name) as ML
					left join LocaleSetting on LocaleSetting.Name = ML.Locale
				where
					Manufacturer.ManufacturerID = LocalizedObjectName.ObjectId
					and (
						LocaleSetting.LocaleSettingID = LocalizedObjectName.LocaleId
						or (LocaleSetting.LocaleSettingID is null and LocalizedObjectName.LocaleId is null)
					)
			)
	end
GO
PRINT N'Creating [dbo].[UpdateProductLocalizedObjectName_Changes]...';

GO

---- Product triggers ----
create trigger dbo.UpdateProductLocalizedObjectName_Changes
on dbo.Product after insert, update as
	if(update(Name)) begin
		set nocount on

		-- Create new entries for new locale/product combinations
		insert into LocalizedObjectName (LocaleId, ObjectId, ObjectType, LocalizedName)
		select
			LocaleSetting.LocaleSettingID,
			inserted.ProductID,
			'product',
			ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
		where
			(
				(ML.Locale is not null and LocaleSetting.LocaleSettingID is not null)
				or (ML.Locale is null and LocaleSetting.LocaleSettingID is null)
			)
			and not exists (
				select 1
				from LocalizedObjectName
				where
					(
						LocaleId = LocaleSetting.LocaleSettingID
						or (LocaleId is null and LocaleSetting.LocaleSettingID is null)
					)
					and ObjectId = inserted.ProductID
					and ObjectType = 'product')

		-- Update existing locale/product combinations
		update LocalizedObjectName
		set LocalizedName = ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
			left join LocalizedObjectName on
				LocalizedObjectName.ObjectId = inserted.ProductID
				and LocalizedObjectName.ObjectType = 'product'
				and (
					LocalizedObjectName.LocaleId = LocaleSetting.LocaleSettingID
					or (LocalizedObjectName.LocaleId is null and LocaleSetting.LocaleSettingID is null)
				)

		---- Remove any locale/product combinations that no longer exist
		delete LocalizedObjectName
		from inserted
			inner join LocalizedObjectName on LocalizedObjectName.ObjectId = inserted.ProductID
		where
			LocalizedObjectName.ObjectType = 'product'
			and not exists (
				select 1
				from Product
					cross apply dbo.ParseMlLocales(Product.Name) as ML
					left join LocaleSetting on LocaleSetting.Name = ML.Locale
				where
					Product.ProductID = LocalizedObjectName.ObjectId
					and (
						LocaleSetting.LocaleSettingID = LocalizedObjectName.LocaleId
						or (LocaleSetting.LocaleSettingID is null and LocalizedObjectName.LocaleId is null)
					)
			)
	end
GO
PRINT N'Creating [dbo].[UpdateProductVariantLocalizedObjectName_Changes]...';

GO

---- ProductVariant triggers ----
create trigger dbo.UpdateProductVariantLocalizedObjectName_Changes
on dbo.ProductVariant after insert, update as
	if(update(Name)) begin
		set nocount on

		-- Create new entries for new locale/productvariant combinations
		insert into LocalizedObjectName (LocaleId, ObjectId, ObjectType, LocalizedName)
		select
			LocaleSetting.LocaleSettingID,
			inserted.VariantID,
			'productvariant',
			ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
		where
			(
				(ML.Locale is not null and LocaleSetting.LocaleSettingID is not null)
				or (ML.Locale is null and LocaleSetting.LocaleSettingID is null)
			)
			and not exists (
				select 1
				from LocalizedObjectName
				where
					(
						LocaleId = LocaleSetting.LocaleSettingID
						or (LocaleId is null and LocaleSetting.LocaleSettingID is null)
					)
					and ObjectId = inserted.VariantID
					and ObjectType = 'productvariant')

		-- Update existing locale/productvariant combinations
		update LocalizedObjectName
		set LocalizedName = ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
			left join LocalizedObjectName on
				LocalizedObjectName.ObjectId = inserted.VariantID
				and LocalizedObjectName.ObjectType = 'productvariant'
				and (
					LocalizedObjectName.LocaleId = LocaleSetting.LocaleSettingID
					or (LocalizedObjectName.LocaleId is null and LocaleSetting.LocaleSettingID is null)
				)

		---- Remove any locale/productvariant combinations that no longer exist
		delete LocalizedObjectName
		from inserted
			inner join LocalizedObjectName on LocalizedObjectName.ObjectId = inserted.VariantID
		where
			LocalizedObjectName.ObjectType = 'productvariant'
			and not exists (
				select 1
				from ProductVariant
					cross apply dbo.ParseMlLocales(ProductVariant.Name) as ML
					left join LocaleSetting on LocaleSetting.Name = ML.Locale
				where
					ProductVariant.VariantID = LocalizedObjectName.ObjectId
					and (
						LocaleSetting.LocaleSettingID = LocalizedObjectName.LocaleId
						or (LocaleSetting.LocaleSettingID is null and LocalizedObjectName.LocaleId is null)
					)
			)
	end
GO
PRINT N'Creating [dbo].[UpdateSectionLocalizedObjectName_Changes]...';

GO

---- Section triggers ----
create trigger dbo.UpdateSectionLocalizedObjectName_Changes
on dbo.Section after insert, update as
	if(update(Name)) begin
		set nocount on

		-- Create new entries for new locale/section combinations
		insert into LocalizedObjectName (LocaleId, ObjectId, ObjectType, LocalizedName)
		select
			LocaleSetting.LocaleSettingID,
			inserted.SectionID,
			'section',
			ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
		where
			(
				(ML.Locale is not null and LocaleSetting.LocaleSettingID is not null)
				or (ML.Locale is null and LocaleSetting.LocaleSettingID is null)
			)
			and not exists (
				select 1
				from LocalizedObjectName
				where
					(
						LocaleId = LocaleSetting.LocaleSettingID
						or (LocaleId is null and LocaleSetting.LocaleSettingID is null)
					)
					and ObjectId = inserted.SectionID
					and ObjectType = 'section')

		-- Update existing locale/section combinations
		update LocalizedObjectName
		set LocalizedName = ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
			left join LocalizedObjectName on
				LocalizedObjectName.ObjectId = inserted.SectionID
				and LocalizedObjectName.ObjectType = 'section'
				and (
					LocalizedObjectName.LocaleId = LocaleSetting.LocaleSettingID
					or (LocalizedObjectName.LocaleId is null and LocaleSetting.LocaleSettingID is null)
				)

		---- Remove any locale/section combinations that no longer exist
		delete LocalizedObjectName
		from inserted
			inner join LocalizedObjectName on LocalizedObjectName.ObjectId = inserted.SectionID
		where
			LocalizedObjectName.ObjectType = 'section'
			and not exists (
				select 1
				from Section
					cross apply dbo.ParseMlLocales(Section.Name) as ML
					left join LocaleSetting on LocaleSetting.Name = ML.Locale
				where
					Section.SectionID = LocalizedObjectName.ObjectId
					and (
						LocaleSetting.LocaleSettingID = LocalizedObjectName.LocaleId
						or (LocaleSetting.LocaleSettingID is null and LocalizedObjectName.LocaleId is null)
					)
			)
	end
GO
PRINT N'Creating [dbo].[UpdateVectorLocalizedObjectName_Changes]...';

GO

---- Vector triggers ----
create trigger dbo.UpdateVectorLocalizedObjectName_Changes
on dbo.Vector after insert, update as
	if(update(Name)) begin
		set nocount on

		-- Create new entries for new locale/vector combinations
		insert into LocalizedObjectName (LocaleId, ObjectId, ObjectType, LocalizedName)
		select
			LocaleSetting.LocaleSettingID,
			inserted.VectorID,
			'vector',
			ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
		where
			(
				(ML.Locale is not null and LocaleSetting.LocaleSettingID is not null)
				or (ML.Locale is null and LocaleSetting.LocaleSettingID is null)
			)
			and not exists (
				select 1
				from LocalizedObjectName
				where
					(
						LocaleId = LocaleSetting.LocaleSettingID
						or (LocaleId is null and LocaleSetting.LocaleSettingID is null)
					)
					and ObjectId = inserted.VectorID
					and ObjectType = 'vector')

		-- Update existing locale/vector combinations
		update LocalizedObjectName
		set LocalizedName = ML.Value
		from inserted
			cross apply dbo.ParseMlLocales(inserted.Name) as ML
			left join LocaleSetting on LocaleSetting.Name = ML.Locale
			left join LocalizedObjectName on
				LocalizedObjectName.ObjectId = inserted.VectorID
				and LocalizedObjectName.ObjectType = 'vector'
				and (
					LocalizedObjectName.LocaleId = LocaleSetting.LocaleSettingID
					or (LocalizedObjectName.LocaleId is null and LocaleSetting.LocaleSettingID is null)
				)

		---- Remove any locale/vector combinations that no longer exist
		delete LocalizedObjectName
		from inserted
			inner join LocalizedObjectName on LocalizedObjectName.ObjectId = inserted.VectorID
		where
			LocalizedObjectName.ObjectType = 'vector'
			and not exists (
				select 1
				from Vector
					cross apply dbo.ParseMlLocales(Vector.Name) as ML
					left join LocaleSetting on LocaleSetting.Name = ML.Locale
				where
					Vector.VectorID = LocalizedObjectName.ObjectId
					and (
						LocaleSetting.LocaleSettingID = LocalizedObjectName.LocaleId
						or (LocaleSetting.LocaleSettingID is null and LocalizedObjectName.LocaleId is null)
					)
			)
	end
GO
PRINT N'Creating [dbo].[GetAffiliatePath]...';

GO
CREATE FUNCTION dbo.GetAffiliatePath
(
	@AffiliateID int,
	@Locale nvarchar(max),
	@Separator nvarchar(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result nvarchar(max);

	WITH AffiliateTree (ParentAffiliateID, S, Level)
	AS
	(
	-- Anchor member definition
		SELECT e.ParentAffiliateID , cast(dbo.GetMlValue(Name, @Locale) as nvarchar(max)) as S, 0 AS Level
		FROM dbo.Affiliate e
		WHERE AffiliateID = @AffiliateID
		UNION ALL
	-- Recursive member definition
		SELECT e.ParentAffiliateID, cast(dbo.GetMlValue(Name, @Locale) + @Separator + S as nvarchar(max)), Level + 1
		FROM dbo.Affiliate e
		INNER JOIN AffiliateTree p ON e.AffiliateID = p.ParentAffiliateID
	)
	-- Statement that executes the CTE
	SELECT top 1 @Result = S
	FROM AffiliateTree
	Order By Level Desc

	-- Return the result of the function
	RETURN @Result

END
GO
PRINT N'Creating [dbo].[Entities]...';

GO
CREATE VIEW [dbo].[Entities]

AS
    SELECT 'category' EntityType, Entity.CategoryID EntityID, Entity.CategoryGUID EntityGuid, Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentCategoryID ParentEntityID,DisplayOrder,SortByLooks,XmlPackage,Published,Deleted, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Category Entity with (NOLOCK)

    UNION ALL

    SELECT 'affiliate' EntityType, Entity.AffiliateID EntityID,Entity.AffiliateGUID EntityGuid, Name,4 as ColWidth,'' as Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentAffiliateID ParentEntityID,DisplayOrder,0 as SortByLooks,'' as XmlPackage,Published,Deleted, 0 PageSize, 0 QuantityDiscountID, '' Summary, SkinID, TemplateName
    FROM dbo.Affiliate Entity with (NOLOCK)

    UNION ALL

    SELECT 'section' EntityType, Entity.SectionID EntityID,Entity.SectionGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentSectionID ParentEntityID,DisplayOrder,SortByLooks,XmlPackage,Published,Deleted, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Section Entity with (NOLOCK)

    UNION ALL

    SELECT 'manufacturer' EntityType, Entity.ManufacturerID EntityID,Entity.ManufacturerGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentManufacturerID as ParentEntityID,DisplayOrder,0 as SortByLooks,XmlPackage,Published,Deleted, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Manufacturer Entity with (NOLOCK)

    UNION ALL

    SELECT 'library' EntityType, Entity.LibraryID EntityID,Entity.LibraryGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentLibraryID ParentEntityID,DisplayOrder,SortByLooks,XmlPackage,Published,Deleted, PageSize, 0 QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Library Entity with (NOLOCK)

    UNION ALL

    SELECT 'distributor' EntityType, Entity.DistributorID EntityID,Entity.DistributorGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentDistributorID as ParentEntityID,DisplayOrder,0 as SortByLooks,XmlPackage,Published,Deleted, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Distributor Entity with (NOLOCK)

    UNION ALL

    SELECT 'genre' EntityType, Entity.GenreID EntityID,Entity.GenreGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentGenreID as ParentEntityID,DisplayOrder,0 as SortByLooks,XmlPackage,Published,Deleted, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Genre Entity with (NOLOCK)

    UNION ALL

    SELECT 'vector' EntityType, Entity.VectorID EntityID,Entity.VectorGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentVectorID as ParentEntityID,DisplayOrder,0 as SortByLooks,XmlPackage,Published,Deleted, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Vector Entity with (NOLOCK)

    UNION ALL

    SELECT 'customerLevel' EntityType, Entity.CustomerLevelID EntityID,Entity.CustomerLevelGUID EntityGuid,Name, 4 ColWidth, '' Description,SEName, '' SEKeywords, '' SEDescription, '' SETitle,'' SEAltText,ParentCustomerLevelID ParentEntityID,DisplayOrder,0 SortByLooks, '' XmlPackage, 1 Published,Deleted, 20 PageSize, 0 QuantityDiscountID, '' Summary, SkinID, TemplateName
    FROM dbo.CustomerLevel Entity with (NOLOCK)
GO
PRINT N'Creating [dbo].[EntityMaster]...';

GO

CREATE VIEW [dbo].[EntityMaster]

AS
    SELECT 'category' EntityType, Entity.CategoryID EntityID, Entity.CategoryGUID EntityGuid, Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentCategoryID ParentEntityID,DisplayOrder,SortByLooks,XmlPackage,Published,isnull(NumProducts, 0) NumObjects, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Category Entity with (NOLOCK)
      left join (SELECT pc.CategoryID, COUNT(pc.ProductID) AS NumProducts
                 FROM  dbo.ProductCategory pc with (nolock)
                     join [dbo].Product p with (nolock) on pc.ProductID = p.ProductID  and p.deleted=0 and p.published=1
                 GROUP BY pc.CategoryID
                ) a on Entity.CategoryID = a.CategoryID
    WHERE Published = 1 and Deleted=0

    UNION ALL

    SELECT 'affiliate' EntityType, Entity.AffiliateID EntityID,Entity.AffiliateGUID EntityGuid, Name,4 as ColWidth,'' as Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentAffiliateID ParentEntityID,DisplayOrder,0 as SortByLooks,'' as XmlPackage,Published,isnull(NumProducts, 0) NumObjects, 0 PageSize, 0 QuantityDiscountID, '' Summary, SkinID, TemplateName
    FROM dbo.Affiliate Entity with (NOLOCK)
      left join (SELECT pa.AffiliateID, COUNT(pa.ProductID) AS NumProducts
                 FROM dbo.ProductAffiliate pa with (nolock) join [dbo].Product p with (nolock) on pa.ProductID = p.ProductID and p.deleted=0 and p.published=1
                 GROUP BY pa.AffiliateID
                ) a on Entity.AffiliateID = a.AffiliateID
    WHERE Published = 1 and Deleted=0

    UNION ALL

    SELECT 'section' EntityType, Entity.SectionID EntityID,Entity.SectionGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentSectionID ParentEntityID,DisplayOrder,SortByLooks,XmlPackage,Published,isnull(NumProducts, 0) NumObjects, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Section Entity with (NOLOCK)
        left join (SELECT ps.SectionID, COUNT(ps.ProductID) AS NumProducts
                   FROM dbo.ProductSection ps with (nolock) join [dbo].Product p with (nolock) on ps.ProductID = p.ProductID and p.deleted=0 and p.published=1
                   GROUP BY ps.SectionID
                  ) a on Entity.SectionID = a.SectionID
    WHERE Published = 1 and Deleted=0

    UNION ALL

    SELECT 'manufacturer' EntityType, Entity.ManufacturerID EntityID,Entity.ManufacturerGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentManufacturerID as ParentEntityID,DisplayOrder,0 as SortByLooks,XmlPackage,Published,isnull(NumProducts, 0) NumObjects, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Manufacturer Entity with (NOLOCK)
    left join (SELECT pm.ManufacturerID, COUNT(pm.ProductID) AS NumProducts
               FROM dbo.ProductManufacturer pm with (nolock) join [dbo].Product p with (nolock) on pm.ProductID = p.ProductID and p.deleted=0 and p.published=1
               GROUP BY pm.ManufacturerID
              ) a on Entity.ManufacturerID = a.ManufacturerID
    WHERE Published = 1 and Deleted=0

    UNION ALL

    SELECT 'library' EntityType, Entity.LibraryID EntityID,Entity.LibraryGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentLibraryID ParentEntityID,DisplayOrder,SortByLooks,XmlPackage,Published, 0 NumObjects, PageSize, 0 QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Library Entity with (NOLOCK)
    WHERE Published = 1 and Deleted=0

    UNION ALL

    SELECT 'distributor' EntityType, Entity.DistributorID EntityID,Entity.DistributorGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentDistributorID as ParentEntityID,DisplayOrder,0 as SortByLooks,XmlPackage,Published,isnull(NumProducts, 0) NumObjects, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Distributor Entity with (NOLOCK)
        left join (SELECT pd.DistributorID, COUNT(pd.ProductID) AS NumProducts
                   FROM dbo.ProductDistributor pd with (nolock) join [dbo].Product p with (nolock) on pd.ProductID = p.ProductID and p.deleted=0 and p.published=1
                   GROUP BY pd.DistributorID
                  ) a on Entity.DistributorID = a.DistributorID
    WHERE Published = 1 and Deleted=0

    UNION ALL

    SELECT 'genre' EntityType, Entity.GenreID EntityID,Entity.GenreGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentGenreID as ParentEntityID,DisplayOrder,0 as SortByLooks,XmlPackage,Published,isnull(NumProducts, 0) NumObjects, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Genre Entity with (NOLOCK)
        left join (SELECT px.GenreID, COUNT(px.ProductID) AS NumProducts
                   FROM dbo.ProductGenre px with (nolock) join [dbo].Product p with (nolock) on px.ProductID = p.ProductID and p.deleted=0 and p.published=1
                   GROUP BY px.GenreID
                  ) a on Entity.GenreID = a.GenreID
    WHERE Published = 1 and Deleted=0

    UNION ALL

    SELECT 'vector' EntityType, Entity.VectorID EntityID,Entity.VectorGUID EntityGuid,Name,ColWidth,Description,SEName,SEKeywords,SEDescription,SETitle,SEAltText,ParentVectorID as ParentEntityID,DisplayOrder,0 as SortByLooks,XmlPackage,Published,isnull(NumProducts, 0) NumObjects, PageSize, QuantityDiscountID, Summary, SkinID, TemplateName
    FROM dbo.Vector Entity with (NOLOCK)
        left join (SELECT px2.VectorID, COUNT(px2.ProductID) AS NumProducts
                   FROM dbo.ProductVector px2 with (nolock) join [dbo].Product p with (nolock) on px2.ProductID = p.ProductID and p.deleted=0 and p.published=1
                   GROUP BY px2.VectorID
                  ) a on Entity.VectorID = a.VectorID
    WHERE Published = 1 and Deleted=0

    UNION ALL

    SELECT 'customerLevel' EntityType, Entity.CustomerLevelID EntityID,Entity.CustomerLevelGUID EntityGuid,Name, 4 ColWidth, '' Description,SEName, '' SEKeywords, '' SEDescription, '' SETitle,'' SEAltText,ParentCustomerLevelID ParentEntityID,DisplayOrder,0 SortByLooks, '' XmlPackage, 1 Published,isnull(NumProducts, 0) NumObjects, 20 PageSize, 0 QuantityDiscountID, '' Summary, SkinID, TemplateName
    FROM dbo.CustomerLevel Entity with (NOLOCK)
      left join (SELECT pc.CustomerLevelID, COUNT(pc.ProductID) AS NumProducts
                 FROM  dbo.ProductCustomerLevel pc with (nolock)
                     join [dbo].Product p with (nolock) on pc.ProductID = p.ProductID  and p.deleted=0 and p.published=1
                 GROUP BY pc.CustomerLevelID
                ) a on Entity.CustomerLevelID = a.CustomerLevelID
    WHERE Deleted=0
GO
PRINT N'Creating [dbo].[ObjectView ]...';

GO


CREATE VIEW [dbo].[ObjectView ]
	AS
	SELECT	EM.EntityID AS ID,
			EM.EntityType AS EntityType,
			EM.[Name],
			EM.Description
	FROM EntityMaster AS EM WITH (NOLOCK)

	UNION ALL

	SELECT	tp.TopicID AS ID,
			'Topic' AS EntityType,
			tp.[Name],
			tp.Description
	FROM Topic AS tp WITH (NOLOCK)

	UNION ALL

	SELECT	nw.NewsID AS ID,
			'News' AS EntityType,
			nw.Headline AS [Name],
			'' AS Description
	FROM News AS nw WITH(NOLOCK)

	UNION ALL

	SELECT	p.ProductID AS ID,
			'Product' AS EntityType,
			p.[Name],
			p.Description
	FROM Product AS p WITH(NOLOCK)

	UNION ALL

	SELECT	cp.CouponID AS ID,
			'Coupon' AS EntityType,
			cp.[CouponCode] AS [Name],
			cp.Description
	FROM Coupon AS cp WITH(NOLOCK)

	UNION ALL

	SELECT	p.Id AS ID,
			'Promotion' AS EntityType,
			p.[Code] AS [Name],
			p.Description
	FROM Promotions AS p WITH(NOLOCK)

	UNION ALL

	SELECT	oo.OrderOptionID AS ID,
			'OrderOption' AS EntityType,
			oo.[Name],
			oo.Description
	FROM OrderOption oo WITH(NOLOCK)

	UNION ALL

	SELECT	gc.GiftCardID AS ID,
			'GiftCard' AS EntityType,
			gc.SerialNumber AS [Name],
			'' AS Description
	FROM GiftCard AS gc WITH(NOLOCK)

	UNION ALL

	SELECT	sm.ShippingMethodID AS ID,
			'ShippingMethod' AS EntityType,
			sm.[Name] AS [Name],
			'' AS Description
	FROM ShippingMethod AS sm WITH(NOLOCK)
GO
PRINT N'Creating [dbo].[ProductEntity]...';

GO

create view [dbo].[ProductEntity]

AS
select 'category' EntityType, ProductID, CategoryID EntityID, DisplayOrder, CreatedOn From dbo.productcategory with (nolock)
union all
select 'section', ProductID, SectionID EntityID, DisplayOrder, CreatedOn From dbo.productsection with (nolock)
union all
select 'manufacturer', ProductID, ManufacturerID EntityID, DisplayOrder, CreatedOn From dbo.productmanufacturer with (nolock)
union all
select 'distributor', ProductID, DistributorID EntityID, DisplayOrder, CreatedOn From dbo.productdistributor with (nolock)
union all
select 'affiliate', ProductID, AffiliateID EntityID, DisplayOrder, CreatedOn From dbo.productaffiliate with (nolock)
union all
select 'locale', ProductID, LocaleSettingID EntityID, DisplayOrder, CreatedOn From dbo.productlocalesetting with (nolock)
union all
select 'customerlevel', ProductID, CustomerLevelID EntityID, DisplayOrder, CreatedOn From dbo.ProductCustomerLevel with (nolock)
union all
select 'genre', ProductID, GenreID EntityID, DisplayOrder, CreatedOn From dbo.productgenre with (nolock)
union all
select 'vector', ProductID, VectorID EntityID, DisplayOrder, CreatedOn From dbo.productvector with (nolock)
GO
PRINT N'Creating [dbo].[ShippingMethodStoreSummaryView]...';

GO


create view [dbo].[ShippingMethodStoreSummaryView]
AS
SELECT	sm.ShippingMethodID,
        SUM(CASE WHEN sms.StoreId IS NULL THEN 0 ELSE POWER(2, sms.StoreId) END) AS StoreBitMap
FROM ShippingMethod sm WITH (NOLOCK)
LEFT OUTER JOIN ShippingMethodStore sms WITH (NOLOCK) ON sm.ShippingMethodID = sms.ShippingMethodID
GROUP BY sm.ShippingMethodID
GO
PRINT N'Creating [dbo].[StoreMappingView]...';

GO


CREATE VIEW [dbo].[StoreMappingView]
AS
	SELECT ID, StoreID, EntityID, EntityType FROM EntityStore WITH (NOLOCK)
	UNION ALL
	SELECT ID, StoreID, ProductID EntityID, 'Product' EntityType FROM ProductStore WITH (NOLOCK)
	UNION ALL
	SELECT ID, StoreID, NewsID EntityID, 'News' EntityType FROM NewsStore WITH (NOLOCK)
	UNION ALL
	SELECT ID, StoreID, TopicID EntityID, 'Topic' EntityType FROM TopicStore WITH (NOLOCK)
	UNION ALL
	SELECT ID, StoreID, CouponID EntityID, 'Coupon' EntityType FROM CouponStore WITH (NOLOCK)
	UNION ALL
	SELECT ID, StoreID, PromotionID EntityID, 'Promotion' EntityType FROM PromotionStore WITH (NOLOCK)
	UNION ALL
	SELECT ID, StoreID, OrderOptionID EntityID, 'OrderOption' EntityType FROM OrderOptionStore WITH (NOLOCK)
	UNION ALL
	SELECT ID, StoreID, GiftCardID EntityID, 'GiftCard' EntityType FROM GiftCardStore WITH (NOLOCK)
	UNION ALL
	SELECT ID, StoreID, ShippingMethodID EntityID, 'ShippingMethod' EntityType FROM ShippingMethodStore WITH (NOLOCK)
	UNION ALL
	SELECT ID, StoreID, AffiliateID EntityID, 'Affiliate' EntityType FROM AffiliateStore WITH (NOLOCK)
GO

PRINT N'Creating [dbo].[FindQtyDiscountID]...';
GO

CREATE FUNCTION dbo.FindQtyDiscountID(@entityid INT, @entitytype VARCHAR(20), @nestedLevel INT)
RETURNS INT
AS
BEGIN
	SET @nestedLevel = @nestedLevel + 1;
	IF (@nestedLevel = 16)
		RETURN -1;

    DECLARE @quantityDiscountId INT, @parentEntityId INT;

	SELECT
		@quantityDiscountId = QuantityDiscountID,
		@parentEntityId = ParentEntityID
	FROM dbo.entitymaster (NOLOCK)
	WHERE EntityId = @entityid
		AND EntityType = @entitytype;

    IF (ISNULL(@quantityDiscountId, 0) = 0)
		AND (ISNULL(@parentEntityId, 0) <> 0)
		BEGIN
			SELECT @quantityDiscountId = dbo.FindQtyDiscountID(@parentEntityId, @entitytype, @nestedLevel);
		END;

    RETURN ISNULL(@quantityDiscountId, 0);
END
GO

PRINT N'Creating [dbo].[GetEntityPath]...';
GO

create function dbo.GetEntityPath (
	@entityId int,
	@entityType nvarchar(50),
	@separator nvarchar(max),
	@selectedLocale nvarchar(10),
	@defaultLocale nvarchar(10)
)
returns nvarchar(max)
as begin
	declare @result nvarchar(max),
			@selectedLocaleId int,
			@defaultLocaleId int,
			@maxRecursion int = 99

	select @selectedLocaleId = LocaleSettingID from LocaleSetting where Name = @selectedLocale
	select @defaultLocaleId = LocaleSettingID from LocaleSetting where Name = @defaultLocale

	-- Build a list of entity ID's
	;with EntityTree(EntityId, ParentEntityId, [Level]) as (
		select	-- Anchor
			EntityID,
			ParentEntityID,
			0 AS [Level]
		from
			dbo.Entities
		where
			EntityType = @EntityType
			and EntityID = @EntityID
		union all
		select	-- Recursion
			parent.EntityID,
			parent.ParentEntityId,
			child.[Level] + 1 [Level]
		from dbo.Entities parent
			inner join EntityTree child on
				parent.EntityID = child.ParentEntityID
				and parent.EntityType = @entityType
		where
			child.[Level] <= @maxRecursion)
	-- Form the entity ID's into a string of localized path names
	select
		@result =
			isnull(@result, '')
			+ case when @result is null then '' else @separator end
			+ coalesce(SelectedLocalization.LocalizedName, DefaultLocalization.LocalizedName, UnspecifiedLocalization.LocalizedName)
	from
		EntityTree
		left join (
			select ObjectId, LocalizedName
			from dbo.LocalizedObjectName
			where ObjectType = @entityType and LocaleId = @selectedLocaleId
			) as SelectedLocalization on EntityTree.EntityID = SelectedLocalization.ObjectId
		left join (
			select ObjectId, LocalizedName
			from dbo.LocalizedObjectName
			where ObjectType = @entityType and LocaleId = @defaultLocaleId
			) as DefaultLocalization on EntityTree.EntityID = DefaultLocalization.ObjectId
		left join (
			select ObjectId, LocalizedName
			from dbo.LocalizedObjectName
			where ObjectType = @entityType and LocaleId is null
			) as UnspecifiedLocalization on EntityTree.EntityID = UnspecifiedLocalization.ObjectId
	where [Level] <= @maxRecursion
	order by [Level] desc

	return @Result
end
GO
PRINT N'Creating [dbo].[GetQtyDiscountID]...';

GO

CREATE FUNCTION [dbo].[GetQtyDiscountID](@productid INT)
RETURNS INT
AS
BEGIN
    DECLARE @did INT;
    SET @did = 0;

    SELECT @did = ISNULL(QuantityDiscountID, 0) FROM dbo.Product (NOLOCK) WHERE ProductID = @productid;

    IF @did = 0
		SELECT TOP 1
			@did = dbo.FindQtyDiscountID(pe.EntityID, pe.EntityType, 1)
		FROM dbo.ProductEntity pe (NOLOCK)
			JOIN dbo.EntityMaster em (NOLOCK) ON pe.EntityID = em.EntityID AND pe.EntityType = em.EntityType
		WHERE pe.ProductID = @productid
			AND pe.EntityType IN ('category', 'section', 'manufacturer')
			AND dbo.FindQtyDiscountID(pe.EntityID, pe.EntityType, 1) != 0
		ORDER BY
			CASE pe.EntityType
				WHEN 'category' THEN 1
				WHEN 'section' THEN 2
				WHEN 'manufacturer' THEN 3 END,
			em.ParentEntityID, pe.DisplayOrder;

    RETURN @did;
END
GO
PRINT N'Creating [dbo].[GetStoreMap]...';

GO


create function dbo.GetStoreMap(
	@StoreId int,
	@EntityType nvarchar(30),
	@EntityId int = null
)
RETURNS BIT
BEGIN
	DECLARE @IsMapped BIT

	IF EXISTS(SELECT * FROM StoreMappingView WHERE StoreId = @StoreId AND EntityType = @EntityType AND EntityId = ISNULL(@EntityId, EntityId))
	BEGIN
		SET @IsMapped = 1
	END
	ELSE
	BEGIN
		SET @IsMapped = 0
	END

	RETURN @IsMapped
END
GO
PRINT N'Creating [dbo].[UniquelyMapped]...';

GO


create function dbo.UniquelyMapped(
	@StoreId int,
	@EntityType nvarchar(30),
	@EntityId int = null
)
returns bit
begin

	declare @isUnique int
	set @isUnique = 0 -- unknown yet or default value if non found

	declare @c int
	select @c = count(*)
	FROM StoreMappingView smv
	WHERE smv.EntityType = @EntityType and smv.EntityId = @EntityId

	if(@c > 0)
	begin
		if(@c > 1)
		begin
			set @isUnique = 0 -- more than 1 store is mapped to this entity
		end
		else
		begin
			declare @s int

			select @s = smv.StoreId
			FROM StoreMappingView smv
			WHERE smv.EntityType = @EntityType and smv.EntityId = @EntityId

			if(@StoreId = @s)
			begin
				set @isUnique = 1 -- only 1 match
			end
		end
	end

	return @isUnique

end
GO
PRINT N'Creating [dbo].[MappedObjects]...';

GO


CREATE VIEW [dbo].[MappedObjects]
AS
	SELECT
		EM.EntityID AS ID,
		EM.EntityType AS EntityType,
		ParentEntityID AS ParentID,
		EM.EntityGUID AS GUID, EM.[Name] ,
		ES.StoreID AS StoreID
	FROM EntityMaster AS EM WITH (NOLOCK) LEFT JOIN EntityStore AS ES WITH (NOLOCK) ON ES.EntityID = EM.EntityID AND ES.EntityType = EM.EntityType
	UNION ALL
	SELECT TP.TopicID AS ID, 'Topic' AS EntityType,0 AS ParentID, TP.TopicGUID AS GUID, TP.[Name], TS.StoreID AS StoreID
	FROM Topic AS TP WITH (NOLOCK) LEFT JOIN StoreMappingView AS TS WITH (NOLOCK)
	ON TS.EntityID = TP.TopicID AND TS.EntityType='Topic'
	UNION ALL
	SELECT NW.NewsID AS ID,'News' AS EntityType,0 AS ParentID, NW.NewsGUID AS GUID, NW.Headline AS [Name], NS.StoreID AS StoreID
	FROM News AS NW LEFT JOIN StoreMappingView AS NS WITH (NOLOCK)
	ON NS.EntityID = NW.NewsID AND NS.EntityType='News'
	UNION ALL
	SELECT PR.ProductID AS ID, 'Product' AS EntityType,0 AS ParentID, PR.ProductGUID AS GUID, PR.[Name], PS.StoreID AS StoreID
	FROM Product AS PR LEFT JOIN StoreMappingView AS PS WITH (NOLOCK)
	ON PR.ProductID = PS.EntityID AND PS.EntityType='Product'
	UNION ALL
	SELECT CP.CouponID AS ID, 'Coupon' AS EntityType,0 AS ParentID, CP.CouponGUID AS GUID, CP.[CouponCode] AS [Name], PS.StoreID AS StoreID
	FROM Coupon AS CP LEFT JOIN StoreMappingView AS PS WITH (NOLOCK)
	ON CP.CouponID = PS.EntityID AND PS.EntityType='Coupon'
	UNION ALL
	SELECT Promo.Id AS ID, 'Promotion' AS EntityType,0 AS ParentID, Promo.PromotionGUID AS GUID, Promo.[Code] AS [Name], PS.StoreID AS StoreID
	FROM Promotions AS Promo LEFT JOIN StoreMappingView AS PS WITH (NOLOCK)
	ON Promo.Id = PS.EntityID AND PS.EntityType='Promotion'
	UNION ALL
	SELECT OO.OrderOptionID AS ID, 'OrderOption' AS EntityType,0 AS ParentID, OO.OrderOptionGUID AS GUID, OO.[Name], PS.StoreID AS StoreID
	FROM OrderOption AS OO LEFT JOIN StoreMappingView AS PS WITH (NOLOCK)
	ON OO.OrderOptionID = PS.EntityID AND PS.EntityType = 'OrderOption'
	UNION ALL
	SELECT GC.GiftCardID AS ID, 'GiftCard' AS EntityType,0 AS ParentID, GC.GiftCardGUID AS GUID, GC.SerialNumber AS [Name], PS.StoreID AS StoreID
	FROM GiftCard AS GC LEFT JOIN StoreMappingView AS PS WITH (NOLOCK)
	ON GC.GiftCardID = PS.EntityID AND PS.EntityType = 'GiftCard'
GO
PRINT N'Creating [dbo].[GetQtyDiscount]...';

GO


CREATE FUNCTION [dbo].[GetQtyDiscount](@productid int, @Qty int, @discounttype tinyint)
RETURNS decimal(15,6)
AS
BEGIN
    DECLARE @did int, @qtydiscount decimal(15,6)
    SET @did = 0
    SET @qtydiscount = 0

    SELECT @did =  dbo.GetQtyDiscountID(@productid)

    IF @did = 0
        SET @qtydiscount = 0
    ELSE BEGIN
        SELECT @qtydiscount = qdt.DiscountPercent FROM dbo.QuantityDiscountTable qdt with (nolock) join dbo.QuantityDiscount qd with (nolock) on qdt.QuantityDiscountID = qd.QuantityDiscountID WHERE qd.quantitydiscountid = @did and qdt.LowQuantity <= @Qty and qdt.HighQuantity >= @Qty and qd.DiscountType = @discounttype
    END

    RETURN @qtydiscount
END
GO
PRINT N'Creating [dbo].[aspdnsf_AddItemToCart]...';

GO

CREATE proc dbo.aspdnsf_AddItemToCart
    @CustomerID int,
    @ProductID int,
    @VariantID int,
    @Quantity int,
    @ShippingAddressID int,
    @BillingAddressID int,
    @ChosenColor nvarchar(100),
    @ChosenColorSKUModifier varchar(100),
    @ChosenSize nvarchar(100),
    @ChosenSizeSKUModifier varchar(100),
    @CleanColorOption nvarchar(100),
    @CleanSizeOption nvarchar(100),
    @ColorAndSizePriceDelta money,
    @TextOption nvarchar(max),
    @CartType int,
    @CustomerEnteredPrice money,
    @CustomerLevelID int = 0,
    @RequiresCount int = 0,
	@IsKit2 tinyint = 0,
    @NewShoppingCartRecID int OUTPUT,
    @StoreID int,
    @IsAGift bit = 0
AS
SET NOCOUNT ON
	DECLARE @RestrictedQy varchar(8000), @CurrentCartQty int, @InventoryFullSKU nvarchar(50), @InventoryWeightDelta money, @ShoppingCartrecid int, @IsAKit tinyint
	DECLARE @levelprice money, @LevelDiscountPercent money, @LevelDiscountsApplyToExtendedPrices tinyint, @CustEntersPrice tinyint

	SELECT @CustEntersPrice = CustomerEntersPrice, @RestrictedQy = RestrictedQuantities FROM dbo.ProductVariant with (nolock) WHERE VariantID = @VariantID

	SELECT	@IsAKit = IsAKit FROM dbo.Product with (nolock) WHERE ProductID = @ProductID

	-- We are always going to ignore gift records, gift item code should be able to avoid duplicate records.
	SELECT @CurrentCartQty = Quantity From dbo.shoppingcart with (nolock) where ShippingAddressID = @ShippingAddressID and ProductID = @ProductID and VariantID = @VariantID and ChosenColor = @ChosenColor and ChosenSize = @ChosenSize and TextOption like @TextOption and CustomerID = @CustomerID and CartType = @CartType and StoreID = @StoreID and (IsGift = 0 And @IsAGift = 0)

	DECLARE @RQty int
	IF isnull(rtrim(@RestrictedQy), '') = ''
		set @RQty = -1
	ELSE
		SELECT @RQty = cast(items as int) FROM dbo.Split(@RestrictedQy, ',') WHERE cast(items as int) <= isnull(@CurrentCartQty, 0) + @Quantity

	IF @CustomerLevelID = 0
		SELECT @LevelDiscountPercent = 0.0, @LevelDiscountsApplyToExtendedPrices = 0
	ELSE
		SELECT @LevelDiscountPercent = LevelDiscountPercent, @LevelDiscountsApplyToExtendedPrices = LevelDiscountsApplyToExtendedPrices FROM dbo.customerlevel with (nolock) WHERE customerlevelid = @CustomerLevelID

	-- if item already exists in the cart update it's quantity
	IF @CurrentCartQty is not null and @IsAKit = 0 and @CustEntersPrice = 0  BEGIN
		UPDATE dbo.ShoppingCart
		SET Quantity = case @RQty when -1 then Quantity + @Quantity else isnull(@RQty, 0) end ,
			RequiresCount = RequiresCount + @RequiresCount
		WHERE ShippingAddressID = @ShippingAddressID and ProductID = @ProductID and VariantID = @VariantID and ChosenColor = @ChosenColor and ChosenSize = @ChosenSize and TextOption like @TextOption and CustomerID = @CustomerID and CartType = @CartType

		SET @NewShoppingCartRecID = 0
		RETURN
	END

	--Insert item into ShoppingCart
	INSERT dbo.ShoppingCart(CartType,ShoppingCartRecGUID,CustomerID,ShippingAddressID,BillingAddressID,ProductID,VariantID,ProductSKU,ProductPrice,CustomerEntersPrice,ProductWeight,ProductDimensions,Quantity,RequiresCount,ChosenColor,ChosenColorSKUModifier,ChosenSize,ChosenSizeSKUModifier,TextOption,IsTaxable,IsShipSeparately,IsDownload,DownloadLocation,FreeShipping,DistributorID,RecurringInterval,RecurringIntervalType, IsSystem, IsAKit, TaxClassID, IsKit2, StoreID, IsGift, GTIN)
	SELECT
		@CartType,
		newid(),
		@CustomerID,
		@ShippingAddressID,
		@BillingAddressID,
		@ProductID,
		@VariantID,
		case when i.VendorFullSKU is null or rtrim(i.VendorFullSKU) = '' then isnull(p.sku, '') + isnull(pv.skusuffix, '') + isnull(@ChosenColorSKUModifier, '') + isnull(@ChosenSizeSKUModifier, '') else i.VendorFullSKU end,
		case when isnull(@CustomerEnteredPrice, 0) > 0 then @CustomerEnteredPrice
			 when p.IsAKit = 1 then dbo.GetCustomerLevelPrice(pv.VariantID, @CustomerLevelID)+((dbo.KitPriceDelta(@CustomerID, @ProductID, 0)*(100.0 - @LevelDiscountPercent))/100.0)
			 else dbo.GetCustomerLevelPrice(pv.VariantID, @CustomerLevelID)+@ColorAndSizePriceDelta
		end,
		case when @CustomerEnteredPrice is not null and @CustomerEnteredPrice > 0 then 1 else 0 end,
		pv.Weight + case when p.IsAKit = 1 then dbo.KitWeightDelta(@CustomerID, @ProductID, 0) else isnull(i.WeightDelta, 0) end,
		pv.Dimensions,
		case @RQty when -1 then @Quantity else isnull(@RQty, 0) end,
		@RequiresCount,
		@ChosenColor,
		case when i.VendorFullSKU is null or rtrim(i.VendorFullSKU) = '' then @ChosenColorSKUModifier else '' end,
		@ChosenSize,
		case when i.VendorFullSKU is null or rtrim(i.VendorFullSKU) = '' then @ChosenSizeSKUModifier else '' end,
		@TextOption,
		pv.IsTaxable,
		pv.IsShipSeparately,
		pv.IsDownload,
		pv.DownloadLocation,
		pv.FreeShipping,
		isnull(pd.DistributorID, 0),
		case pv.RecurringInterval when 0 then 1 else pv.RecurringInterval end,
		case pv.RecurringIntervalType when 0 then -5 else pv.RecurringIntervalType end,
		p.IsSystem,
		p.IsAKit,
		p.TaxClassID,
		@IsKit2,
		@StoreID,
		@IsAGift,
		case when p.TrackInventoryBySizeAndColor = 1 then i.GTIN else pv.GTIN end
	FROM dbo.Product p with (NOLOCK)
		join dbo.ProductVariant pv with (NOLOCK) on p.productid = pv.productid
		left join dbo.Inventory i with (NOLOCK) on pv.VariantID = i.VariantID and i.size = @CleanSizeOption and i.color = @CleanColorOption
		left join dbo.ProductDistributor pd with (NOLOCK) on p.ProductID = pd.ProductID
	WHERE p.ProductID = @ProductID
		and pv.VariantID = @VariantID

	SET @ShoppingCartrecid = SCOPE_IDENTITY()

	--Update KitCart Table if necessary
	IF (@IsAKit = 1 AND @IsKit2 = 0) BEGIN
		UPDATE KitCart SET ShoppingCartRecID = @ShoppingCartrecid WHERE ProductID = @ProductID and VariantID = @VariantID and ShoppingCartRecID = 0 and CustomerID = @CustomerID
	END

	SET @NewShoppingCartRecID = @ShoppingCartrecid
GO
PRINT N'Creating [dbo].[aspdnsf_AdjustInventory]...';

GO

create proc [dbo].[aspdnsf_AdjustInventory]
    @ordernumber int,
    @direction smallint -- 1 = add items to inventory, -1 = remove from inventory

AS
BEGIN
    SET NOCOUNT ON

    IF @direction <> 1 and @direction <> -1 BEGIN
        RAISERROR('Invalid direction specified', 16, 1)
        RETURN
    END

    DECLARE @InventoryWasReduced int
    SELECT @InventoryWasReduced = InventoryWasReduced FROM dbo.orders with (nolock) WHERE ordernumber = @ordernumber

    IF (@direction = 1 and @InventoryWasReduced = 1) or (@direction = -1 and @InventoryWasReduced = 0) BEGIN

        BEGIN TRAN
            -- update [dbo].Products
            update dbo.Inventory
            SET Quan = Quan + (a.qty*@direction)
            FROM dbo.Inventory i
                join (select o.variantid,
                            case when o.ChosenColor is null then '' when charindex('[', o.ChosenColor)>0 then rtrim(left(o.ChosenColor, charindex('[', o.ChosenColor)-1)) else o.ChosenColor end ChosenColor,
                            case when o.ChosenSize is null then '' when charindex('[', o.ChosenSize)>0 then rtrim(left(o.ChosenSize, charindex('[', o.ChosenSize)-1)) else o.ChosenSize end ChosenSize,
                            sum(o.Quantity) qty
                      from dbo.Orders_ShoppingCart o
                          join dbo.product p on p.ProductID = o.ProductID
                          join dbo.productvariant pv on o.ProductID = pv.ProductID and o.VariantID = pv.VariantID
                      where o.ordernumber = @ordernumber and p.TrackInventoryBySizeAndColor = 1
                      group by o.variantid,
                            case when o.ChosenColor is null then '' when charindex('[', o.ChosenColor)>0 then rtrim(left(o.ChosenColor, charindex('[', o.ChosenColor)-1)) else o.ChosenColor end ,
                            case when o.ChosenSize is null then '' when charindex('[', o.ChosenSize)>0 then rtrim(left(o.ChosenSize, charindex('[', o.ChosenSize)-1)) else o.ChosenSize end
                     ) a on i.variantid = a.variantid and isnull(i.size, '') = a.ChosenSize and isnull(i.Color, '') = a.ChosenColor

            IF @@ERROR <> 0 BEGIN
                ROLLBACK TRAN
                RAISERROR('Inventory update failed', 16, 1)
                RETURN
            END


            update dbo.ProductVariant
            SET Inventory = Inventory + (a.qty*@direction)
            FROM dbo.ProductVariant pv join [dbo].Product p on pv.productid = p.productid
                join (select o.variantid, sum(o.Quantity) qty
                      from dbo.Orders_ShoppingCart o
                          join dbo.product p on p.ProductID = o.ProductID
                          join dbo.productvariant pv on o.ProductID = pv.ProductID and o.VariantID = pv.VariantID
                      where o.ordernumber = @ordernumber and p.TrackInventoryBySizeAndColor = 0
                      group by o.variantid
                     ) a on pv.variantid = a.variantid


            IF @@ERROR <> 0 BEGIN
                ROLLBACK TRAN
                RAISERROR('ProductVariant inventory update failed', 16, 1)
                RETURN
            END


            --Update Inventory of inventoryable kititems
            UPDATE dbo.Inventory
            SET Quan = Quan + (a.qty*@direction)
            FROM dbo.Inventory i
                join (select o.InventoryVariantID variantid,
                            case when o.InventoryVariantColor is null then '' when charindex('[', o.InventoryVariantColor)>0 then rtrim(left(o.InventoryVariantColor, charindex('[', o.InventoryVariantColor)-1)) else o.InventoryVariantColor end ChosenColor,
                            case when o.InventoryVariantSize is null then '' when charindex('[', o.InventoryVariantSize)>0 then rtrim(left(o.InventoryVariantSize, charindex('[', o.InventoryVariantSize)-1)) else o.InventoryVariantSize end ChosenSize,
                            sum(o.Quantity) qty
                      from dbo.Orders_KitCart o
                          join dbo.Orders_ShoppingCart sc on sc.ShoppingCartRecID = o.ShoppingCartRecID
                          join dbo.product p on p.ProductID = o.ProductID
                          join dbo.productvariant pv on o.ProductID = pv.ProductID and o.VariantID = pv.VariantID
                      where o.ordernumber = @ordernumber and p.TrackInventoryBySizeAndColor = 1
                      group by o.InventoryVariantID,
                            case when o.InventoryVariantColor is null then '' when charindex('[', o.InventoryVariantColor)>0 then rtrim(left(o.InventoryVariantColor, charindex('[', o.InventoryVariantColor)-1)) else o.InventoryVariantColor end ,
                            case when o.InventoryVariantSize is null then '' when charindex('[', o.InventoryVariantSize)>0 then rtrim(left(o.InventoryVariantSize, charindex('[', o.InventoryVariantSize)-1)) else o.InventoryVariantSize end
                     ) a on i.variantid = a.variantid and isnull(i.size, '') = a.ChosenSize and isnull(i.Color, '') = a.ChosenColor

            IF @@ERROR <> 0 BEGIN
                ROLLBACK TRAN
                RAISERROR('KitItem Inventory update failed', 16, 1)
                RETURN
            END


            update dbo.ProductVariant
            SET Inventory = Inventory + (a.qty*@direction)
            FROM dbo.ProductVariant pv join [dbo].Product p on pv.productid = p.productid
                join (select o.InventoryVariantID variantid, sum(o.Quantity*sc.Quantity) qty
                      from dbo.Orders_KitCart o
                          join dbo.Orders_ShoppingCart sc on sc.ShoppingCartRecID = o.ShoppingCartRecID
                          join dbo.product p on p.ProductID = o.ProductID
                          join dbo.productvariant pv on o.ProductID = pv.ProductID and o.VariantID = pv.VariantID
                      where o.ordernumber = @ordernumber and p.TrackInventoryBySizeAndColor = 0
                      group by o.InventoryVariantID
                     ) a on pv.variantid = a.variantid


            IF @@ERROR <> 0 BEGIN
                ROLLBACK TRAN
                RAISERROR('KitItem ProductVariant inventory update failed', 16, 1)
                RETURN
            END

            UPDATE dbo.orders SET InventoryWasReduced = case @direction when 1 then 0 when -1 then 1 else InventoryWasReduced end WHERE ordernumber = @ordernumber

        COMMIT TRAN

    END

END
GO
PRINT N'Creating [dbo].[aspdnsf_BestSellers]...';

GO


create proc [dbo].[aspdnsf_BestSellers]
    @since			int = 180,  -- best sellers in the last "@since" number of days
    @return			int = 10,   -- returns the top "@returns" items
    @orderby		tinyint = 1, -- 1 = order by count of sales for each product, 2 = order by total dollars sales for each product
    @storeID		int = 1,
	@filterProduct	bit = 0


AS
BEGIN
SET NOCOUNT ON

DECLARE @cmd varchar(200)

CREATE TABLE #tmp (id int not null identity, ProductID int, VariantID int, SKU nvarchar(50), SKUSuffix nvarchar(50), ProductName nvarchar(400), SEName nvarchar(150), VariantName nvarchar(400), SalesCount money, SalesDollars money,ImageFilenameOverride nvarchar(max), VariantImageFilenameOverride nvarchar(max), VariantCount int)
INSERT #tmp (ProductID, VariantID, SKU, SKUSuffix, ProductName, SEName, VariantName, SalesCount, SalesDollars,ImageFilenameOverride, VariantImageFilenameOverride,VariantCount)
SELECT
    s.ProductID,
    s.VariantID,
    p.SKU,
    isnull(pv.SKUSuffix, '') SKUSuffix,
    p.Name,
    p.SEName,
    isnull(pv.Name, '') VariantName,
    s.NumSales,
    s.NumDollars,
    ISNULL(p.ImageFilenameOverride, '') AS ImageFilenameOverride,
    ISNULL(pv.ImageFilenameOverride, '') AS VariantImageFilenameOverride,
    (SELECT count(VariantID) from ProductVariant WHERE ProductID = p.productid)
FROM (select ProductID, VariantID, SUM(Quantity) AS NumSales, SUM(OrderedProductPrice) AS NumDollars
      from dbo.Orders_ShoppingCart sc
            join [dbo].Orders o on sc.OrderNumber = o.OrderNumber and o.OrderDate >= dateadd(dy, -@since, getdate())
      group by ProductID, VariantID
     ) s
    join [dbo].Product p with (nolock) on s.productid = p.productid
    join [dbo].ProductVariant pv with (nolock) on s.variantid = pv.variantid
    inner join (select distinct a.ProductID from Product a with (nolock) left join ProductStore b with (nolock) on a.ProductID = b.ProductID where (@filterProduct = 0 or StoreID = @storeID)) b on p.ProductID = b.ProductID
WHERE p.Deleted = 0
    and p.Published = 1
    and pv.Published = 1
    and pv.Deleted = 0
ORDER BY case @orderby when 1 then s.NumSales when 2 then s.NumDollars else s.NumSales end desc


SET @cmd = 'select top ' + convert(varchar(10), @return ) + ' * FROM #tmp order by id'

EXEC (@cmd)
END
GO
PRINT N'Creating [dbo].[aspdnsf_CheckFilthy]...';

GO


CREATE PROC dbo.aspdnsf_CheckFilthy
    @COMMENTTEXT nvarchar(max),
    @locale char(5)

AS
SET NOCOUNT ON

    IF EXISTS (select * from Badword WHERE (@COMMENTTEXT LIKE '%' + WORD + ' %' OR @COMMENTTEXT LIKE '%' + WORD + ',%' OR @COMMENTTEXT LIKE '%' + WORD + '.%' OR @COMMENTTEXT LIKE '%' + WORD + '!%' OR @COMMENTTEXT LIKE '%' + WORD) AND LocaleSetting = @locale )
        SELECT 1 IsFilthy
    ELSE
        SELECT 0 IsFilthy
GO
PRINT N'Creating [dbo].[aspdnsf_ClearAllImportFlags]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_ClearAllImportFlags]

as
BEGIN
    SET NOCOUNT ON
    update [dbo].productvariant set IsImport=0;
    update [dbo].product set IsImport=0;
    update [dbo].manufacturer set IsImport=0;
    update [dbo].category set IsImport=0;
    update [dbo].section set IsImport=0;
    update [dbo].library set IsImport=0;
    update [dbo].Document set IsImport=0;
END
GO
PRINT N'Creating [dbo].[aspdnsf_CloneProduct]...';

GO

CREATE proc [dbo].[aspdnsf_CloneProduct]
    @productID int,
    @userid int = 0

AS
BEGIN

SET NOCOUNT ON

DECLARE @tmpKitTbl TABLE(KitGroupID int not null)
DECLARE @tmpPVariantTbl TABLE(VariantID int not null)
DECLARE @newproductID int
DECLARE @err int, @newkitgroupid int

SET @newproductID = -1

BEGIN TRAN
    INSERT [dbo].product (ProductGUID, Name, Summary, Description, SEKeywords, SEDescription, MiscText, FroogleDescription, SETitle, SEAltText, SizeOptionPrompt, ColorOptionPrompt, TextOptionPrompt, ProductTypeID, TaxClassID, SKU, ManufacturerPartNumber, SalesPromptID, IsFeatured, XmlPackage, ColWidth, Published, RequiresRegistration, Looks, Notes, QuantityDiscountID, RelatedProducts, UpsellProducts, UpsellProductDiscountPercentage, RelatedDocuments, TrackInventoryBySizeAndColor, TrackInventoryBySize, TrackInventoryByColor, IsAKit, ShowInProductBrowser, ShowBuyButton, RequiresProducts, HidePriceUntilCart, IsCalltoOrder, ExcludeFromPriceFeeds, RequiresTextOption, TextOptionMaxLength, SEName, ExtensionData, ExtensionData2, ExtensionData3, ExtensionData4, ExtensionData5, ImageFilenameOverride, IsImport, Deleted, CreatedOn)
    SELECT newid(), Name + ' - CLONED', Summary, Description, SEKeywords, SEDescription, MiscText, FroogleDescription, SETitle, SEAltText, SizeOptionPrompt, ColorOptionPrompt, TextOptionPrompt, ProductTypeID, TaxClassID, SKU, ManufacturerPartNumber, SalesPromptID, IsFeatured, XmlPackage, ColWidth, 0, RequiresRegistration, 0, Notes, QuantityDiscountID, RelatedProducts, UpsellProducts, UpsellProductDiscountPercentage, RelatedDocuments, TrackInventoryBySizeAndColor, TrackInventoryBySize, TrackInventoryByColor, IsAKit, ShowInProductBrowser, ShowBuyButton, RequiresProducts, HidePriceUntilCart, IsCalltoOrder, ExcludeFromPriceFeeds, RequiresTextOption, TextOptionMaxLength, SEName, ExtensionData, ExtensionData2, ExtensionData3, ExtensionData4, ExtensionData5, ImageFilenameOverride, IsImport, Deleted, getdate()
    FROM dbo.product
    WHERE productid = @productID

    SELECT @newproductID = SCOPE_IDENTITY(), @err = @@error

    IF @err <> 0 BEGIN
        raiserror('Product not cloned', 1, 16)
        rollback tran
        return -1
    END

        DECLARE @PrdVariantID int, @newvariantID int
        INSERT @tmpPVariantTbl SELECT VariantID FROM dbo.productvariant  WHERE productid = @productID
        SELECT top 1 @PrdVariantID = VariantID FROM @tmpPVariantTbl
        WHILE @@rowcount <> 0 BEGIN

            INSERT [dbo].productvariant (VariantGUID, ProductID, IsDefault, Name, Description, SEKeywords, SEDescription, Colors, ColorSKUModifiers, Sizes, SizeSKUModifiers, FroogleDescription, SKUSuffix, ManufacturerPartNumber, Price, SalePrice, Weight, MSRP, Cost, Points, Dimensions, Inventory, DisplayOrder, Notes, IsTaxable, IsShipSeparately, IsDownload, DownloadLocation, FreeShipping, Published, IsSecureAttachment, IsRecurring, RecurringInterval, RecurringIntervalType, RewardPoints, SEName, RestrictedQuantities, MinimumQuantity, ExtensionData, ExtensionData2, ExtensionData3, ExtensionData4, ExtensionData5, ImageFilenameOverride, IsImport, Deleted, CreatedOn)
            SELECT newid(), @newproductID, IsDefault, Name, Description, SEKeywords, SEDescription, Colors, ColorSKUModifiers, Sizes, SizeSKUModifiers, FroogleDescription, SKUSuffix, ManufacturerPartNumber, Price, SalePrice, Weight, MSRP, Cost, Points, Dimensions, Inventory, DisplayOrder, Notes, IsTaxable, IsShipSeparately, IsDownload, DownloadLocation, FreeShipping, Published, IsSecureAttachment, IsRecurring, RecurringInterval, RecurringIntervalType, RewardPoints, SEName, RestrictedQuantities, MinimumQuantity, ExtensionData, ExtensionData2, ExtensionData3, ExtensionData4, ExtensionData5, ImageFilenameOverride, IsImport, Deleted, getdate()
            FROM dbo.productvariant
            WHERE VariantID = @PrdVariantID

            SELECT @newvariantID = SCOPE_IDENTITY(), @err = @@error

            IF @err <> 0 BEGIN
                raiserror('Product not cloned', 1, 16)
                rollback tran
                return -2
            END


            INSERT [dbo].Inventory (InventoryGUID, VariantID, Color, Size, Quan, CreatedOn)
            SELECT newid(), @newvariantID, Color, Size, Quan, getdate()
            FROM dbo.Inventory
            WHERE VariantID = @PrdVariantID

		INSERT [dbo].ExtendedPrice (ExtendedPriceGUID, VariantID, CustomerLevelID, Price, ExtensionData, CreatedOn, UpdatedOn)
		SELECT newid(), @newvariantID, CustomerLevelID, Price, ExtensionData, getdate(), getdate()
		FROM ExtendedPrice where VariantID = @PrdVariantID
            IF @@error <> 0 BEGIN
                raiserror('Product not cloned', 1, 16)
                rollback tran
                return -14
            END

            DELETE @tmpPVariantTbl where VariantID = @PrdVariantID
            SELECT top 1 @PrdVariantID = VariantID from @tmpPVariantTbl
    END





    DECLARE @kitgrpid int
    INSERT @tmpKitTbl select KitGroupID FROM kitgroup  where productid = @productID
    SELECT top 1 @kitgrpid = KitGroupID FROM @tmpKitTbl
    WHILE @@rowcount <> 0 BEGIN
        INSERT [dbo].kitgroup (KitGroupGUID, Name, Description, ProductID, DisplayOrder, KitGroupTypeID, IsRequired, ExtensionData, CreatedOn)
        SELECT newid(), Name, Description, @newproductID, DisplayOrder, KitGroupTypeID, IsRequired, ExtensionData, getdate()
        FROM dbo.kitgroup
        WHERE KitGroupID = @kitgrpid

        SELECT @newkitgroupid = SCOPE_IDENTITY(), @err = @@error

        IF @err <> 0 BEGIN
            raiserror('Product not cloned', 1, 16)
            rollback tran
            return -3
        END


        INSERT [dbo].kititem (KitItemGUID, KitGroupID, Name, Description, PriceDelta, IsDefault, DisplayOrder, TextOptionMaxLength, TextOptionWidth, TextOptionHeight, ExtensionData, InventoryVariantID, InventoryVariantColor, InventoryVariantSize, CreatedOn)
        SELECT newid(), @newkitgroupid, kititem.Name, kititem.Description, kititem.PriceDelta, kititem.IsDefault, kititem.DisplayOrder, kititem.TextOptionMaxLength, kititem.TextOptionWidth, kititem.TextOptionHeight, kititem.ExtensionData, kititem.InventoryVariantID, kititem.InventoryVariantColor, kititem.InventoryVariantSize, getdate()
        FROM dbo.kititem
        WHERE KitGroupID = @kitgrpid

        IF @@error <> 0 BEGIN
            raiserror('Product not cloned', 1, 16)
            rollback tran
            return -6
        END

        DELETE @tmpKitTbl WHERE KitGroupID = @kitgrpid
        SELECT top 1 @kitgrpid = KitGroupID FROM @tmpKitTbl
    END

    INSERT [dbo].productcategory (ProductID, CategoryID, CreatedOn)
    SELECT @newproductID, CategoryID, getdate()
    FROM dbo.productcategory
    WHERE productid = @productID

    IF @@error <> 0 BEGIN
        raiserror('Product not cloned', 1, 16)
        rollback tran
        return -5
    END



    INSERT [dbo].productsection (ProductID, SectionID, CreatedOn)
    SELECT @newproductID, SectionID, getdate()
    FROM dbo.productsection
    WHERE productid = @productID

    IF @@error <> 0 BEGIN
        raiserror('Product not cloned', 1, 16)
        rollback tran
        return -7
    END


    INSERT [dbo].productaffiliate (ProductID, AffiliateID, CreatedOn)
    SELECT @newproductID, AffiliateID, getdate()
    FROM dbo.productaffiliate
    WHERE productid = @productID

    IF @@error <> 0 BEGIN
        raiserror('Product not cloned', 1, 16)
        rollback tran
        return -9
    END

    INSERT [dbo].productcustomerlevel (ProductID, CustomerLevelID, CreatedOn)
    SELECT @newproductID, CustomerLevelID, getdate()
    FROM dbo.productcustomerlevel
    WHERE productid = @productID

    IF @@error <> 0 BEGIN
        raiserror('Product not cloned', 1, 16)
        rollback tran
        return -10
    END

    INSERT [dbo].productlocalesetting (ProductID, LocaleSettingID, CreatedOn)
    SELECT @newproductID, LocaleSettingID, getdate()
    FROM dbo.productlocalesetting
    WHERE productid = @productID

    IF @@error <> 0 BEGIN
        raiserror('Product not cloned', 1, 16)
        rollback tran
        return -11
    END

    INSERT [dbo].ProductManufacturer (ManufacturerID, ProductID, DisplayOrder, CreatedOn)
    SELECT ManufacturerID, @newproductID, DisplayOrder, getdate()
    FROM dbo.productmanufacturer
    WHERE productid = @productID

    IF @@error <> 0 BEGIN
        raiserror('Product not cloned', 1, 16)
        rollback tran
        return -12
    END


    INSERT [dbo].ProductDistributor (DistributorID, ProductID, DisplayOrder, CreatedOn)
    SELECT DistributorID, @newproductID, DisplayOrder, getdate()
    FROM dbo.productdistributor
    WHERE productid = @productID

    INSERT [dbo].ProductGenre (GenreID, ProductID, DisplayOrder, CreatedOn)
    SELECT GenreID, @newproductID, DisplayOrder, getdate()
    FROM dbo.productgenre
    WHERE productid = @productID

    INSERT [dbo].ProductVector (VectorID, ProductID, DisplayOrder, CreatedOn)
    SELECT VectorID, @newproductID, DisplayOrder, getdate()
    FROM dbo.productvector
    WHERE productid = @productID

    INSERT [dbo].ProductStore (ProductId, StoreId, CreatedOn)
    SELECT @newproductID, StoreId, getdate()
    FROM dbo.ProductStore
    WHERE productid = @productID

    IF @@error <> 0 BEGIN
        raiserror('Product not cloned', 1, 16)
        rollback tran
        return -13
    END


    -- return one result row with new Product ID
    select @newproductID
COMMIT TRAN
END
GO
PRINT N'Creating [dbo].[aspdnsf_CloneStoreMappings]...';

GO


CREATE PROC [dbo].[aspdnsf_CloneStoreMappings]
	@FromStoreID INT,
	@ToStoreID int
	AS
	BEGIN

		INSERT INTO EntityStore (StoreID, EntityID, EntityType)
		SELECT @ToStoreID AS [StoreID], EntityID, EntityType FROM EntityStore WHERE StoreID = @FromStoreID

		INSERT INTO AffiliateStore (StoreID, AffiliateID)
		SELECT @ToStoreID AS [StoreID], AffiliateID FROM AffiliateStore WHERE StoreID = @FromStoreID

		INSERT INTO NewsStore (StoreID, NewsID)
		SELECT @ToStoreID AS [StoreID], NewsID FROM NewsStore WHERE StoreID = @FromStoreID

		INSERT INTO ProductStore (StoreID, ProductID)
		SELECT @ToStoreID AS [StoreID], ProductID FROM ProductStore WHERE StoreID = @FromStoreID

		INSERT INTO TopicStore (StoreID, TopicID)
		SELECT @ToStoreID AS [StoreID], TopicID FROM TopicStore WHERE StoreID = @FromStoreID

		INSERT INTO GiftCardStore (StoreID, GiftCardID)
		SELECT @ToStoreID AS [StoreID], GiftCardID FROM GiftCardStore WHERE StoreID = @FromStoreID

		INSERT INTO CouponStore (StoreID, CouponID)
		SELECT @ToStoreID AS [StoreID], CouponID FROM CouponStore WHERE StoreID = @FromStoreID

		INSERT INTO PromotionStore (StoreID, PromotionID)
		SELECT @ToStoreID AS [StoreID], PromotionID FROM PromotionStore WHERE StoreID = @FromStoreID

		INSERT INTO OrderOptionStore(StoreID, OrderOptionID)
		SELECT @ToStoreID AS [StoreID], OrderOptionID FROM OrderOptionStore WHERE StoreID = @FromStoreID

		INSERT INTO ShippingMethodStore(StoreID, ShippingMethodID)
		SELECT @ToStoreID AS [StoreID], ShippingMethodID FROM ShippingMethodStore WHERE StoreID = @FromStoreID

		-- only create additional configs/string resources for non-default stores
		declare @isDefault tinyint
		select @isDefault = IsDefault from Store WHERE StoreID = @FromStoreID
		if(@isDefault <> 1)
		begin
		   INSERT INTO StringResource(StringResourceGUID, StoreID, [Name], LocaleSetting, ConfigValue)
			SELECT newid(), @ToStoreID, [Name], LocaleSetting, ConfigValue FROM StringResource WHERE StoreID = @FromStoreID

			INSERT INTO AppConfig(AppConfigGUID, StoreID, [Name], Description, ConfigValue, ValueType, AllowableValues, GroupName, SuperOnly, Hidden)
			SELECT newid(), @ToStoreID, [Name], Description, ConfigValue, ValueType, AllowableValues, GroupName, SuperOnly, Hidden FROM AppConfig WHERE StoreID = @FromStoreID
		end
	END
GO
PRINT N'Creating [dbo].[aspdnsf_CloneVariant]...';

GO
CREATE proc [dbo].[aspdnsf_CloneVariant]
	@variantId int
AS BEGIN
	DECLARE @newVariantId int = 0

	-- We need to build up a name string with all of the ML-values prefix ed with "(Cloned)".
	-- To do that, we create a variable with the name of the variant, loop through all locales
	-- in the name, and prepend the "(Cloned) " string to each localized name.

	-- Create the @updatedName variable and initialize it with the variant's name. It may or
	-- may not contain ML data.
	DECLARE @updatedName NVARCHAR(MAX) = ''
	SELECT
		@updatedName = Name
	FROM
		ProductVariant
	where
		VariantID = @variantId

	-- Create a CTE with each locale in the variant's name. If there is no ML data, this will
	-- return one null locale.
	;WITH variantLocales AS (
		SELECT DISTINCT
			ml_name.Locale Locale
		FROM
			ProductVariant
			CROSS APPLY dbo.ParseMlLocales(Name) ml_name
		WHERE
			VariantID = @variantId
			AND Deleted = 0
	)
	-- Loop through each locale in the CTE, updating the variable's value for that locale. If
	-- a null locale name is given, it will just write out the name instead of the ML data XML.
	SELECT
		@updatedName = dbo.SetMlValue(
			@updatedName,
			'(Cloned) ' + dbo.GetMlValue(@updatedName, variantLocales.Locale),
			variantLocales.locale)
	FROM
		variantLocales

	-- Now duplicate the target variant, using the name we generated above
	INSERT dbo.ProductVariant(
		VariantGUID,
		ProductID,
		IsDefault,
		Name,
		[Description],
		SEKeywords,
		SEDescription,
		Colors,
		ColorSKUModifiers,
		Sizes,
		SizeSKUModifiers,
		FroogleDescription,
		SKUSuffix,
		ManufacturerPartNumber,
		Price,
		SalePrice,
		[Weight],
		MSRP,
		Cost,
		Points,
		Dimensions,
		Inventory,
		DisplayOrder,
		Notes,
		IsTaxable,
		IsShipSeparately,
		IsDownload,
		DownloadLocation,
		FreeShipping,
		Published,
		IsSecureAttachment,
		IsRecurring,
		RecurringInterval,
		RecurringIntervalType,
		RewardPoints,
		SEName,
		RestrictedQuantities,
		MinimumQuantity,
		ExtensionData,
		ExtensionData2,
		ExtensionData3,
		ExtensionData4,
		ExtensionData5,
		ImageFilenameOverride,
		IsImport,
		Deleted)
	SELECT
		newid(),
		ProductID,
		0,
		@updatedName,
		[Description],
		SEKeywords,
		SEDescription,
		Colors,
		ColorSKUModifiers,
		Sizes,
		SizeSKUModifiers,
		FroogleDescription,
		SKUSuffix,
		ManufacturerPartNumber,
		Price,
		SalePrice,
		[Weight],
		MSRP,
		Cost,
		Points,
		Dimensions,
		Inventory,
		DisplayOrder,
		Notes,
		IsTaxable,
		IsShipSeparately,
		IsDownload,
		DownloadLocation,
		FreeShipping,
		0,
		IsSecureAttachment,
		IsRecurring,
		RecurringInterval,
		RecurringIntervalType,
		RewardPoints,
		SEName,
		RestrictedQuantities,
		MinimumQuantity,
		ExtensionData,
		ExtensionData2,
		ExtensionData3,
		ExtensionData4,
		ExtensionData5,
		ImageFilenameOverride,
		IsImport,
		Deleted
	FROM
		dbo.ProductVariant
	WHERE
		VariantID = @variantId

	-- Save the ID of the cloned variant so we can update related tables.
	SELECT @newVariantId = SCOPE_IDENTITY()

	IF @@error <> 0 BEGIN
		raiserror('Variant not cloned', 1, 16)
		SELECT 0 VariantID
		RETURN
	END
	ELSE BEGIN
		-- Clone any extended prices
		INSERT dbo.ExtendedPrice (ExtendedPriceGUID, VariantID, CustomerLevelID, Price, ExtensionData)
		SELECT newid(), @newVariantId, CustomerLevelID, Price, ExtensionData
		FROM dbo.ExtendedPrice
		WHERE VariantID = @variantId

		-- Clone any inventory records
		INSERT dbo.Inventory (InventoryGUID, VariantID, Color, Size, Quan)
		SELECT newid(), @newVariantId, Color, Size, Quan
		FROM dbo.Inventory
		WHERE VariantID = @variantId

		SELECT @newVariantId VariantID
	END
END
GO
PRINT N'Creating [dbo].[aspdnsf_CreateDefaultVariant]...';

GO


create proc [dbo].[aspdnsf_CreateDefaultVariant]
AS
SET NOCOUNT ON


INSERT [dbo].ProductVariant (VariantGUID, IsDefault, Name, ProductID, Price, SalePrice, Inventory,
                       DisplayOrder, IsTaxable, IsShipSeparately, IsDownload, FreeShipping,
                       Published, Wholesale, IsSecureAttachment, IsRecurring, RecurringInterval,
                       RecurringIntervalType, SEName, IsImport, Deleted, CreatedOn, CustomerEntersPrice)
SELECT newid(), 1, '', p.ProductID, 0, 0, 100000000,
       1, 0, 0, 0, 0,
       1, 0, 0, 0, 0,
       0, '', 0, 0, getdate(), 0
FROM dbo.Product p with (nolock)
    left join dbo.ProductVariant pv with (nolock) on p.ProductID = pv.ProductID
WHERE pv.ProductID is null
GO
PRINT N'Creating [dbo].[aspdnsf_CreateFeed]...';

GO
create proc [dbo].[aspdnsf_CreateFeed]
    @StoreID int,
    @Name nvarchar(100),
    @DisplayOrder int,
    @XmlPackage nvarchar(100),
    @CanAutoFTP tinyint,
    @FTPUsername nvarchar(100),
    @FTPPassword nvarchar(100),
    @FTPServer nvarchar(100),
    @FTPPort int,
    @FTPFilename nvarchar(100),
    @ExtensionData nvarchar(max),
    @FeedID int OUTPUT

AS
BEGIN
SET NOCOUNT ON

IF isnull(@XmlPackage, '') = '' BEGIN
    RAISERROR('XmlPAckage is required', 16, 1)
    RETURN
END

IF @CanAutoFTP > 1
    SET @CanAutoFTP = 1



INSERT dbo.Feed(FeedGUID, StoreID, Name, DisplayOrder, XmlPackage, CanAutoFTP, FTPUsername, FTPPassword, FTPServer, FTPPort, FTPFilename, ExtensionData, CreatedOn)
VALUES (newid(), @StoreID, @Name, isnull(@DisplayOrder,1), @XmlPackage, isnull(@CanAutoFTP,0), @FTPUsername, @FTPPassword, @FTPServer, @FTPPort, @FTPFilename, @ExtensionData, getdate())
set @FeedID = SCOPE_IDENTITY()
END
GO
PRINT N'Creating [dbo].[aspdnsf_CreateGiftCard]...';

GO
CREATE proc [dbo].[aspdnsf_CreateGiftCard]
    @SerialNumber nvarchar(200),
    @PurchasedByCustomerID int,
    @OrderNumber int = null,
    @ShoppingCartRecID int,
    @ProductID int = null,
    @VariantID int = null,
    @InitialAmount money = null,
    @Balance money = null,
    @ExpirationDate datetime = null,
    @GiftCardTypeID int,
    @EMailName nvarchar(100) = null,
    @EMailTo nvarchar(100) = null,
    @EMailMessage nvarchar(max) = null,
    @ValidForCustomers nvarchar(max) = null,
    @ValidForProducts nvarchar(max) = null,
    @ValidForManufacturers nvarchar(max) = null,
    @ValidForCategories nvarchar(max) = null,
    @ValidForSections nvarchar(max) = null,
    @ExtensionData nvarchar(max) = null,
    @GiftCardID int OUTPUT

AS
SET NOCOUNT ON

IF @ExpirationDate is null
    set @ExpirationDate = dateadd(yy, 1, getdate())

insert dbo.GiftCard(GiftCardGUID, SerialNumber, PurchasedByCustomerID, OrderNumber, ShoppingCartRecID, ProductID, VariantID, InitialAmount, Balance, ExpirationDate, GiftCardTypeID, EMailName, EMailTo, EMailMessage, ValidForCustomers, ValidForProducts, ValidForManufacturers, ValidForCategories, ValidForSections, DisabledByAdministrator, ExtensionData, CreatedOn)
values
(
    newid(),
    @SerialNumber,
    @PurchasedByCustomerID,
    isnull(@OrderNumber, 0),
    isnull(@ShoppingCartRecID, 0),
    isnull(@ProductID, 0),
    isnull(@VariantID, 0),
    isnull(@InitialAmount,0),
    isnull(@Balance, 0),
    @ExpirationDate,
    @GiftCardTypeID,
    @EMailName,
    @EMailTo,
    @EMailMessage,
    @ValidForCustomers,
    @ValidForProducts,
    @ValidForManufacturers,
    @ValidForCategories,
    @ValidForSections,
    0,
    @ExtensionData,
    getdate()
)

set @GiftCardID = SCOPE_IDENTITY()

GO
PRINT N'Creating [dbo].[aspdnsf_CreateMissingVariants]...';

GO


create proc [dbo].[aspdnsf_CreateMissingVariants]

AS
BEGIN
SET NOCOUNT ON
INSERT [dbo].ProductVariant (VariantGUID, IsDefault, Name, ProductID, Price, SalePrice, Inventory,
                           DisplayOrder, IsTaxable, IsShipSeparately, IsDownload, FreeShipping,
                           Published, Wholesale, IsSecureAttachment, IsRecurring, RecurringInterval,
                           RecurringIntervalType, SEName, IsImport, Deleted, CreatedOn, CustomerEntersPrice)
SELECT newid(), 1, '', p.ProductID, 0, 0, 100000000,
       1, 0, 0, 0, 0,
       1, 0, 0, 0, 0,
       0, '', 0, 0, getdate(), 0
FROM dbo.Product p with (nolock)
    left join [dbo].ProductVariant pv with (nolock) on p.ProductID = pv.ProductID WHERE pv.ProductID is null
END
GO
PRINT N'Creating [dbo].[aspdnsf_CreateSubEntities]...';

GO


create proc dbo.aspdnsf_CreateSubEntities
    @EntityName varchar(20),
    @EntityID int,
    @EntityList varchar(8000)

AS
BEGIN
SET NOCOUNT ON

IF RTRIM(@EntityList) = ''
    RETURN

IF @EntityName = 'category'
    INSERT INTO [dbo].[Category] (CategoryGUID, Name, ParentCategoryID, XmlPackage, SEName, ColWidth, PageSize)
    SELECT newid(), s.Items, @EntityID, e.XmlPackage, dbo.MakeSEName(s.Items), e.ColWidth, e.PageSize
    FROM [dbo].[Category] e with (nolock) cross join dbo.split(@EntityList, ',') s
    WHERE categoryid = @EntityID

IF @EntityName = 'section'
    INSERT INTO [dbo].Section (SectionGUID, Name, ParentSectionID, XmlPackage, SEName, ColWidth, PageSize)
    SELECT newid(), s.Items, @EntityID, e.XmlPackage, dbo.MakeSEName(s.Items), e.ColWidth, e.PageSize
    FROM [dbo].[Section] e with (nolock) cross join dbo.split(@EntityList, ',') s
    WHERE Sectionid = @EntityID

IF @EntityName = 'distributor'
    INSERT INTO [dbo].Distributor (DistributorGUID, Name, ParentDistributorID, XmlPackage, SEName, ColWidth, PageSize)
    SELECT newid(), s.Items, @EntityID, e.XmlPackage, dbo.MakeSEName(s.Items), e.ColWidth, e.PageSize
    FROM [dbo].Distributor e with (nolock) cross join dbo.split(@EntityList, ',') s
    WHERE Distributorid = @EntityID

IF @EntityName = 'manufacturer'
    INSERT INTO [dbo].Manufacturer (ManufacturerGUID, Name, ParentManufacturerID, XmlPackage, SEName, ColWidth, PageSize)
    SELECT newid(), s.Items, @EntityID, e.XmlPackage, dbo.MakeSEName(s.Items), e.ColWidth, e.PageSize
    FROM [dbo].Manufacturer e with (nolock) cross join dbo.split(@EntityList, ',') s
    WHERE Manufacturerid = @EntityID

IF @EntityName = 'affiliate'
    INSERT INTO [dbo].Affiliate (AffiliateGUID, Name, ParentAffiliateID, SEName)
    SELECT newid(), s.Items, @EntityID, dbo.MakeSEName(s.Items)
    FROM [dbo].Affiliate e with (nolock) cross join dbo.split(@EntityList, ',') s
    WHERE Affiliateid = @EntityID

IF @EntityName = 'genre'
    INSERT INTO [dbo].Genre (GenreGUID, Name, ParentGenreID, XmlPackage, SEName, ColWidth, PageSize)
    SELECT newid(), s.Items, @EntityID, e.XmlPackage, dbo.MakeSEName(s.Items), e.ColWidth, e.PageSize
    FROM [dbo].Genre e with (nolock) cross join dbo.split(@EntityList, ',') s
    WHERE Genreid = @EntityID

IF @EntityName = 'vector'
    INSERT INTO [dbo].Vector (VectorGUID, Name, ParentVectorID, XmlPackage, SEName, ColWidth, PageSize)
    SELECT newid(), s.Items, @EntityID, e.XmlPackage, dbo.MakeSEName(s.Items), e.ColWidth, e.PageSize
    FROM [dbo].Vector e with (nolock) cross join dbo.split(@EntityList, ',') s
    WHERE Vectorid = @EntityID

END
GO
PRINT N'Creating [dbo].[aspdnsf_delAddressByID]...';

GO

CREATE PROCEDURE [dbo].[aspdnsf_delAddressByID]
(
	@AddressID int
)
AS
BEGIN
SET NOCOUNT ON
	DELETE FROM [Address]
	WHERE [AddressID] = @AddressID
END
GO
PRINT N'Creating [dbo].[aspdnsf_DeleteAddress]...';

GO



CREATE proc [dbo].[aspdnsf_DeleteAddress]
    @AddressID int,
    @CustomerID int

AS
BEGIN
    SET NOCOUNT ON

    DECLARE @addrID int

    BEGIN TRAN
        DELETE dbo.ADDRESS WHERE AddressID = @AddressID and CustomerID = @CustomerID
        IF @@ERROR <> 0 BEGIN
            ROLLBACK TRAN
            RETURN
        END

        SELECT TOP 1 @addrID = AddressID FROM dbo.Address with (nolock) WHERE CustomerID = @CustomerID

        update [dbo].Customer SET ShippingAddressID = @addrID WHERE ShippingAddressID = @AddressID and CustomerID = @CustomerID
        IF @@ERROR <> 0 BEGIN
            ROLLBACK TRAN
            RETURN
        END

        update [dbo].Customer SET BillingAddressID = @addrID WHERE BillingAddressID = @AddressID and CustomerID = @CustomerID

        IF @@ERROR <> 0 BEGIN
            ROLLBACK TRAN
            RETURN
        END

    COMMIT TRAN

END
GO
PRINT N'Creating [dbo].[aspdnsf_delFailedTransactionsByCustomer]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_delFailedTransactionsByCustomer]
(
	@CustomerID int
)
AS
BEGIN
SET NOCOUNT ON
	DELETE FROM FailedTransaction
	WHERE CustomerID = @CustomerID
END
GO
PRINT N'Creating [dbo].[aspdnsf_DelFeed]...';

GO


create proc [dbo].[aspdnsf_DelFeed]
    @FeedID int

AS
BEGIN
SET NOCOUNT ON

    DELETE dbo.Feed WHERE FeedID = @FeedID

END
GO
PRINT N'Creating [dbo].[aspdnsf_delProductRating]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_delProductRating]
	@RatingID	int
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @storeId int
	DECLARE @productId int
	DECLARE @ratingCustomerId int

	SELECT @storeId = StoreID, @productId = ProductId, @ratingCustomerId = CustomerId FROM Rating WHERE RatingId = @ratingId
	DELETE FROM RatingCommentHelpfulness WHERE StoreId = @storeId and ProductID = @productId and RatingCustomerID = @ratingCustomerId
	DELETE FROM Rating WHERE RatingID = @ratingId
END
GO
PRINT N'Creating [dbo].[aspdnsf_delRestrictedIP]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_delRestrictedIP]
(
	@IPAddress nvarchar(25)
)
AS
BEGIN
SET NOCOUNT ON
	DELETE FROM RestrictedIP
	WHERE IPAddress = @IPAddress
END
GO
PRINT N'Creating [dbo].[aspdnsf_delTaxClass]...';

GO


create proc [dbo].[aspdnsf_delTaxClass]
    @TaxClassID int

AS
SET NOCOUNT ON

BEGIN TRAN

    DELETE dbo.StateTaxRate where TaxClassID = @TaxClassID
    IF @@ERROR <> 0 BEGIN
        ROLLBACK TRAN
        RAISERROR('Deleting TaxClass from StateTaxRate failed', 16, 1)
        RETURN
    END


    DELETE dbo.CountryTaxRate where TaxClassID = @TaxClassID
    IF @@ERROR <> 0 BEGIN
        ROLLBACK TRAN
        RAISERROR('Deleting TaxClass from CountryTaxRate failed', 16, 1)
        RETURN
    END


    DELETE dbo.ZipTaxRate where TaxClassID = @TaxClassID
    IF @@ERROR <> 0 BEGIN
        ROLLBACK TRAN
        RAISERROR('Deleting TaxClass from ZipTaxRate failed', 16, 1)
        RETURN
    END


    DELETE dbo.TaxClass where TaxClassID = @TaxClassID
    IF @@ERROR <> 0 BEGIN
        ROLLBACK TRAN
        RAISERROR('Deleting TaxClass failed', 16, 1)
        RETURN
    END


COMMIT TRAN
GO
PRINT N'Creating [dbo].[aspdnsf_DropColumnWithDefaultConstraint]...';

GO

create proc [dbo].[aspdnsf_DropColumnWithDefaultConstraint]
  @TableName varchar(100),
  @ColumnName varchar(100)

AS
BEGIN
    DECLARE @def varchar(255), @cmd VARCHAR(1000)
    select @def = so.name
    From dbo.sysobjects so with (nolock)
        join dbo.syscolumns sc with (nolock)
                on so.id = sc.cdefault
                    and sc.id = object_id(@TableName)
                    and sc.name = @ColumnName

    IF @@rowcount = 1
        exec ('ALTER TABLE dbo.' + @TableName + ' DROP CONSTRAINT ' + @def)

    exec ('ALTER TABLE dbo.' + @TableName + ' DROP COLUMN ' + @ColumnName)

END
GO
PRINT N'Creating [dbo].[aspdnsf_EditOrder]...';

GO

create proc dbo.aspdnsf_EditOrder
    @OrderNumber int

AS
SET NOCOUNT ON

DECLARE @custid int, @custlvl int

SELECT @custid = customerid from dbo.orders with (nolock) where OrderNumber = @OrderNumber
SELECT @custlvl = CustomerLevelID FROM dbo.Customer with (nolock) WHERE customerid = @custid

DELETE dbo.shoppingcart where customerid = @custid and carttype = 0
DELETE dbo.KitCart where customerid = @custid and carttype = 0

INSERT dbo.ShoppingCart(ShoppingCartRecGUID, CustomerID, ProductSKU, ProductPrice, ProductWeight, ProductID, VariantID, Quantity, ChosenColor, ChosenColorSKUModifier, ChosenSize, ChosenSizeSKUModifier, DistributorID, IsTaxable, IsShipSeparately, IsDownload, DownloadLocation, FreeShipping, CreatedOn, ProductDimensions, CartType, IsSecureAttachment, TextOption,ShippingAddressID, IsUpsell, CustomerEntersPrice, IsAKit, IsSystem, TaxClassID, TaxRate, RequiresCount)
SELECT  newid(), os.CustomerID, os.OrderedProductSKU, case when isnull(pv.saleprice, 0) = 0 then  pv.Price else pv.saleprice end, pv.Weight, os.ProductID, os.VariantID, os.Quantity, os.ChosenColor, os.ChosenColorSKUModifier, os.ChosenSize, os.ChosenSizeSKUModifier, os.DistributorID, os.IsTaxable, os.IsShipSeparately, os.IsDownload, os.DownloadLocation, os.FreeShipping, getdate(), pv.Dimensions, 0, os.IsSecureAttachment, os.TextOption,os.ShippingAddressID, 0, os.CustomerEntersPrice, os.IsAKit, os.IsSystem, os.TaxClassID, os.TaxRate, ShoppingCartRecID
FROM dbo.orders_shoppingcart os with (NOLOCK)
    join dbo.product p with (NOLOCK) on os.productid = p.productid
    join dbo.productvariant pv with (NOLOCK) on os.variantid = pv.variantid
WHERE os.OrderNumber = @OrderNumber

INSERT dbo.KitCart(CartType, CreatedOn, CustomerID, ExtensionData, InventoryVariantColor, InventoryVariantID, InventoryVariantSize, KitGroupID, KitGroupTypeID, KitItemID, ProductID, Quantity, ShoppingCartRecID, TextOption, VariantID)
SELECT 0, getdate(), kc.CustomerID, kc.ExtensionData, kc.InventoryVariantColor, kc.InventoryVariantID, kc.InventoryVariantSize, kc.KitGroupID, kc.KitGroupTypeID, kc.KitItemID, kc.ProductID, kc.Quantity, s.ShoppingCartRecID, kc.TextOption, kc.VariantID
FROM dbo.orders_KitCart kc with (NOLOCK)
    join dbo.orders_shoppingcart os with (NOLOCK) on kc.ShoppingCartRecID = os.ShoppingCartRecID
    join dbo.ShoppingCart s with (NOLOCK) on os.ShoppingCartRecID = s.RequiresCount
WHERE os.OrderNumber = @OrderNumber

UPDATE ShoppingCart SET RequiresCount = 0 WHERE customerid = @custid and carttype = 0
GO
PRINT N'Creating [dbo].[aspdnsf_EditOrderProduct]...';

GO

create proc [dbo].[aspdnsf_EditOrderProduct]
    @ShoppingCartRecID int,
    @CustomerLevelID   int

AS
SET NOCOUNT ON

    SELECT p.*,
           pv.VariantID, pv.name VariantName, pv.Price, isnull(pv.SalePrice, 0) SalePrice, isnull(SkuSuffix, '') SkuSuffix, pv.Dimensions, pv.Weight, isnull(pv.Points, 0) Points, pv.Inventory, pv.ImageFilenameOverride VariantImageFilenameOverride,  pv.isdefault, pv.CustomerEntersPrice,
           sp.name SalesPromptName,
           case when pcl.productid is null then 0 else isnull(e.Price, 0) end ExtendedPrice
    FROM dbo.ShoppingCart           sc  with (nolock)
        join dbo.Product            p   with (NOLOCK) on p.ProductID = sc.ProductID
        join dbo.productvariant     pv  with (NOLOCK) on sc.ProductID = pv.ProductID and sc.variantid = pv.variantid
        join dbo.SalesPrompt        sp  with (NOLOCK) on p.SalesPromptID = sp.SalesPromptID
        left join dbo.ExtendedPrice e   with (NOLOCK) on pv.VariantID=e.VariantID and e.CustomerLevelID = @CustomerLevelID
        left join dbo.ProductCustomerLevel pcl with (NOLOCK) on p.ProductID = pcl.ProductID and pcl.CustomerLevelID = @CustomerLevelID
    WHERE sc.ShoppingCartRecID = @ShoppingCartRecID
GO
PRINT N'Creating [dbo].[aspdnsf_EntityMgr]...';

GO

create proc [dbo].[aspdnsf_EntityMgr]
    @EntityName varchar(100),
    @PublishedOnly tinyint

AS
BEGIN
    SET NOCOUNT ON
    IF @EntityName = 'Category' BEGIN
        SELECT Entity.CategoryID EntityID,
			XmlPackage,
			Name,
			ColWidth,
			ParentCategoryID ParentEntityID,
			[Description],
			DisplayOrder,
			Published,
			SEName,
			PageSize,
			SETitle,
			SEAltText,
			SEDescription,
			SEKeywords,
			TemplateName
        FROM dbo.Category Entity with (NOLOCK)
        WHERE Published >= @PublishedOnly and Deleted=0
    END

    IF @EntityName = 'Affiliate' BEGIN
        SELECT Entity.AffiliateID EntityID,
			'' as XmlPackage,
			Name,
			4 as ColWidth,
			ParentAffiliateID ParentEntityID,
			'' as [Description],
			DisplayOrder,
			Published,
			SEName,
			0 as PageSize,
			SETitle,
			SEAltText,
			SEDescription,
			SEKeywords,
			TemplateName
        FROM dbo.Affiliate Entity with (NOLOCK)
        WHERE Published >= @PublishedOnly and Deleted=0
    END

    IF @EntityName = 'Section' BEGIN
        SELECT Entity.SectionID EntityID,
			XmlPackage,
			Name,
			ColWidth,
			ParentSectionID ParentEntityID,
			[Description],
			DisplayOrder,
			Published,
			SEName,
			PageSize,
			SETitle,
			SEAltText,
			SEDescription,
			SEKeywords,
			TemplateName
        FROM dbo.Section Entity with (NOLOCK)
        WHERE Published >= @PublishedOnly and Deleted=0
    END

    IF @EntityName = 'Manufacturer' BEGIN
        SELECT Entity.ManufacturerID EntityID,
			XmlPackage,
			Name,
			ColWidth,
			ParentManufacturerID as ParentEntityID,
			[Description],
			DisplayOrder,
			Published,
			SEName,
			PageSize,
			SETitle,
			SEAltText,
			SEDescription,
			SEKeywords,
			TemplateName
        FROM dbo.Manufacturer Entity with (NOLOCK)
        WHERE Published >= @PublishedOnly and Deleted=0
    END

    IF @EntityName = 'Library' BEGIN
        SELECT Entity.LibraryID EntityID,
			XmlPackage,
			Name,
			ColWidth,
			ParentLibraryID as ParentEntityID,
			[Description],
			DisplayOrder,
			Published,
			SEName,
			PageSize,
			SETitle,
			SEAltText,
			SEDescription,
			SEKeywords,
			TemplateName
		FROM dbo.Library Entity with (NOLOCK)
        WHERE Published >= @PublishedOnly and Deleted=0
    END

    IF @EntityName = 'Distributor' BEGIN
        SELECT Entity.DistributorID EntityID,
			XmlPackage,
			Name,
			ColWidth,
			ParentDistributorID as ParentEntityID,
			[Description],
			DisplayOrder,
			Published,
			SEName,
			PageSize,
			SETitle,
			SEAltText,
			SEDescription,
			SEKeywords,
			TemplateName
		FROM dbo.Distributor Entity with (NOLOCK)
        WHERE Published >= @PublishedOnly and Deleted=0
    END

    IF @EntityName = 'Genre' BEGIN
        SELECT Entity.GenreID EntityID,
			XmlPackage,
			Name,
			ColWidth,
			ParentGenreID as ParentEntityID,
			[Description],
			DisplayOrder,
			Published,
			SEName,
			PageSize,
			SETitle,
			SEAltText,
			SEDescription,
			SEKeywords,
			TemplateName
		FROM dbo.Genre Entity with (NOLOCK)
        WHERE Published >= @PublishedOnly and Deleted=0
    END

    IF @EntityName = 'Vector' BEGIN
        SELECT Entity.VectorID EntityID,
			XmlPackage,
			Name,
			ColWidth,
			ParentVectorID as ParentEntityID,
			[Description],
			DisplayOrder,
			Published,
			SEName,
			PageSize,
			SETitle,
			SEAltText,
			SEDescription,
			SEKeywords,
			TemplateName
		FROM dbo.Vector Entity with (NOLOCK)
        WHERE Published >= @PublishedOnly and Deleted=0
    END

    IF @EntityName = 'Customerlevel' BEGIN
        SELECT Entity.CustomerLevelID EntityID,
			'' as XmlPackage,
			Name,
			4 as ColWidth,
			ParentCustomerLevelID ParentEntityID,
			'' as [Description],
			DisplayOrder,
			1 as Published,
			SEName,
			20 as PageSize,
			'' as SETitle,
			'' as SEAltText,
			'' as SEDescription,
			'' as SEKeywords,
			TemplateName
        FROM dbo.CustomerLevel Entity with (NOLOCK)
        WHERE Deleted=0
    END
END
GO
PRINT N'Creating [dbo].[aspdnsf_ExportProductList]...';

GO



create proc [dbo].[aspdnsf_ExportProductList]
    @categoryID int = -1,
    @sectionID int = -1,
    @manufacturerID int = -1,
    @distributorID int = -1,
    @genreID int = -1,
    @vectorID int = -1

AS
BEGIN
    set nocount on

    declare @productfilter table (productid int not null primary key)

    IF @categoryID+@sectionID+@manufacturerID+@distributorID+@genreID+@vectorID = -6

        SELECT p.ProductID,
               pv.VariantID,
               '' KitItemID,
               p.Name,
               0 KitGroupID,
               '' KitGroup,
               isnull(p.SKU, '') SKU,
               isnull(p.ManufacturerPartNumber, '') ManufacturerPartNumber,
               isnull(pv.SKUSuffix,'') SKUSuffix,
               convert(varchar(20), isnull(convert(decimal(10,2), pv.Cost), 0)) Cost,
               convert(varchar(20), isnull(convert(decimal(10,2), pv.MSRP), 0)) MSRP,
               convert(varchar(20), isnull(convert(decimal(10,2), pv.Price), 0)) Price,
               convert(varchar(20), isnull(convert(decimal(10,2), pv.SalePrice), 0)) SalePrice,
               convert(varchar(20), isnull(case p.TrackInventoryBySizeAndColor when 1 then i.quan else pv.Inventory end, 0)) Inventory
        FROM dbo.product p with (nolock)
            join dbo.productvariant pv with (nolock) on pv.ProductID = p.ProductID
            left join (select VariantID, sum(quan) quan from dbo.Inventory with (nolock) group by VariantID) i on i.VariantID = pv.VariantID
        WHERE p.deleted = 0 and pv.deleted = 0
        UNION ALL
        SELECT p.ProductID,
               pv.VariantID,
               convert(varchar(10), KitItemID) KitItemID,
               k.Name,
               kg.KitGroupID,
               kg.name,
               '',
               '',
               '',
               '',
               '',
               convert(varchar(20), k.PriceDelta),
               '',
               ''
        FROM dbo.product p with (nolock)
            join dbo.productvariant pv with (nolock) on pv.ProductID = p.ProductID
            join dbo.KitGroup kg with (nolock) on p.ProductID = kg.ProductID
            join dbo.KitItem k with (nolock) on k.KitGroupID = kg.KitGroupID
        WHERE p.deleted = 0 and pv.deleted = 0
        ORDER BY p.ProductID, pv.VariantID, KitGroupID

    ELSE BEGIN
        INSERT INTO @productfilter
        SELECT DISTINCT ProductID 
        FROM dbo.Product p WITH (NOLOCK)
        WHERE 
				(@categoryID = -1 OR EXISTS(SELECT * FROM [dbo].ProductCategory pc WITH (NOLOCK) WHERE p.ProductID = pc.ProductID AND pc.categoryID = @categoryID))
            AND
				(@sectionID = -1 OR EXISTS (SELECT * FROM [dbo].ProductSection ps WITH (NOLOCK) WHERE p.ProductID = ps.ProductID AND ps.SectionID = @sectionID))
            AND
                (@manufacturerID = -1 OR EXISTS (SELECT * FROM [dbo].ProductManufacturer pm WHERE p.ProductID = pm.ProductID AND pm.ManufacturerID = @manufacturerID))
            AND
                (@distributorID = -1 OR EXISTS (SELECT * FROM [dbo].ProductDistributor pd WITH (NOLOCK) WHERE p.ProductID = pd.ProductID AND pd.DistributorID = @distributorID))
            AND
                (@genreID = -1 OR EXISTS(SELECT * FROM [dbo].ProductGenre pg WITH (NOLOCK) WHERE p.ProductID = pg.ProductID AND pg.GenreID = @genreID))
            AND
                (@vectorID = -1 OR EXISTS(SELECT * FROM [dbo].ProductVector pv WITH (NOLOCK) WHERE p.ProductID = pv.ProductID AND pv.VectorID = @vectorID))

        SELECT p.ProductID,
               pv.VariantID,
               '' KitItemID,
               p.Name,
               0 KitGroupID,
               '' KitGroup,
               isnull(p.SKU, '') SKU,
               isnull(p.ManufacturerPartNumber, '') ManufacturerPartNumber,
               isnull(pv.SKUSuffix,'') SKUSuffix,
               convert(varchar(20), isnull(convert(decimal(10,2), pv.Cost), 0)) Cost,
               convert(varchar(20), isnull(convert(decimal(10,2), pv.MSRP), 0)) MSRP,
               convert(varchar(20), isnull(convert(decimal(10,2), pv.Price), 0)) Price,
               convert(varchar(20), isnull(convert(decimal(10,2), pv.SalePrice), 0)) SalePrice,
               convert(varchar(20), isnull(case p.TrackInventoryBySizeAndColor when 1 then i.quan else pv.Inventory end, 0)) Inventory
        FROM dbo.product p with (nolock)
            join dbo.productvariant pv with (nolock) on pv.ProductID = p.ProductID
            join @productfilter pf on p.ProductID = pf.ProductID
            left join (select VariantID, sum(quan) quan from dbo.Inventory with (nolock) group by VariantID) i on i.VariantID = pv.VariantID
        WHERE p.deleted = 0 and pv.deleted = 0
        UNION ALL
        SELECT p.ProductID,
               pv.VariantID,
               convert(varchar(10), KitItemID) KitItemID,
               k.Name,
               kg.KitGroupID,
               kg.name,
               '',
               '',
               '',
               '',
               '',
               convert(varchar(20), k.PriceDelta),
               '',
               ''
        FROM dbo.product p with (nolock)
            join dbo.productvariant pv with (nolock) on pv.ProductID = p.ProductID
            join @productfilter pf on p.ProductID = pf.ProductID
            join dbo.KitGroup kg with (nolock) on p.ProductID = kg.ProductID
            join dbo.KitItem k with (nolock) on k.KitGroupID = kg.KitGroupID
        WHERE p.deleted = 0 and pv.deleted = 0
        ORDER BY p.ProductID, pv.VariantID, KitGroupID

    END
END

GO
PRINT N'Creating [dbo].[aspdnsf_FindCircularReference]...';

GO


create proc [dbo].[aspdnsf_FindCircularReference]

as
SET NOCOUNT ON

DECLARE @categorypath table(catid int, parentID int)
SELECT c1.categoryid into #tmp FROM dbo.category c1 with (nolock) left join [dbo].category c2 with (nolock) on c1.categoryid = c2.ParentCategoryID WHERE c2.ParentCategoryID is null

DECLARE @StartCatID int, @loopCatID int, @prevloopCatID int, @parentCatID int, @catname nvarchar(200)

SELECT top 1 @StartCatID = categoryid from #tmp
WHILE @@rowcount > 0 BEGIN
    SELECT @loopCatID = ParentCategoryID, @catname = [name] from dbo.category with (nolock) WHERE categoryid = @StartCatID
    INSERT @categorypath values(@StartCatID, @loopCatID)
    WHILE @@rowcount > 0 begin
        IF exists (select * from @categorypath where catid = @loopCatID) BEGIN
            INSERT @categorypath select * from @categorypath where catid = @loopCatID
            PRINT 'circular reference found'
            SELECT cp.catid CategoryID, cp.parentID, c.name [Category Name] FROM @categorypath cp join [dbo].category c on cp.catid = c.CategoryID
            PRINT ''
            BREAK
        END

        IF @loopCatID = 0
            BREAK

        SET @prevloopCatID = @loopCatID
        SELECT @loopCatID = ParentCategoryID, @catname = [name] FROM dbo.category with (nolock) WHERE categoryid = @loopCatID
        INSERT @categorypath VALUES(@prevloopCatID, @loopCatID)
    end
    DELETE #tmp where categoryid = @StartCatID
    DELETE @categorypath
    SELECT top 1 @StartCatID = categoryid from #tmp
END

drop table #tmp
GO
PRINT N'Creating [dbo].[aspdnsf_GenerateCreatesForAllIndexes]...';

GO

CREATE PROC [dbo].[aspdnsf_GenerateCreatesForAllIndexes]

AS
BEGIN

			SELECT TABLE_NAME = OBJECT_NAME(i.id)
				 , INDEX_NAME = i.name
				 , COLUMN_LIST = dbo.GetIndexColumns(OBJECT_NAME(i.id), i.id, i.indid)
				 , IS_CLUSTERED = INDEXPROPERTY(i.id, i.name, 'IsClustered')
				 , IS_UNIQUE = INDEXPROPERTY(i.id, i.name, 'IsUnique')
              INTO #AllIndexes
              FROM dbo.sysindexes i
        INNER JOIN dbo.sysfilegroups g
                ON i.groupid = g.groupid
             WHERE (i.indid BETWEEN 1 AND 254)
                -- leave out AUTO_STATISTICS:
               AND (i.Status & 64)=0
                -- leave out system tables:
               AND OBJECTPROPERTY(i.id, 'IsMsShipped') = 0
		    SELECT CASE WHEN T.TABLE_NAME IS NULL THEN
                             'CREATE '
                             + CASE IS_UNIQUE WHEN 1 THEN 'UNIQUE ' ELSE '' END
                             + CASE IS_CLUSTERED WHEN 1 THEN 'CLUSTERED ' ELSE '' END
                             + 'INDEX [' + INDEX_NAME + '] ON [' + v.TABLE_NAME + ']'
                             + '(' + COLUMN_LIST + ');'
                         END
                        FROM #AllIndexes v
             LEFT OUTER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS T
                          ON T.CONSTRAINT_NAME = v.INDEX_NAME
                         AND T.TABLE_NAME = v.TABLE_NAME
                       WHERE INDEX_Name LIKE 'IX_%'
					      OR INDEX_NAME LIKE 'UIX_%'
						  OR INDEX_NAME LIKE 'CIX_%'
                    ORDER BY v.TABLE_NAME, IS_CLUSTERED DESC
END
GO
PRINT N'Creating [dbo].[aspdnsf_GenerateUpdatesForAllIndexes]...';

GO

CREATE PROC [dbo].[aspdnsf_GenerateUpdatesForAllIndexes]

AS
BEGIN

			SELECT TABLE_NAME = OBJECT_NAME(i.id)
				 , INDEX_NAME = i.name
				 , COLUMN_LIST = dbo.GetIndexColumns(OBJECT_NAME(i.id), i.id, i.indid)
				 , IS_CLUSTERED = INDEXPROPERTY(i.id, i.name, 'IsClustered')
				 , IS_UNIQUE = INDEXPROPERTY(i.id, i.name, 'IsUnique')
              INTO #AllIndexes
              FROM dbo.sysindexes i
        INNER JOIN dbo.sysfilegroups g
                ON i.groupid = g.groupid
             WHERE (i.indid BETWEEN 1 AND 254)
                -- leave out AUTO_STATISTICS:
               AND (i.Status & 64)=0
                -- leave out system tables:
               AND OBJECTPROPERTY(i.id, 'IsMsShipped') = 0
		    SELECT CASE WHEN T.TABLE_NAME IS NULL THEN
							 'IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[' + v.TABLE_NAME + ']'') AND name = N''' + INDEX_NAME + ''') CREATE '
                             + CASE IS_UNIQUE WHEN 1 THEN 'UNIQUE ' ELSE '' END
                             + CASE IS_CLUSTERED WHEN 1 THEN 'CLUSTERED ' ELSE '' END
                             + 'INDEX [' + INDEX_NAME + '] ON [' + v.TABLE_NAME + ']'
                             + '(' + COLUMN_LIST + ');'
                         END
                        FROM #AllIndexes v
             LEFT OUTER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS T
                          ON T.CONSTRAINT_NAME = v.INDEX_NAME
                         AND T.TABLE_NAME = v.TABLE_NAME
                       WHERE INDEX_Name LIKE 'IX_%'
					      OR INDEX_NAME LIKE 'UIX_%'
						  OR INDEX_NAME LIKE 'CIX_%'
                    ORDER BY v.TABLE_NAME, IS_CLUSTERED DESC
END
GO
PRINT N'Creating [dbo].[aspdnsf_Get404Suggestions]...';

GO

CREATE PROC [dbo].[aspdnsf_Get404Suggestions]
	@storeId INT = 0

AS
BEGIN
    SET NOCOUNT ON

	DECLARE @suggestionTypes VARCHAR(100) = (SELECT TOP 1 CASE ConfigValue WHEN '' THEN 'product, category, manufacturer, section, topic' ELSE ConfigValue END FROM [dbo].[AppConfig] WITH(NOLOCK) WHERE [Name] = '404.VisibleSuggestions' AND (StoreID=@storeId OR StoreID=0) ORDER BY StoreID desc)
	DECLARE @hideInventoryLevel INT = (SELECT TOP 1 ConfigValue FROM [dbo].[AppConfig] WITH(NOLOCK) WHERE [Name] = 'HideProductsWithLessThanThisInventoryLevel' AND (StoreID=@storeId OR StoreID=0) ORDER BY StoreID desc)

	DECLARE @filterProducts BIT = (SELECT ConfigValue FROM [dbo].[GlobalConfig] WITH(NOLOCK) WHERE [Name] = 'AllowProductFiltering')
	DECLARE @filterTopics BIT = (SELECT ConfigValue FROM [dbo].[GlobalConfig] WITH(NOLOCK) WHERE [Name] = 'AllowTopicFiltering')
	DECLARE @filterEntities BIT = (SELECT ConfigValue FROM [dbo].[GlobalConfig] WITH(NOLOCK) WHERE [Name] = 'AllowEntityFiltering')

	CREATE TABLE #UnfilteredEntities
	(
		Id INT NOT NULL,
		ObjectType VARCHAR(100) NOT NULL,
		Name NVARCHAR(400) NOT NULL,
		[Description] NVARCHAR(MAX)
	)

	--Products
	IF @suggestionTypes LIKE '%product%'
	BEGIN
		INSERT INTO #UnfilteredEntities(Id, ObjectType, Name, [Description])
		SELECT p.ProductID as id,
			'product', 
			p.Name, 
			p.[Description]
		FROM Product p WITH (NOLOCK)
			INNER JOIN ProductVariant pv ON p.ProductID = pv.ProductID AND pv.IsDefault = 1
			LEFT JOIN (SELECT VariantID, SUM(Quan) AS Inventory
						FROM Inventory
						GROUP BY VariantID) i on pv.VariantID = i.VariantID
			LEFT JOIN ProductStore ps ON p.ProductID = ps.ProductID AND (@filterProducts = 0 OR ps.StoreID = @storeId)
		WHERE p.Deleted = 0
			AND p.Published = 1
			AND pv.Deleted = 0
			AND pv.Published = 1
			AND (CASE p.TrackInventoryBySizeAndColor
					WHEN 1 THEN ISNULL(i.Inventory, 0)
					ELSE pv.Inventory
				END >= @hideInventoryLevel or @hideInventoryLevel = -1)
	END

	--Topics
	IF @suggestionTypes LIKE '%topic%'
	BEGIN
		INSERT INTO #UnfilteredEntities(Id, ObjectType, Name, [Description])
		SELECT t.TopicID as id,
			'topic', 
			t.Name, 
			t.Title
		FROM Topic t
		WHERE t.Published = 1
			AND t.ShowInSiteMap = 1
			AND (@filterTopics = 0 OR t.StoreID = @storeId)
	END

	--Categories
	IF @suggestionTypes LIKE '%category%'
	BEGIN
		INSERT INTO #UnfilteredEntities(Id, ObjectType, Name, [Description])
		SELECT c.CategoryID,
		'category', 
			c.Name,
			c.[Description]
		FROM Category c
		WHERE c.Published = 1
			AND c.Deleted = 0
			AND (@filterEntities = 0 OR (c.CategoryID IN (SELECT DISTINCT EntityID FROM EntityStore WHERE EntityType = 'category' AND StoreID = @storeId)))
	END

	--Manufacturers
	IF @suggestionTypes LIKE '%manufacturer%'
	BEGIN
		INSERT INTO #UnfilteredEntities(Id, ObjectType, Name, [Description])
		SELECT m.ManufacturerID,
		    'manufacturer', 
			m.Name,
			m.[Description]
		FROM Manufacturer m
		WHERE m.Published = 1
			AND m.Deleted = 0
			AND (@filterEntities = 0 OR (m.ManufacturerID IN (SELECT DISTINCT EntityID FROM EntityStore WHERE EntityType = 'manufacturer' AND StoreID = @storeId)))
	END

	--Manufacturers
	IF @suggestionTypes LIKE '%section%'
	BEGIN
		INSERT INTO #UnfilteredEntities(Id, ObjectType, Name, [Description])
		SELECT s.SectionID,
		'section', 
			s.Name,
			s.[Description]
		FROM Section s
		WHERE s.Published = 1
			AND s.Deleted = 0
			AND (@filterEntities = 0 OR (s.SectionID IN (SELECT DISTINCT EntityID FROM EntityStore WHERE EntityType = 'section' AND StoreID = @storeId)))
	END

	SELECT * FROM #UnfilteredEntities
END
GO
PRINT N'Creating [dbo].[aspdnsf_getAddressesByCustomer]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_getAddressesByCustomer]
(
	@CustomerID int
)
AS
BEGIN
SET NOCOUNT ON
	SELECT	[AddressID],
			[CustomerID],
			[NickName],
			[FirstName],
			[LastName],
			[Company],
			[Address1],
			[Address2],
			[Suite],
			[City],
			[State],
			[Zip],
			[Country],
			[ResidenceType],
			[Phone],
			[Email]
	FROM [Address]
	WHERE [CustomerID] = @CustomerID
		AND [Deleted] = 0
		AND Address1 NOT LIKE '%Hidden By Amazon%'
END
GO
PRINT N'Creating [dbo].[aspdnsf_getAffiliate]...';

GO



CREATE PROC dbo.aspdnsf_getAffiliate
    @AffiliateID int = null

AS
SET NOCOUNT ON


SELECT a.AffiliateID, AffiliateGUID, EMail, Password, Notes, IsOnline, FirstName, LastName, Name, Company, Address1, Address2, Suite, City, State, Zip, Country, Phone, WebSiteName,
WebSiteDescription, URL, DefaultSkinID, ParentAffiliateID, DisplayOrder, ExtensionData, SEName, SETitle, SEAltText, SEKeywords, SEDescription, Published, Wholesale, Deleted, a.CreatedOn, SaltKey, StoreID
FROM dbo.Affiliate a with (nolock) left join AffiliateStore b with (nolock) on a.AffiliateID = b.AffiliateID
WHERE a.AffiliateID = COALESCE(@AffiliateID, a.AffiliateID)
GO
PRINT N'Creating [dbo].[aspdnsf_getAffiliateByEmail]...';

GO



CREATE PROC dbo.aspdnsf_getAffiliateByEmail
    @AffiliateEmail nvarchar(100)

AS
SET NOCOUNT ON


SELECT a.AffiliateID, AffiliateGUID, EMail, Password, Notes, IsOnline, FirstName, LastName, Name, Company, Address1, Address2, Suite, City, State, Zip, Country, Phone, WebSiteName, WebSiteDescription, URL,
DefaultSkinID, ParentAffiliateID, DisplayOrder, ExtensionData, SEName, SETitle, SEAltText, SEKeywords, SEDescription, Published, Wholesale, Deleted, a.CreatedOn, SaltKey, StoreID
FROM dbo.Affiliate a with (nolock) left join AffiliateStore b with (nolock) on a.AffiliateID = b.AffiliateID
WHERE EMail = @AffiliateEmail
GO
PRINT N'Creating [dbo].[aspdnsf_getAffiliateList]...';

GO



CREATE PROCEDURE [dbo].[aspdnsf_getAffiliateList]
AS
BEGIN
	SET NOCOUNT ON
	SELECT AffiliateID, Name
	FROM Affiliate
	WHERE Deleted = 0 AND Published = 1
END
GO
PRINT N'Creating [dbo].[aspdnsf_getAppconfig]...';

GO



create proc dbo.aspdnsf_getAppconfig
    @AppConfigID int = null

AS
SET NOCOUNT ON

    SELECT StoreId, AppConfigID, AppConfigGUID, [Name], Description, ConfigValue, ValueType, AllowableValues, GroupName, SuperOnly, CreatedOn
    FROM dbo.Appconfig with (nolock)
    WHERE AppConfigID = COALESCE(@AppConfigID, AppConfigID)
    ORDER BY [Name]
GO
PRINT N'Creating [dbo].[aspdnsf_GetAvailablePromos]...';

GO
create proc [dbo].[aspdnsf_GetAvailablePromos]
    @productIdList	nvarchar(max),
	@StoreID		int = 0,
	@CustomerID		int = 0,
	@CustomerLevel	int = 0

AS
BEGIN
	declare @productIds table (ProductId int not null)
	insert into @productIds select distinct * from dbo.Split(@productIdList, ',')

	declare @FilterPromotions tinyint
	SET @FilterPromotions = (SELECT case ConfigValue WHEN 'true' THEN 1 ELSE 0 END FROM GlobalConfig WHERE Name='AllowPromotionFiltering')

	DECLARE @CustomerEmail varchar(max)
	SELECT @CustomerEmail = Email FROM Customer WHERE CustomerID = @CustomerID

	select
		DISTINCT ids.ProductId,
		p.CallToAction
	from
		Promotions p
			left join (SELECT PromotionRuleData.value('(/ArrayOfPromotionRuleBase/PromotionRuleBase/ExpirationDate/node())[1]', 'nvarchar(40)') AS ExpDate, Id
				FROM Promotions) AS e on e.Id = p.Id
			left join (SELECT PromotionRuleData.value('(/ArrayOfPromotionRuleBase/PromotionRuleBase/StartDate/node())[1]', 'nvarchar(40)') AS StartDate, Id
				FROM Promotions) AS s on s.Id = p.Id
			left join PromotionStore pt
				on p.Id = pt.PromotionID, @productIds ids
			left join ProductCategory pc
				on pc.ProductId = ids.ProductId
			left join ProductSection ps
				on ps.ProductId = ids.ProductId
			left join ProductManufacturer pm
				on pm.ProductId = ids.ProductId
	where
		(e.ExpDate IS NULL OR CONVERT(date, e.ExpDate) > GETDATE())
		and (s.StartDate IS NULL OR CONVERT(date, s.StartDate) < GETDATE())
		and p.Active = 1
		and p.AutoAssigned = 1
		and isnull(p.CallToAction, '') != ''
		and (@FilterPromotions = 0 OR pt.StoreID = @StoreID)
		and (
				-- ProductIdPromotionRule
				p.PromotionRuleData.exist('/ArrayOfPromotionRuleBase/PromotionRuleBase/ProductIds[int = sql:column("ids.ProductId")]') = 1

				-- CategoryPromotionRule
				or p.PromotionRuleData.exist('/ArrayOfPromotionRuleBase/PromotionRuleBase/CategoryIds[int = sql:column("pc.CategoryId")]') = 1

				-- SectionPromotionRule
				or p.PromotionRuleData.exist('/ArrayOfPromotionRuleBase/PromotionRuleBase/SectionIds[int = sql:column("ps.SectionId")]') = 1

				-- ManufacturerPromotionRule
				or p.PromotionRuleData.exist('/ArrayOfPromotionRuleBase/PromotionRuleBase/ManufacturerIds[int = sql:column("pm.ManufacturerId")]') = 1

				-- GiftProductPromotionDiscount
				or p.PromotionDiscountData.exist('/ArrayOfPromotionDiscountBase/PromotionDiscountBase/GiftProductIds[int = sql:column("ids.ProductId")]') = 1
			)
		-- Email Address rule
		and (
				p.PromotionRuleData.exist('/ArrayOfPromotionRuleBase/PromotionRuleBase/EmailAddresses') = 0
				or p.PromotionRuleData.exist('/ArrayOfPromotionRuleBase/PromotionRuleBase/EmailAddresses[string = sql:variable("@CustomerEmail")]') = 1
			)
		-- Customer Level rule
		and (
				p.PromotionRuleData.exist('/ArrayOfPromotionRuleBase/PromotionRuleBase/CustomerLevels') = 0
				or p.PromotionRuleData.exist('/ArrayOfPromotionRuleBase/PromotionRuleBase/CustomerLevels[int = sql:variable("@CustomerLevel")]') = 1
			)
	for xml path('Promotion')
END
GO
PRINT N'Creating [dbo].[aspdnsf_getBadWord]...';

GO


create proc [dbo].[aspdnsf_getBadWord]
    @BadWordID int   = null

AS
SET NOCOUNT ON
SELECT [BadWordID],
      [LocaleSetting],
      [Word],
      [CreatedOn]
FROM [dbo].[BadWord] with (nolock)
WHERE [BadWordID] = COALESCE(@BadWordID,[BadWordID])
ORDER BY BadWordID
GO
PRINT N'Creating [dbo].[aspdnsf_GetCartCategoryCountsByProduct]...';

GO


create proc dbo.aspdnsf_GetCartCategoryCountsByProduct
    @CustomerID int

AS
BEGIN
    SELECT pc.productid, pc.categoryid, sum(a.Quantity) CategoryQty
    FROM dbo.productcategory pc with (nolock)
        join
        (select pc1.categoryid, sum(Quantity) Quantity
         from dbo.shoppingcart sc with (nolock)
         join [dbo].productcategory pc1 with (nolock) on sc.productid = pc1.productid
         where sc.customerid = @CustomerID
         group by pc1.categoryid
        ) a on pc.categoryid = a.categoryid
        join (select distinct productid from dbo.shoppingcart with (nolock) where customerid = @CustomerID) b on pc.productid = b.productid
    GROUP BY pc.productid, pc.categoryid
    ORDER BY pc.productid, pc.categoryid
END
GO
PRINT N'Creating [dbo].[aspdnsf_getCountryTaxRate]...';

GO


create proc [dbo].[aspdnsf_getCountryTaxRate]
    @CountryID int = null,
    @TaxClassID int = null

AS
SET NOCOUNT ON


SELECT ctr.CountryTaxID, ctr.CountryID, ctr.TaxClassID, ctr.TaxRate, ctr.CreatedOn, t.Name TaxClass, c.Name Country
FROM dbo.CountryTaxRate ctr with (nolock) join dbo.TaxClass t with (nolock) on ctr.TaxClassID = t.TaxClassID join dbo.Country c on c.CountryID = ctr.CountryID
WHERE ctr.CountryID = COALESCE(@CountryID, ctr.CountryID) and ctr.TaxClassID = COALESCE(@TaxClassID, ctr.TaxClassID)
GO
PRINT N'Creating [dbo].[aspdnsf_getCountryTaxRateByID]...';

GO


create proc [dbo].[aspdnsf_getCountryTaxRateByID]
    @CountryTaxID int

AS
SET NOCOUNT ON


SELECT ctr.CountryTaxID, ctr.CountryID, ctr.TaxClassID, ctr.TaxRate, ctr.CreatedOn, t.Name TaxClass, c.Name Country
FROM dbo.CountryTaxRate ctr with (nolock) join dbo.TaxClass t with (nolock) on ctr.TaxClassID = t.TaxClassID join dbo.Country c on c.CountryID = ctr.CountryID
WHERE ctr.CountryTaxID = @CountryTaxID
GO
PRINT N'Creating [dbo].[aspdnsf_GetCustomerByEmail]...';

GO
CREATE PROC [dbo].[aspdnsf_GetCustomerByEmail]
    @Email nvarchar(100),
    @FilterCustomer bit,
    @StoreID int = 1,
    @AdminOnly bit = 0
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @CustomerSessionID int = -1, @LastActivity datetime = '1/1/1900'

    SELECT  @CustomerSessionID  = cs.CustomerSessionID, @LastActivity = cs.LastActivity
    FROM dbo.CustomerSession cs with (nolock)
		LEFT JOIN dbo.Customer c with (nolock) on cs.CustomerID = c.CustomerID
    WHERE c.Email = @Email
		and (@FilterCustomer = 0 or c.StoreID = @StoreID)
		and (@AdminOnly = 0 or c.IsAdmin > 0)

    SELECT top 1
            c.CustomerID, c.CustomerGUID, c.CustomerLevelID, c.RegisterDate, c.Email, c.Password, c.SaltKey, c.Gender,
            c.FirstName, c.LastName, c.Notes, c.SkinID, c.Phone, c.AffiliateID, c.Referrer, c.CouponCode, c.OkToEmail,
            IsAdmin&1 IsAdmin, sign(IsAdmin&2) IsSuperAdmin, c.BillingEqualsShipping, c.LastIPAddress,
            c.OrderNotes, c.RTShipRequest, c.RTShipResponse, c.OrderOptions, c.LocaleSetting,
            c.MicroPayBalance, c.RecurringShippingMethodID, c.RecurringShippingMethod, c.BillingAddressID, c.ShippingAddressID,
            c.ExtensionData, c.FinalizationData, c.Deleted, c.CreatedOn, c.Over13Checked, c.CurrencySetting,
            case when isnull(cl.CustomerLevelID, 0) > 0 and cl.LevelHasNoTax = 1 then 2 else c.VATSetting end VATSetting,
            c.VATRegistrationID, c.StoreCCInDB, c.IsRegistered, c.LockedUntil, c.AdminCanViewCC, c.PwdChanged, c.BadLoginCount,
            c.LastBadLogin, c.Active, c.PwdChangeRequired, c.SaltKey, isnull(cl.LevelDiscountPercent, 0) LevelDiscountPercent,
            isnull(cl.LevelDiscountsApplyToExtendedPrices, 0) LevelDiscountsApplyToExtendedPrices, c.RequestedPaymentMethod,
            @CustomerSessionID CustomerSessionID, @LastActivity LastActivity, c.StoreID, d.Name StoreName
    FROM dbo.Customer c with (nolock) left join dbo.CustomerLevel cl with (nolock) on c.CustomerLevelID = cl.CustomerLevelID
    left join Store d with (nolock) on c.StoreID = d.StoreID
    WHERE c.Deleted=0
		and c.Email = @Email
		and ((@filtercustomer = 0 or IsAdmin > 0) or c.StoreID = @StoreID)
		and (@AdminOnly = 0 or c.IsAdmin > 0)
    ORDER BY c.IsRegistered desc, c.CreatedOn desc
END
GO
PRINT N'Creating [dbo].[aspdnsf_GetCustomerByGUID]...';

GO
create proc [dbo].[aspdnsf_GetCustomerByGUID]
    @CustomerGUID uniqueidentifier

AS
BEGIN
    SET NOCOUNT ON

    DECLARE @CustomerSessionID int = -1, @LastActivity datetime = '1/1/1900'

    SELECT  @CustomerSessionID  = cs.CustomerSessionID , @LastActivity = cs.LastActivity
    FROM dbo.CustomerSession cs with (nolock)
		LEFT JOIN dbo.Customer c with (nolock) on cs.CustomerID = c.CustomerID
              WHERE c.CustomerGUID = @CustomerGUID

    SELECT top 1
            c.CustomerID, c.CustomerGUID, c.CustomerLevelID, c.RegisterDate, c.Email, c.Password, c.SaltKey, c.Gender,
            c.FirstName, c.LastName, c.Notes, c.SkinID, c.Phone, c.AffiliateID, c.Referrer, c.CouponCode, c.OkToEmail,
            IsAdmin&1 IsAdmin, sign(IsAdmin&2) IsSuperAdmin, c.BillingEqualsShipping, c.LastIPAddress,
            c.OrderNotes, c.RTShipRequest, c.RTShipResponse, c.OrderOptions, c.LocaleSetting,
            c.MicroPayBalance, c.RecurringShippingMethodID, c.RecurringShippingMethod, c.BillingAddressID, c.ShippingAddressID,
            c.ExtensionData, c.FinalizationData, c.Deleted, c.CreatedOn, c.Over13Checked, c.CurrencySetting,
            case when isnull(cl.CustomerLevelID, 0) > 0 and cl.LevelHasNoTax = 1 then 2 else c.VATSetting end VATSetting,
            c.VATRegistrationID, c.StoreCCInDB, c.IsRegistered, c.LockedUntil, c.AdminCanViewCC, c.PwdChanged, c.BadLoginCount,
            c.LastBadLogin, c.Active, c.PwdChangeRequired, c.SaltKey, isnull(cl.LevelDiscountPercent, 0) LevelDiscountPercent,
            isnull(cl.LevelDiscountsApplyToExtendedPrices, 0) LevelDiscountsApplyToExtendedPrices, c.RequestedPaymentMethod,
            @CustomerSessionID CustomerSessionID, @LastActivity LastActivity, c.StoreID, d.Name StoreName
    FROM dbo.Customer c with (nolock) left join dbo.CustomerLevel cl with (nolock) on c.CustomerLevelID = cl.CustomerLevelID
    left join Store d with (nolock) on c.StoreID = d.StoreID
    WHERE c.Deleted=0 and c.CustomerGUID = @CustomerGUID
END
GO
PRINT N'Creating [dbo].[aspdnsf_GetCustomerByID]...';

GO
create proc [dbo].[aspdnsf_GetCustomerByID]
    @CustomerID int

AS
BEGIN
    SET NOCOUNT ON

    DECLARE @CustomerSessionID int = -1, @LastActivity datetime = '1/1/1900'

    SELECT  @CustomerSessionID  = cs.CustomerSessionID , @LastActivity = cs.LastActivity
    FROM dbo.CustomerSession cs with (nolock)
    WHERE cs.CustomerID = @CustomerID

    SELECT top 1
            c.CustomerID, c.CustomerGUID, c.CustomerLevelID, c.RegisterDate, c.Email, c.Password, c.SaltKey, c.Gender,
            c.FirstName, c.LastName, c.Notes, c.SkinID, c.Phone, c.AffiliateID, c.Referrer, c.CouponCode, c.OkToEmail,
            IsAdmin&1 IsAdmin, sign(IsAdmin&2) IsSuperAdmin, c.BillingEqualsShipping, c.LastIPAddress,
            c.OrderNotes, c.RTShipRequest, c.RTShipResponse, c.OrderOptions, c.LocaleSetting,
            c.MicroPayBalance, c.RecurringShippingMethodID, c.RecurringShippingMethod, c.BillingAddressID, c.ShippingAddressID,
            c.ExtensionData, c.FinalizationData, c.Deleted, c.CreatedOn, c.Over13Checked, c.CurrencySetting,
            case when isnull(cl.CustomerLevelID, 0) > 0 and cl.LevelHasNoTax = 1 then 2 else c.VATSetting end VATSetting,
            c.VATRegistrationID, c.StoreCCInDB, c.IsRegistered, c.LockedUntil, c.AdminCanViewCC, c.PwdChanged, c.BadLoginCount,
            c.LastBadLogin, c.Active, c.PwdChangeRequired, c.SaltKey, isnull(cl.LevelDiscountPercent, 0) LevelDiscountPercent,
            isnull(cl.LevelDiscountsApplyToExtendedPrices, 0) LevelDiscountsApplyToExtendedPrices, c.RequestedPaymentMethod,
            @CustomerSessionID CustomerSessionID,
            @LastActivity LastActivity, c.StoreID, d.Name StoreName
    FROM dbo.Customer c with (nolock) left join dbo.CustomerLevel cl with (nolock) on c.CustomerLevelID = cl.CustomerLevelID
    left join Store d with (nolock) on c.StoreID = d.StoreID
    WHERE c.Deleted=0 and c.CustomerID = @CustomerID
END
GO
PRINT N'Creating [dbo].[aspdnsf_getCustomerLevels]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_getCustomerLevels]
AS
BEGIN
SET NOCOUNT ON
	SELECT Name, CustomerLevelID
	FROM CustomerLevel
	WHERE Deleted = 0
END
GO
PRINT N'Creating [dbo].[aspdnsf_GetCustomersRelatedProducts]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_GetCustomersRelatedProducts]
	@CustomerViewID		NVARCHAR(50),
	@ProductID			INT,
	@CustomerLevelID	INT,
	@InvFilter			INT,
	@affiliateID		INT,
	@storeID			INT = 1,
	@filterProduct		BIT = 0

AS
SET NOCOUNT ON

DECLARE
	   @custlevelcount INT,
	   @CustomerLevelFilteringIsAscending BIT = 0,
	   @FilterProductsByCustomerLevel BIT,
	   @relatedprods VARCHAR(8000),
	   @DynamicProductsEnabled VARCHAR(10),
	   @ProductsDisplayed INT,
	   @FilterProductsByAffiliate BIT,
	   @affiliatecount INT,
	   @AffiliateExists INT

--Configs
SET @FilterProductsByCustomerLevel = (SELECT TOP 1 case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'FilterProductsByCustomerLevel' AND (StoreID=@storeID OR StoreID=0) ORDER BY StoreID desc)
SET @CustomerLevelFilteringIsAscending = (SELECT TOP 1 case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'FilterByCustomerLevelIsAscending' AND (StoreID=@storeID OR StoreID=0) ORDER BY StoreID desc)
SET @FilterProductsByAffiliate = (SELECT TOP 1 case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'FilterProductsByAffiliate' AND (StoreID=@storeID OR StoreID=0) ORDER BY StoreID desc)
SET @DynamicProductsEnabled = (SELECT TOP 1 case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'DynamicRelatedProducts.Enabled' AND (StoreID=@storeID OR StoreID=0) ORDER BY StoreID desc)
SET @ProductsDisplayed = (SELECT TOP 1 CAST(ConfigValue AS INT) FROM dbo.AppConfig with (nolock) WHERE [Name] = 'RelatedProducts.NumberDisplayed' AND (StoreID=@storeID OR StoreID=0) ORDER BY StoreID desc)

--Counts
SELECT @custlevelcount = COUNT(*) FROM ProductCustomerLevel
SELECT @affiliatecount = COUNT(*) FROM dbo.ProductAffiliate WITH (NOLOCK) WHERE ProductID = @ProductID
SELECT @AffiliateExists = CASE WHEN AffiliateID = @affiliateID THEN 1 ELSE 0 END FROM dbo.ProductAffiliate WITH (NOLOCK) WHERE ProductID = @ProductID

--Temp table for fixed related products
select @relatedprods = replace(cast(relatedproducts as varchar(8000)), ' ', '') from dbo.product with (NOLOCK) where productid = @productid
DECLARE @RelatedProductsTable table (ProductId int not null)
insert into @RelatedProductsTable select distinct * from dbo.Split(@relatedprods, ',')

IF(@DynamicProductsEnabled = 1 and @ProductsDisplayed > 0)
BEGIN
	SELECT TOP (@ProductsDisplayed)
	           tp.ProductID
			 , tp.ProductGUID
			 , tp.ImageFilenameOverride
			 , tp.SKU
			 , ISNULL(PRODUCTVARIANT.SkuSuffix, '') AS SkuSuffix
			 , ISNULL(PRODUCTVARIANT.ManufacturerPartNumber, '') AS VariantManufacturerPartNumber
			 , ISNULL(tp.ManufacturerPartNumber, '') AS ManufacturerPartNumber
		     , ISNULL(PRODUCTVARIANT.Dimensions, '') AS Dimensions
			 , PRODUCTVARIANT.Weight
			 , ISNULL(PRODUCTVARIANT.GTIN, '') AS GTIN
			 , PRODUCTVARIANT.VariantID
			 , PRODUCTVARIANT.Condition
			 , tp.SEAltText
			 , tp.Name
			 , tp.Description
			 , ProductManufacturer.ManufacturerID AS ProductManufacturerId
			 , Manufacturer.Name AS ProductManufacturerName
			 , Manufacturer.SEName AS ProductManufacturerSEName
		FROM Product tp WITH (NOLOCK)
		JOIN (SELECT p.ProductID
				   , p.ProductGUID
				   , p.ImageFilenameOverride
				   , p.SKU
				   , p.SEAltText
				   , p.Name
				   , p.Description
				FROM dbo.product p WITH (NOLOCK)
				JOIN @RelatedProductsTable rp ON p.productid = rp.ProductId
		   LEFT JOIN dbo.productcustomerlevel pcl WITH (NOLOCK) ON p.productid = pcl.productid and @FilterProductsByCustomerLevel = 1
				JOIN (SELECT p.ProductID
						FROM dbo.product p WITH (NOLOCK)
						JOIN @RelatedProductsTable rp on p.productid = rp.ProductId
						JOIN (SELECT ProductID
								   , SUM(Inventory) Inventory
								FROM dbo.productvariant WITH (NOLOCK) GROUP BY ProductID) pv ON p.ProductID = pv.ProductID
						   LEFT JOIN (SELECT pv1.ProductID
										   , SUM(quan) inventory
										FROM dbo.inventory i1 WITH (NOLOCK)
										JOIN dbo.productvariant pv1 WITH (NOLOCK) ON pv1.variantid = i1.variantid
										JOIN @RelatedProductsTable rp1 ON pv1.productid = rp1.ProductID GROUP BY pv1.productid) i ON i.productid = p.productid
								  WHERE CASE p.TrackInventoryBySizeAndColor WHEN 1 THEN ISNULL(i.inventory, 0) ELSE pv.inventory END >= @InvFilter
					 ) tp on p.productid = tp.productid
			   WHERE published = 1
				 AND deleted = 0
				 AND p.productid != @productid
				 AND CASE
					 WHEN @FilterProductsByCustomerLevel = 0 THEN 1
					 WHEN @CustomerLevelFilteringIsAscending = 1 AND pcl.CustomerLevelID <= @CustomerLevelID OR pcl.CustomerLevelID IS NULL THEN 1
					 WHEN @CustomerLevelID=0 AND pcl.CustomerLevelID IS NULL THEN 1
					 WHEN @CustomerLevelID IS NULL OR @custlevelcount = 0 THEN 1
					 WHEN pcl.CustomerLevelID = @CustomerLevelID OR pcl.CustomerLevelID IS NULL THEN 1
					 ELSE 0
					 END = 1
	UNION ALL
	   SELECT pr.ProductID
			, pr.ProductGUID
			, pr.ImageFilenameOverride
			, pr.SKU
			, pr.SEAltText
			, pr.Name
			, pr.Description
		 FROM Product pr WITH (NOLOCK)
		WHERE pr.ProductID IN (
		SELECT TOP 100 PERCENT p.ProductID
		  FROM Product p WITH (NOLOCK)
		  JOIN (SELECT ProductID
				  FROM ProductView WITH (NOLOCK) WHERE CustomerViewID
					IN (SELECT CustomerViewID
						  FROM ProductView WITH (NOLOCK)
						 WHERE ProductID = @ProductID
						   AND CustomerViewID <> @CustomerViewID
					   )
				   AND ProductID <> @ProductID
				   AND ProductID NOT
					IN (SELECT p.ProductID
						  FROM product p WITH (NOLOCK)
						  JOIN @RelatedProductsTable rp ON p.productid = rp.ProductId
					  GROUP BY p.ProductID
					   )
				) a ON p.ProductID = a.ProductID
	LEFT JOIN dbo.productcustomerlevel pcl WITH (NOLOCK) ON p.productid = pcl.productid and @FilterProductsByCustomerLevel = 1
	LEFT JOIN dbo.ProductAffiliate pa WITH (NOLOCK) ON p.ProductID = pa.ProductID
		WHERE Published = 1 AND Deleted = 0
		 AND CASE
			 WHEN @FilterProductsByCustomerLevel = 0 THEN 1
			 WHEN @CustomerLevelFilteringIsAscending = 1 AND pcl.CustomerLevelID <= @CustomerLevelID OR pcl.CustomerLevelID IS NULL THEN 1
			 WHEN @CustomerLevelID=0 AND pcl.CustomerLevelID IS NULL THEN 1
			 WHEN @CustomerLevelID IS NULL OR @custlevelcount = 0 THEN 1
			 WHEN pcl.CustomerLevelID = @CustomerLevelID OR pcl.CustomerLevelID IS NULL THEN 1
			 ELSE 0
			  END = 1
		AND (pa.AffiliateID = @affiliateID OR pa.AffiliateID IS NULL OR @affiliatecount = 0 OR @FilterProductsByAffiliate = 0)
	GROUP BY p.ProductID
	ORDER BY COUNT(*) DESC
		)
	  )prd ON tp.ProductID = prd.ProductID
	 LEFT JOIN dbo.ProductManufacturer WITH (NOLOCK) ON tp.ProductID = ProductManufacturer.ProductID
	 LEFT JOIN dbo.Manufacturer WITH (NOLOCK) ON ProductManufacturer.ManufacturerID = Manufacturer.ManufacturerID
	      JOIN PRODUCTVARIANT WITH (NOLOCK) ON PRODUCTVARIANT.productid = CAST(tp.ProductID AS INT) AND PRODUCTVARIANT.isdefault = 1 AND PRODUCTVARIANT.Published = 1 AND PRODUCTVARIANT.Deleted = 0
	INNER JOIN (SELECT DISTINCT a.ProductID
				  FROM Product a WITH (NOLOCK)
			 LEFT JOIN ProductStore b WITH (NOLOCK) ON a.ProductID = b.ProductID
				 WHERE (@filterProduct = 0 OR StoreID = @storeID)) ps ON tp.ProductID = ps.ProductID
END

IF(@DynamicProductsEnabled = 0 and @ProductsDisplayed > 0)
BEGIN
	select TOP (@ProductsDisplayed)
	           p.ProductID
			 , p.ProductGUID
			 , p.ImageFilenameOverride
			 , p.SKU
			 , ISNULL(PRODUCTVARIANT.SkuSuffix, '') AS SkuSuffix
			 , ISNULL(PRODUCTVARIANT.ManufacturerPartNumber, '') AS VariantManufacturerPartNumber
			 , ISNULL(p.ManufacturerPartNumber, '') AS ManufacturerPartNumber
		     , ISNULL(PRODUCTVARIANT.Dimensions, '') AS Dimensions
			 , PRODUCTVARIANT.Weight
			 , ISNULL(PRODUCTVARIANT.GTIN, '') AS GTIN
			 , PRODUCTVARIANT.VariantID
			 , PRODUCTVARIANT.Condition
			 , p.SEAltText
			 , p.Name
			 , p.Description
			 , ProductManufacturer.ManufacturerID AS ProductManufacturerId
			 , Manufacturer.Name AS ProductManufacturerName
			 , Manufacturer.SEName AS ProductManufacturerSEName
		  FROM dbo.product p WITH (NOLOCK)
	 LEFT JOIN dbo.ProductManufacturer WITH (NOLOCK) ON p.ProductID = ProductManufacturer.ProductID
	 LEFT JOIN dbo.Manufacturer WITH (NOLOCK) ON ProductManufacturer.ManufacturerID = Manufacturer.ManufacturerID
		  JOIN @RelatedProductsTable rp ON p.productid = rp.ProductId
		  JOIN PRODUCTVARIANT WITH (NOLOCK) ON PRODUCTVARIANT.productid = rp.ProductId AND PRODUCTVARIANT.isdefault = 1 AND PRODUCTVARIANT.Published = 1 AND PRODUCTVARIANT.Deleted = 0
	 LEFT JOIN dbo.productcustomerlevel pcl WITH (NOLOCK) ON p.productid = pcl.productid AND @FilterProductsByCustomerLevel = 1
		  JOIN (SELECT p.ProductID
				  FROM dbo.product p WITH (NOLOCK)
				  JOIN @RelatedProductsTable rp on p.productid = rp.ProductId
				  JOIN (SELECT ProductID
							 , SUM(Inventory) Inventory
						  FROM dbo.productvariant WITH (NOLOCK)
					  GROUP BY ProductID) pv ON p.ProductID = pv.ProductID
					 LEFT JOIN (SELECT pv1.ProductID
									 , SUM(quan) inventory
								  FROM dbo.inventory i1 WITH (NOLOCK)
								  JOIN dbo.productvariant pv1 WITH (NOLOCK) ON pv1.variantid = i1.variantid
								  JOIN @RelatedProductsTable rp1 ON pv1.productid = rp1.ProductId
							  GROUP BY pv1.productid) i ON i.productid = p.productid
								 WHERE CASE p.TrackInventoryBySizeAndColor WHEN 1 THEN ISNULL(i.inventory, 0) ELSE pv.inventory END >= @InvFilter
								) tp ON p.productid = tp.productid
					INNER JOIN (SELECT DISTINCT a.ProductID
								  FROM Product a WITH (NOLOCK)
							 LEFT JOIN ProductStore b WITH (NOLOCK) ON a.ProductID = b.ProductID
								 WHERE (@filterProduct = 0 OR StoreID = @storeID)
								) ps ON p.ProductID = ps.ProductID
						 WHERE p.published = 1 and p.deleted = 0 and p.productid != @productid
						   AND CASE
							   WHEN @FilterProductsByCustomerLevel = 0 THEN 1
							   WHEN @CustomerLevelFilteringIsAscending = 1 AND pcl.CustomerLevelID <= @CustomerLevelID OR pcl.CustomerLevelID IS NULL THEN 1
							   WHEN @CustomerLevelID=0 AND pcl.CustomerLevelID IS NULL THEN 1
							   WHEN @CustomerLevelID IS NULL OR @custlevelcount = 0 THEN 1
							   WHEN pcl.CustomerLevelID = @CustomerLevelID OR pcl.CustomerLevelID IS NULL THEN 1
							   else 0
								end = 1
END
GO
PRINT N'Creating [dbo].[aspdnsf_GetEntityEntries]...';

GO



CREATE PROC [dbo].[aspdnsf_GetEntityEntries]
	@EntityType VARCHAR(30),
	@StoreID INT = NULL,
	@NameLike Varchar(30) = NULL

AS

SELECT ID, EntityType, ParentID, GUID, [Name], dbo.GetStoreMap(@StoreID, @EntityType, ID) AS Mapped
FROM MappedObjects WHERE EntityType = @EntityType AND ([Name] LIKE @NameLike OR @NameLike IS NULL)
GO
PRINT N'Creating [dbo].[aspdnsf_GetEntityMenu]...';

GO



CREATE PROCEDURE [dbo].[aspdnsf_GetEntityMenu]
	@EntityType			int,
		-- 0 = Product
		-- 1 = ProductVariant
		-- 2 = Category
		-- 3 = Section/Department
		-- 4 = Manufacturer
		-- 5 = Distributor
		-- 6 = Genre
		-- 7 = Vector
	@ParentID			int =	0,
	@ParentEntityType	int =	0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- PRODUCTS
	IF @EntityType = 0 BEGIN
		DECLARE @ProductEntity table (ProductID int, EntityID int)

		-- Build a temporary table to hold the mappings
		IF @ParentEntityType = 2 BEGIN
			INSERT @ProductEntity
			SELECT ProductID, CategoryID FROM ProductCategory
				WHERE CategoryID = @ParentID
		END

		IF @ParentEntityType = 3 BEGIN
			INSERT @ProductEntity
				SELECT ProductID, SectionID FROM ProductSection
					WHERE SectionID = @ParentID

		END

		IF @ParentEntityType = 4 BEGIN
			INSERT @ProductEntity
				SELECT ProductID, ManufacturerID FROM ProductManufacturer
					WHERE ManufacturerID = @ParentID
		END

		IF @ParentEntityType = 5 BEGIN
			INSERT @ProductEntity
				SELECT ProductID, DistributorID FROM ProductDistributor
					WHERE DistributorID = @ParentID
		END

		IF @ParentEntityType = 6 BEGIN
			INSERT @ProductEntity
				SELECT ProductID, GenreID FROM ProductGenre
					WHERE GenreID = @ParentID
		END

		IF @ParentEntityType = 7 BEGIN
			INSERT @ProductEntity
				SELECT ProductID, VectorID FROM ProductVector
					WHERE VectorID = @ParentID
		END
		-- End build temp table

		-- Select the product info
		SELECT PE.ProductID as EntityID, P.Name as EntityName, P.Published
			FROM @ProductEntity PE
			JOIN Product P on PE.ProductID = P.ProductID
			ORDER BY Name, Published
	END

	-- PRODUCT VARIANTS
	IF @EntityType = 1 BEGIN
		SELECT Name as EntityName, VariantID as EntityID, Published
			FROM ProductVariant
			WHERE ProductID = @ParentID
			ORDER BY DisplayOrder, Name, Published
	END

	-- CATEGORIES
	IF @EntityType = 2 BEGIN
		SELECT Name as EntityName, CategoryID as EntityID, Published
			FROM Category
			WHERE ParentCategoryID = @ParentID
			ORDER BY DisplayOrder, Name, Published
	END

	-- DEPARTMENTS
	IF @EntityType = 3 BEGIN
		SELECT Name as EntityName, SectionID as EntityID, Published
			FROM Section
			WHERE ParentSectionID = @ParentID
			ORDER BY DisplayOrder, Name, Published
	END

	-- MANUFACTURERS
	IF @EntityType = 4 BEGIN
		SELECT Name as EntityName, ManufacturerID as EntityID, Published
			FROM Manufacturer
			WHERE ParentManufacturerID = @ParentID
			ORDER BY DisplayOrder, Name, Published
	END

	-- DISTRIBUTORS
	IF @EntityType = 5 BEGIN
		SELECT Name as EntityName, DistributorID as EntityID, Published
			FROM Distributor
			WHERE ParentDistributorID = @ParentID
			ORDER BY DisplayOrder, Name, Published
	END

	-- GENRES
	IF @EntityType = 6 BEGIN
		SELECT Name as EntityName, GenreID as EntityID, Published
			FROM Genre
			WHERE ParentGenreID = @ParentID
			ORDER BY DisplayOrder, Name, Published
	END

	-- VECTORS
	IF @EntityType = 7 BEGIN
		SELECT Name as EntityName, VectorID as EntityID, Published
			FROM Vector
			WHERE ParentVectorID = @ParentID
			ORDER BY DisplayOrder, Name, Published
	END

END
GO
PRINT N'Creating [dbo].[aspdnsf_GetEntityTree]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_GetEntityTree]
	@entity nvarchar(30),
	@entityid int,
	@storeid int,
	@filterentity bit

AS
BEGIN
SET NOCOUNT ON

	SELECT	DISTINCT pe.EntityID as ID,
			pe.Name as [Name],
			pe.ParentEntityID as ParentID
	FROM EntityMaster pe WITH (NOLOCK)
	INNER JOIN EntityMaster te WITH (NOLOCK) on te.EntityID = @entityid and te.EntityType = @entity and pe.EntityType = @entity
	left join (select EntityID from EntityStore with (nolock) WHERE (0 = 0 or StoreID = 1)) et on pe.EntityID = et.EntityID
	inner join (select distinct a.EntityID from EntityMaster a with (nolock) left join EntityStore b with (nolock) on a.EntityID = b.EntityID WHERE (@filterentity = 0 or StoreID = @storeid)) et1 on pe.EntityID = et1.EntityID
	WHERE pe.EntityID = te.ParentEntityID

	SELECT	DISTINCT se.EntityID as ID,
			se.Name as [Name],
			se.ParentEntityID as ParentID, se.DisplayOrder
	FROM EntityMaster se WITH (NOLOCK)
	inner join EntityMaster te WITH (NOLOCK) on te.EntityID = @entityid and te.EntityType = @entity and se.EntityType = @entity
	inner join (select distinct a.EntityID from EntityMaster a with (nolock) left join EntityStore b with (nolock) on a.EntityID = b.EntityID WHERE (@filterentity = 0 or StoreID = @storeid)) stre on se.EntityID = stre.EntityID
	WHERE se.ParentEntityID = te.ParentEntityID
	order by se.DisplayOrder, se.name asc
END
GO
PRINT N'Creating [dbo].[aspdnsf_getEventHandler]...';

GO


create proc [dbo].[aspdnsf_getEventHandler]
    @EventID int = null

AS
SET NOCOUNT ON

    SELECT EventID, [EventName], CalloutURL, XMLPackage, Active, Debug
    FROM dbo.EventHandler with (nolock)
    WHERE EventID = COALESCE(@EventID, EventID)
    ORDER BY [EventName]
GO
PRINT N'Creating [dbo].[aspdnsf_getFailedTransactionCount]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_getFailedTransactionCount]
(
	@CustomerID int
)
AS
BEGIN
SET NOCOUNT ON
	SELECT COUNT(*) AS N
	FROM FailedTransaction
	WHERE CustomerID = @CustomerID
END
GO
PRINT N'Creating [dbo].[aspdnsf_GetFeaturedProducts]...';

GO

create procedure [dbo].[aspdnsf_GetFeaturedProducts](
	@NumHomePageFeaturedProducts	int,
	@CustomerLevelID				int,
	@InventoryFilter				int = 0,
	@StoreID						int = 1,
	@FilterProduct					bit = 0 )
as begin
	set nocount on

	select top (@NumHomePageFeaturedProducts)
		p.ProductID,
		p.ImageFilenameOverride,
		p.SKU,
		p.SEName,
		p.Name,
		p.Description,
		p.TaxClassID,
		pv.VariantID,
		p.HidePriceUntilCart,
		pv.name VariantName,
		pv.Price,
		pv.Description VariantDescription,
		isnull(pv.SalePrice, 0) SalePrice,
		isnull(SkuSuffix, '') SkuSuffix,
		pv.Dimensions,
		pv.Weight,
		isnull(pv.Points, 0) Points,
		pv.Inventory,
		pv.ImageFilenameOverride VariantImageFilenameOverride,
		pv.isdefault,
		pv.CustomerEntersPrice,
		isnull(pv.colors, '') Colors,
		isnull(pv.sizes, '') Sizes,
		sp.name SalesPromptName,
		case
			when pcl.productid is null then 0
			else isnull(e.Price, 0)
		end ExtendedPrice,
		p.SEAltText
	from
		Product p with (nolock)
		inner join ProductVariant pv with (nolock) on pv.ProductID = p.ProductID
		join dbo.SalesPrompt sp with (nolock) on p.SalesPromptID = sp.SalesPromptID
		left join dbo.ExtendedPrice e  with (nolock) on pv.VariantID=e.VariantID and e.CustomerLevelID = @CustomerLevelID
		left join dbo.ProductCustomerLevel pcl with (nolock) on p.ProductID = pcl.ProductID and pcl.CustomerLevelID = @CustomerLevelID
		left join (select VariantID, sum(quan) quan from dbo.Inventory with (nolock) group by VariantID) i  on pv.VariantID = i.VariantID
		left join ProductStore ps with (nolock) on ps.ProductID = p.ProductID and ps.StoreID = @StoreID and @FilterProduct = 1
	where
		p.IsFeatured=1
		and p.Deleted=0
		and p.Published = 1
		and pv.IsDefault = 1
		and (
			(case p.TrackInventoryBySizeAndColor
				when 1 then isnull(i.quan, 0)
				else pv.inventory
			end >= @InventoryFilter)
			or @InventoryFilter = -1 )
		and (@FilterProduct = 0 or ps.ProductID is not null)
	order by
		newid()
end
GO
PRINT N'Creating [dbo].[aspdnsf_GetFeed]...';

GO


CREATE PROC [dbo].[aspdnsf_GetFeed]
    @FeedID int = null

AS
BEGIN
SET NOCOUNT ON

SELECT FeedID, FeedGUID, a.StoreID, b.Name as StoreName, a.Name, DisplayOrder, XmlPackage, CanAutoFTP, FTPUsername, FTPPassword, FTPServer, FTPPort, FTPFilename, isnull(ExtensionData, '') ExtensionData, a.CreatedOn
FROM dbo.Feed a with (nolock) left join Store b with (nolock) on a.StoreID = b.StoreID
WHERE FeedID = COALESCE(@FeedID, FeedID) order by a.StoreID ASC

END
GO
PRINT N'Creating [dbo].[aspdnsf_getGiftCardUsage]...';

GO


create proc [dbo].[aspdnsf_getGiftCardUsage]
    @GiftCardUsageID int

AS
SET NOCOUNT ON


SELECT GiftCardUsageID, GiftCardUsageGUID, GiftCardID, UsageTypeID, UsedByCustomerID, OrderNumber, Amount, ExtensionData, CreatedOn
FROM dbo.GiftCardUsage with (nolock)
WHERE GiftCardUsageID = COALESCE(@GiftCardUsageID, GiftCardUsageID)
GO
PRINT N'Creating [dbo].[aspdnsf_getGiftCardUsageByGiftCard]...';

GO


create proc [dbo].[aspdnsf_getGiftCardUsageByGiftCard]
    @GiftCardID int

AS
SET NOCOUNT ON


SELECT GiftCardUsageID, GiftCardUsageGUID, GiftCardID, UsageTypeID, UsedByCustomerID, OrderNumber, Amount, ExtensionData, CreatedOn
FROM dbo.GiftCardUsage with (nolock)
WHERE GiftCardID = @GiftCardID
GO
PRINT N'Creating [dbo].[aspdnsf_getIPIsRestricted]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_getIPIsRestricted]
(
	@IPAddress nvarchar(25)
)
AS
BEGIN
SET NOCOUNT ON
	SELECT COUNT(*) AS N FROM RestrictedIP
	WHERE IPAddress = @IPAddress
END
GO
PRINT N'Creating [dbo].[aspdnsf_getKitItems]...';

GO



CREATE PROCEDURE [dbo].[aspdnsf_getKitItems] (
	@ProductID int,
    @CartRecID int,
	@CustomerID int)

AS
BEGIN
	SET NOCOUNT ON
	SELECT
			p.[Name]		 AS ProductName,
			ki.KitItemID,
			kg.KitGroupID,
			kg.ProductID,
			ki.[Name]        AS ItemName,
			ki.[Description] AS ItemDescription,
			ki.PriceDelta    AS ItemPriceDelta,
			ki.WeightDelta   AS ItemWeightDelta,
			ki.IsDefault,
			ki.DisplayOrder,
			ki.InventoryVariantID,
			ki.InventoryQuantityDelta,
			ki.InventoryVariantColor,
			ki.InventoryVariantSize,
			CAST( (CASE WHEN ki.IsDefault = 1 THEN 1 ELSE 0 END ) AS BIT) AS IsSelected,
			CASE	WHEN   kc.KitItemID IS NOT NULL THEN kc.TextOption
					ELSE ''
			END AS TextOption,
			kg.[Name]		 AS GroupName,
			kg.[Description] AS GroupDescription,
			kg.Summary AS GroupSummary,
			kg.DisplayOrder	 AS GroupDisplayOrder,
			kg.IsRequired,
			kg.IsReadOnly,
			kgt.KitGroupTypeID AS SelectionControl
    FROM KitItem      ki  with (nolock)
    JOIN KitGroup     kg  with (nolock) ON kg.KitGroupID=ki.KitGroupID
    JOIN KitGroupType kgt with (nolock) ON kgt.KitGroupTypeID=kg.KitGroupTypeID
	JOIN Product	  p   with (nolock) ON p.IsAKit = 1 AND kg.ProductId = p.ProductId
    LEFT JOIN KitCart kc  with (nolock) ON ( kc.KitItemID = ki.KitItemID AND kc.KitGroupID = ki.KitGroupID
                                                  AND kc.ProductID = kg.ProductID
                                                  AND kc.CustomerID = @CustomerID
                                                  AND kc.ShoppingCartrecID = @CartRecID AND kc.ShoppingCartrecID <> 0)
    WHERE	p.ProductID=@ProductID
    ORDER BY kg.DisplayOrder ASC, ki.DisplayOrder ASC, ki.[Name]

END
GO
PRINT N'Creating [dbo].[aspdnsf_getLocales]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_getLocales]
AS
BEGIN
	SELECT LocaleSettingID, Name
	FROM LocaleSetting
END
GO
PRINT N'Creating [dbo].[aspdnsf_GetMappedObject]...';

GO


create procedure [dbo].[aspdnsf_GetMappedObject](
	@StoreId int,
	@EntityType nvarchar(30),
	@EntityID int)
as
begin

	set nocount on;

	select	ov.EntityType,
			ov.[ID],
			ov.[Name],
			dbo.GetStoreMap(@StoreId, ov.EntityType, ov.ID) as Mapped
	from ObjectView ov
	where	ov.EntityType = @EntityType and
			ov.[ID] = @EntityID

end
GO
PRINT N'Creating [dbo].[aspdnsf_GetMappedObjects]...';

GO

CREATE procedure [dbo].[aspdnsf_GetMappedObjects](
	@StoreId int,
	@EntityType nvarchar(30),
	@SearchFilter nvarchar(30) = null,
	@pageSize int = null,
	@page int = null,
	@IsLegacyCacheMechanism bit = 1.
)
as
begin

	-- In an effort to elliminate the insanly slow load time of the store entity caching mechanism, the default returns of this stored procedure returns bunk data.
	-- In admin, the entity object mapping controls will switch this off to work correctly.
	if (@IsLegacyCacheMechanism = 1)
		begin

			select	0 as TotalCount, 0 as PageSize, 0 as CurrentPage, 0 as TotalPages, 0 as StartIndex, 0 as EndIndex
			select	0 as StoreID, 0, '' as EntityType, 0 as [ID], '' as [Name], 0 as Mapped

		end
	else
		begin

		declare @count int
		declare @allPages int
		declare @start int
		declare @end int

		-- flag to determine if we should do paging
		declare @doPage bit
		set @doPage = case when @pageSize is null and @page is null then 0 else 1 end

		-- execute query to fetch the count of all availalble data
		-- which we will use later on to get the paging information
		select @count = count(*)
		from
		(
			select	o.EntityType,
					o.[Id],
					o.[Name]
			from ObjectView o
			where	o.EntityType = COALESCE(@EntityType, o.EntityType) and
					(@SearchFilter IS NULL OR (o.[Name] like '%' + @SearchFilter + '%'))
		) ov

		-- sanity check
		if(@count <= @pageSize) set @pageSize = @count

		-- determine start and end index
		set @start = ((@page - 1) * @pageSize) + 1
		set @end = (@start + @pageSize) - 1
		if(@end > @count) set @end = @count

		-- compute the total number of pages
		if(@count > 0 )
		begin
			set @allPages = @count / @pageSize

			declare @rem int
			set @rem = @count % @pageSize -- residue
			if(@rem > 0) set @allPages = @allPages + 1
		end
		else set @allPages = 0

		-- paging information
		select	@count as TotalCount,
				@pageSize as PageSize,
				@page as CurrentPage,
				@allPages as TotalPages,
				@start as StartIndex,
				@end as [EndIndex]

		-- actual paged result set
		select	@StoreId as StoreID,
				ROW_NUMBER,
				ov.EntityType,
				ov.[ID],
				ov.[Name],
				dbo.GetStoreMap(@StoreId, ov.EntityType, ov.ID) as Mapped
		from
		(
			select	ROW_NUMBER() over(partition by o.EntityType order by id) as [Row_Number],
					o.EntityType,
					o.[Id],
					o.[Name]
			from ObjectView o
			where	o.EntityType = COALESCE(@EntityType, o.EntityType) and
					(@SearchFilter IS NULL OR (o.[Name] like '%' + @SearchFilter + '%'))
		) ov
		where @doPage = 0 or (ROW_NUMBER BETWEEN @start AND @end)
	end
end
GO
PRINT N'Creating [dbo].[aspdnsf_GetNews]...';

GO



CREATE PROCEDURE [dbo].[aspdnsf_GetNews] (
	@NumHomeNewsToDisplay	INT,
	@storeid				INT,
	@filternews				BIT
)

AS
BEGIN
	SET NOCOUNT ON

	select TOP(@NumHomeNewsToDisplay) a.*
	from News a with (NOLOCK) inner join (select distinct a.NewsID from News a with (nolock) left join NewsStore b with (NOLOCK) on a.NewsID = b.NewsID where (@filternews = 0 or StoreID = @storeid)) b on a.NewsID = b.NewsID
	where ExpiresOn > getdate() and Deleted = 0 and Published = 1
	order by a.NewsId desc
END
GO
PRINT N'Creating [dbo].[aspdnsf_GetObjects]...';

GO

CREATE procedure [dbo].[aspdnsf_GetObjects](
	@EntityType nvarchar(30),
	@SearchFilter nvarchar(30) = null,
	@pageSize int = null,
	@page int = null
)
as
begin

	declare @count int
	declare @allPages int
	declare @start int
	declare @end int

	-- flag to determine if we should do paging
	declare @doPage bit
	set @doPage = case when @pageSize is null and @page is null then 0 else 1 end

	-- execute query to fetch the count of all availalble data
	-- which we will use later on to get the paging information
	select @count = count(*)
	from
	(
		select	o.EntityType,
				o.[Id],
				o.[Name]
		from ObjectView o
		where	o.EntityType = COALESCE(@EntityType, o.EntityType) and
				(@SearchFilter IS NULL OR (o.[Name] like '%' + @SearchFilter + '%'))
	) ov

	-- sanity check
	if(@count <= @pageSize) set @pageSize = @count

	-- determine start and end index
	set @start = ((@page - 1) * @pageSize) + 1
	set @end = (@start + @pageSize) - 1
	if(@end > @count) set @end = @count

	-- compute the total number of pages
	if(@count > 0 )
	begin
		set @allPages = @count / @pageSize

		declare @rem int
		set @rem = @count % @pageSize -- residue
		if(@rem > 0) set @allPages = @allPages + 1
	end
	else set @allPages = 0


	-- paging information
	select	@count as TotalCount,
			@pageSize as PageSize,
			@page as CurrentPage,
			@allPages as TotalPages,
			@start as StartIndex,
			@end as [EndIndex]

	-- actual paged result set
	select	ROW_NUMBER,
			ov.EntityType,
			ov.[ID],
			ov.[Name]
	from
	(
		select	ROW_NUMBER() over(partition by o.EntityType order by id) as [Row_Number],
				o.EntityType,
				o.[Id],
				o.[Name],
				o.Description
		from ObjectView o
		where	o.EntityType = COALESCE(@EntityType, o.EntityType) and
				(@SearchFilter IS NULL OR (o.[Name] like '%' + @SearchFilter + '%'))
	) ov
	where @doPage = 0 or (ROW_NUMBER BETWEEN @start AND @end)

end
GO
PRINT N'Creating [dbo].[aspdnsf_getOrder]...';

GO
CREATE proc [dbo].[aspdnsf_getOrder]
	@ordernumber int
as
set nocount on
select
	o.OrderNumber,
	o.OrderGUID,
	o.ParentOrderNumber,
	o.StoreVersion,
	o.QuoteCheckout,
	o.IsNew,
	o.ShippedOn,
	o.CustomerID,
	o.CustomerGUID,
	o.Referrer,
	o.SkinID,
	o.LastName,
	o.FirstName,
	o.Email,
	o.Notes,
	o.BillingEqualsShipping,
	o.BillingLastName,
	o.BillingFirstName,
	o.BillingCompany,
	o.BillingAddress1,
	o.BillingAddress2,
	o.BillingSuite,
	o.BillingCity,
	o.BillingState,
	o.BillingZip,
	o.BillingCountry,
	o.BillingPhone,
	o.ShippingLastName,
	o.ShippingFirstName,
	o.ShippingCompany,
	o.ShippingResidenceType,
	o.ShippingAddress1,
	o.ShippingAddress2,
	o.ShippingSuite,
	o.ShippingCity,
	o.ShippingState,
	o.ShippingZip,
	o.ShippingCountry,
	o.ShippingMethodID,
	o.ShippingMethod,
	o.ShippingPhone,
	o.ShippingCalculationID,
	o.Phone,
	o.RegisterDate,
	o.AffiliateID,
	o.CouponCode,
	o.CouponType,
	o.CouponDescription,
	o.CouponDiscountAmount,
	o.CouponDiscountPercent,
	o.CouponIncludesFreeShipping,
	o.OkToEmail,
	o.Deleted,
	o.CardType,
	o.CardName,
	o.CardNumber,
	o.CardExpirationMonth,
	o.CardExpirationYear,
	o.OrderSubtotal,
	o.OrderTax,
	o.OrderShippingCosts,
	o.OrderTotal,
	o.PaymentGateway,
	o.AuthorizationCode,
	o.AuthorizationResult,
	o.AuthorizationPNREF,
	o.TransactionCommand,
	o.OrderDate,
	o.LevelID,
	o.LevelName,
	o.LevelDiscountPercent,
	o.LevelDiscountAmount,
	o.LevelHasFreeShipping,
	o.LevelAllowsQuantityDiscounts,
	o.LevelHasNoTax,
	o.LevelAllowsCoupons,
	o.LevelDiscountsApplyToExtendedPrices,
	o.LastIPAddress,
	o.PaymentMethod,
	o.OrderNotes,
	o.PONumber,
	o.DownloadEmailSentOn,
	o.ReceiptEmailSentOn,
	o.DistributorEmailSentOn,
	o.ShippingTrackingNumber,
	o.ShippedVIA,
	o.CustomerServiceNotes,
	o.RTShipRequest,
	o.RTShipResponse,
	o.TransactionState,
	o.AVSResult,
	o.CaptureTXCommand,
	o.CaptureTXResult,
	o.VoidTXCommand,
	o.VoidTXResult,
	o.RefundTXCommand,
	o.RefundTXResult,
	o.CardinalLookupResult,
	o.CardinalAuthenticateResult,
	o.CardinalGatewayParms,
	o.AffiliateCommissionRecorded,
	o.OrderOptions,
	o.OrderWeight,
	o.CarrierReportedRate,
	o.CarrierReportedWeight,
	o.LocaleSetting,
	o.FinalizationData,
	o.ExtensionData,
	o.AlreadyConfirmed,
	o.CartType,
	o.Last4,
	o.ReadyToShip,
	o.IsPrinted,
	o.AuthorizedOn,
	o.CapturedOn,
	o.RefundedOn,
	o.VoidedOn,
	o.EditedOn,
	o.InventoryWasReduced,
	o.MaxMindFraudScore,
	o.MaxMindDetails,
	o.CardStartDate,
	o.CardIssueNumber,
	o.TransactionType,
	o.Crypt,
	o.VATRegistrationID,
	o.FraudedOn,
	o.RefundReason,
	o.AuthorizationPNREF as TransactionID,
	o.RecurringSubscriptionID,
	o.RelatedOrderNumber,
	o.ReceiptHtml,
	os.ShoppingCartRecID,
	os.IsTaxable,
	os.IsShipSeparately,
	os.IsDownload,
	os.DownloadLocation,
	os.FreeShipping,
	os.DistributorID,
	os.ShippingDetail,
	os.TaxClassID,
	os.TaxRate,
	os.Notes as CartNotes,
	os.CustomerEntersPrice,
	os.ProductID,
	os.VariantID,
	os.Quantity,
	os.ChosenColor,
	os.ChosenColorSKUModifier,
	os.ChosenSize,
	os.ChosenSizeSKUModifier,
	os.TextOption,
	os.SizeOptionPrompt,
	os.ColorOptionPrompt,
	os.TextOptionPrompt,
	os.CustomerEntersPricePrompt,
	os.OrderedProductQuantityDiscountID,
	os.OrderedProductQuantityDiscountName,
	os.OrderedProductQuantityDiscountPercent,
	os.OrderedProductName,
	os.OrderedProductVariantName,
	os.OrderedProductSKU,
	os.OrderedProductManufacturerPartNumber ,
	os.OrderedProductPrice,
	os.OrderedProductWeight,
	os.OrderedProductPrice,
	os.ShippingMethodID,
	os.ShippingMethodID CartItemShippingMethodID,
	os.ShippingMethod CartItemShippingMethod,
	os.ShippingAddressID,
	os.IsAKit
from Orders o with (nolock)
	left join orders_ShoppingCart os with (nolock) ON os.OrderNumber = o.OrderNumber
where o.OrderNumber = @ordernumber
order by os.ShippingAddressID
GO
PRINT N'Creating [dbo].[aspdnsf_GetProductComments]...';

GO


CREATE proc [dbo].[aspdnsf_GetProductComments]
    @ProductID		int,
    @votingcustomer int,
    @pagesize		int = 20,
    @pagenum		int = 1,
    @sort			tinyint = 0,
	@storeID		int = 1

AS
BEGIN
    SET NOCOUNT ON

    CREATE TABLE #tmp (rownum int not null identity, RatingID int, ProductID int, CustomerID int, Rating int,
                       Comments nvarchar(max), FoundHelpful tinyint, FoundNotHelpful tinyint, CreatedOn datetime,
                       IsFilthy tinyint, ProductName nvarchar(400), ProductSEName nvarchar(150), ProductGuid uniqueidentifier,
                       FirstName nvarchar(100), LastName nvarchar(100),
                       RatingCustomerName nvarchar(200), CommentHelpFul smallint, MyRating tinyint)


    DECLARE @totalcomments int, @cmd nvarchar(4000)

    SET @cmd = N'SELECT  r.RatingID, r.ProductID, r.CustomerID, r.Rating, r.Comments, r.FoundHelpful,
            r.FoundNotHelpful, r.CreatedOn, r.IsFilthy,
            p.Name, p.SEName, p.ProductGuid,
            c.FirstName, c.LastName,
            c.FirstName + '' '' + c.LastName RatingCustomerName,
            isnull(convert(smallint, h.HelpFul), -1),
            isnull(r2.Rating, 0)
    FROM dbo.Rating r with (nolock)
        join [dbo].Customer c with (nolock) ON r.CustomerID = c.CustomerID
        join [dbo].Product p with (nolock) ON r.ProductID = p.ProductID
        left join [dbo].RatingCommentHelpfulness h with (nolock) on h.productid = r.ProductID and h.RatingCustomerID = r.CustomerID and h.VotingCustomerID = @votingcustomerid and h.StoreID = r.StoreID
        left join [dbo].Rating r2 with (nolock) on r2.CustomerID = @votingcustomerid and r.ProductID = r2.ProductID and r2.StoreID = r.StoreID
    WHERE r.HasComment <> 0 AND p.Deleted = 0 AND p.Published <> 0 and r.ProductID = @ProdID and r.StoreID = @store AND r.IsFilthy = 0
    ORDER BY ' + case @sort
                    when 1 then'r.FoundHelpful desc, r.CreatedOn desc'
                    when 2 then'r.FoundHelpful asc, r.CreatedOn desc'
                    when 3 then'r.CreatedOn desc'
                    when 4 then'r.CreatedOn asc'
                    when 5 then'r.Rating desc, r.CreatedOn desc'
                    when 6 then'r.Rating asc, r.CreatedOn desc'
                 end

    INSERT #tmp (RatingID, ProductID, CustomerID, Rating, Comments, FoundHelpful, FoundNotHelpful, CreatedOn, IsFilthy, ProductName, ProductSEName, ProductGuid, FirstName, LastName, RatingCustomerName, CommentHelpFul, MyRating)
    EXEC sp_executesql @cmd, N'@votingcustomerid int, @ProdID int, @store int', @votingcustomerid = @votingcustomer, @ProdID = @ProductID, @store = @storeID

    SET @totalcomments = @@rowcount

    SELECT @totalcomments totalcomments, ceiling(@totalcomments*1.0/@pagesize) pages

    SELECT *
    FROM #tmp
    WHERE rownum >= @pagesize*(@pagenum-1)+1 and rownum <= @pagesize*(@pagenum)
    ORDER BY rownum
END
GO
PRINT N'Creating [dbo].[aspdnsf_GetProductCount]...';

GO

/****** Object:  StoredProcedure [dbo].[aspdnsf_GetProductCount]    ******/
CREATE proc [dbo].[aspdnsf_GetProductCount]
	@entitytype		int, -- 1 = category, 2 = section, 3 = manufacturer, 4 = distributor, 5= genre, 6 = vector
	@entityid		int


AS
BEGIN

 SET NOCOUNT ON

	IF @entityid is null
		set @entityid = 0

	DECLARE @productcount int

	-- 1 = category, 2 = section, 3 = manufacturer, 4 = distributor, 5= genre, 6 = vector
	IF @entitytype = 1
		SELECT @productcount = COUNT(pc.ProductID) from dbo.ProductCategory pc with(NOLOCK) left join dbo.Product p with(NOLOCK) on p.ProductID = pc.ProductID where p.Published=1 and p.Deleted=0 and pc.CategoryID = @entityid
    ELSE IF @entitytype = 2
		SELECT @productcount = COUNT(ps.ProductID) from dbo.ProductSection ps with(NOLOCK) left join dbo.Product p with(NOLOCK) on p.ProductID = ps.ProductID where p.Published=1 and p.Deleted=0 and ps.SectionID = @entityid
    ELSE IF @entitytype = 3
        SELECT @productcount = COUNT(pm.ProductID) from dbo.ProductManufacturer pm with(NOLOCK) left join dbo.Product p with(NOLOCK) on p.ProductID = pm.ProductID where p.Published=1 and p.Deleted=0 and pm.ManufacturerID = @entityid
    ELSE IF @entitytype = 4
        SELECT @productcount = COUNT(pd.ProductID) from dbo.ProductDistributor pd with(NOLOCK) left join dbo.Product p with(NOLOCK) on p.ProductID = pd.ProductID where p.Published=1 and p.Deleted=0 and pd.DistributorID = @entityid
    ELSE IF @entitytype = 5
        SELECT @productcount = COUNT(pg.ProductID) from dbo.ProductGenre pg with(NOLOCK) left join dbo.Product p with(NOLOCK) on p.ProductID = pg.ProductID where p.Published=1 and p.Deleted=0 and pg.GenreID = @entityid
    ELSE IF @entitytype = 6
        SELECT @productcount = COUNT(pv.ProductID) from dbo.ProductVector pv with(NOLOCK) left join dbo.Product p with(NOLOCK) on p.ProductID = pv.ProductID where p.Published=1 and p.Deleted=0 and pv.VectorID = @entityid
	END

return @productcount
GO
PRINT N'Creating [dbo].[aspdnsf_GetProducts]...';

GO

CREATE PROCEDURE [dbo].[aspdnsf_GetProducts]
    @categoryID      int = null,
    @sectionID       int = null,
    @manufacturerID  int = null,
    @distributorID   int = null,
    @genreID         int = null,
    @vectorID        int = null,
    @localeID        int = null,
    @CustomerLevelID int = null,
    @affiliateID     int = null,
    @ProductTypeID   int = null,
    @ViewType        bit = 1, -- 0 = all variants, 1 = one variant
    @sortEntity      int = 0, -- 1 = category, 2 = section, 3 = manufacturer, 4 = distributor, 5= genre, 6 = vector
    @pagenum         int = 1,
    @pagesize        int = null,
    @StatsFirst      tinyint = 1,
    @searchstr       nvarchar(4000) = null,
    @extSearch       tinyint = 0,
    @publishedonly   tinyint = 0,
    @ExcludeKits     tinyint = 0,
    @ExcludeSysProds tinyint = 0,
    @InventoryFilter int = 0,  --  will only show products with an inventory level GREATER OR EQUAL TO than the number specified in this parameter, set to -1 to disable inventory filtering
    @sortEntityName  varchar(20) = '', -- usely only when the entity id is provided, allowed values: category, section, manufacturer, distributor, genre, vector
    @localeName      varchar(20) = '',
    @OnSaleOnly      tinyint = 0,
	@storeID		 int = 1,
	@filterProduct	 bit = 0,
	@sortby			 varchar(10) = 'default',
	@since			 int = 180  -- best sellers in the last "@since" number of days
AS
BEGIN
	SET NOCOUNT ON

    DECLARE @rcount int
    DECLARE @productfiltersort table (rownum int not null identity  primary key, productid int not null, price money null, saleprice money null, displayorder int not null, VariantID int not null, VariantDisplayOrder int not null, ProductName nvarchar(400) null, VariantName nvarchar(400) null)
    DECLARE @productfilter table (rownum int not null identity  primary key, productid int not null, price money null, saleprice money null,  displayorder int not null, VariantID int not null, VariantDisplayOrder int not null, ProductName nvarchar(400) null, VariantName nvarchar(400) null)
	DECLARE @FilterProductsByAffiliate tinyint, @FilterProductsByCustomerLevel tinyint, @HideProductsWithLessThanThisInventoryLevel int
    CREATE TABLE #displayorder ([name] nvarchar (800), productid int not null primary key, displayorder int not null)
    CREATE TABLE #inventoryfilter (productid int not null, variantid int not null, InvQty int not null)
    CREATE CLUSTERED INDEX tmp_inventoryfilter ON #inventoryfilter (productid, variantid)

    DECLARE @customerLevelMappingsExist bit, @sectionMappingsExist bit, @localeMappingsExist bit, @affiliateMappingsExist bit, @categoryMappingsExist bit, @CustomerLevelFilteringIsAscending bit, @distributorMappingsExist bit, @genreMappingsExist bit, @vectorMappingsExist bit, @manufacturerMappingsExist bit, @ftsenabled tinyint = 0, @searching bit = 0

	IF @searchstr IS NOT NULL
		SET @searching = 1

	IF @searching = 1
	BEGIN
		IF ((SELECT DATABASEPROPERTYEX(db_name(db_id()),'IsFulltextEnabled')) = 1
			AND EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[KeyWordSearch]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
			AND EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[GetValidSearchString]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT')))
		BEGIN
			SET @ftsenabled = 1
		END
	END

    SET @FilterProductsByAffiliate = (SELECT TOP 1 case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'FilterProductsByAffiliate' AND (StoreID=@storeID OR StoreID=0) ORDER BY StoreID desc)
    SET @FilterProductsByCustomerLevel = (SELECT TOP 1 case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'FilterProductsByCustomerLevel' AND (StoreID=@storeID OR StoreID=0) ORDER BY StoreID desc)
    SET @HideProductsWithLessThanThisInventoryLevel = (SELECT TOP 1 case ConfigValue when -1 then 0 else ConfigValue end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'HideProductsWithLessThanThisInventoryLevel' AND (StoreID=@storeID OR StoreID=0) ORDER BY StoreID desc)

    IF @InventoryFilter <> -1 and (@HideProductsWithLessThanThisInventoryLevel > @InventoryFilter or @HideProductsWithLessThanThisInventoryLevel  = -1)
        SET @InventoryFilter  = @HideProductsWithLessThanThisInventoryLevel

    SET @categoryID      = nullif(@categoryID, 0)
    SET @sectionID       = nullif(@sectionID, 0)
    SET @manufacturerID  = nullif(@manufacturerID, 0)
    SET @distributorID   = nullif(@distributorID, 0)
    SET @genreID         = nullif(@genreID, 0)
    SET @vectorID        = nullif(@vectorID, 0)
    SET @affiliateID     = nullif(@affiliateID, 0)
    SET @ProductTypeID   = nullif(@ProductTypeID, 0)

    SET @CustomerLevelFilteringIsAscending  = 0
    SET @CustomerLevelFilteringIsAscending = (SELECT TOP 1 case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'FilterByCustomerLevelIsAscending' AND (StoreID=@storeID OR StoreID=0) ORDER BY StoreID desc)

    IF @localeID is null and ltrim(rtrim(@localeName)) <> ''
        SELECT @localeID = LocaleSettingID FROM dbo.LocaleSetting with (nolock) WHERE Name = ltrim(rtrim(@localeName))

	SELECT @categoryMappingsExist		= CASE WHEN EXISTS (SELECT * FROM ProductCategory) THEN 1 ELSE 0 END
	SELECT @sectionMappingsExist		= CASE WHEN EXISTS (SELECT * FROM ProductSection) THEN 1 ELSE 0 END
	SELECT @localeMappingsExist			= CASE WHEN EXISTS (SELECT * FROM ProductLocaleSetting) THEN 1 ELSE 0 END
	SELECT @customerLevelMappingsExist	= CASE WHEN EXISTS (SELECT * FROM ProductCustomerLevel) THEN 1 ELSE 0 END
	SELECT @affiliateMappingsExist		= CASE WHEN EXISTS (SELECT * FROM ProductAffiliate) THEN 1 ELSE 0 END
	SELECT @distributorMappingsExist	= CASE WHEN EXISTS (SELECT * FROM ProductDistributor) THEN 1 ELSE 0 END
	SELECT @genreMappingsExist			= CASE WHEN EXISTS (SELECT * FROM ProductGenre) THEN 1 ELSE 0 END
	SELECT @vectorMappingsExist			= CASE WHEN EXISTS (SELECT * FROM ProductVector) THEN 1 ELSE 0 END
	SELECT @manufacturerMappingsExist	= CASE WHEN EXISTS (SELECT * FROM ProductManufacturer) THEN 1 ELSE 0 END

    -- get page size
    IF @pagesize is null or @pagesize = 0 BEGIN
        IF @categoryID is not null
            SELECT @pagesize = PageSize FROM dbo.Category with (nolock) WHERE categoryID = @categoryID
        ELSE IF @sectionID is not null
            SELECT @pagesize = PageSize FROM dbo.Section with (nolock) WHERE sectionID = @sectionID
        ELSE IF @manufacturerID is not null
            SELECT @pagesize = PageSize FROM dbo.Manufacturer with (nolock) WHERE manufacturerID = @manufacturerID
        ELSE IF @distributorID is not null
            SELECT @pagesize = PageSize FROM dbo.Distributor with (nolock) WHERE distributorID = @distributorID
        ELSE IF @genreID is not null
            SELECT @pagesize = PageSize FROM dbo.Genre with (nolock) WHERE genreID = @genreID
        ELSE IF @vectorID is not null
            SELECT @pagesize = PageSize FROM dbo.Vector with (nolock) WHERE vectorID = @vectorID
        ELSE
            SET @pagesize = (SELECT TOP 1 ConfigValue FROM dbo.AppConfig WITH (NOLOCK) WHERE Name = 'Default_CategoryPageSize' AND (StoreID = @storeID OR StoreID = 0) ORDER BY StoreID DESC)
    END

    IF @pagesize is null or @pagesize = 0
        SET @pagesize = 20

    -- get sort order
    IF @filterProduct = 1 BEGIN
		IF @sortEntity = 1 or @sortEntityName = 'category' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductCategory a with (nolock) inner join (select distinct a.ProductID from ProductCategory a with (nolock)
			inner join ProductStore ps with (nolock) on a.ProductID = ps.ProductID and StoreID = @storeID) b  on a.ProductID = b.ProductID where categoryID = @categoryID
		END
		ELSE IF @sortEntity = 2 or @sortEntityName = 'section' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductSection a with (nolock) inner join (select distinct a.ProductID from ProductSection a with (nolock)
			inner join ProductStore ps with (nolock) on a.ProductID = ps.ProductID and StoreID = @storeID) b on a.ProductID = B.ProductID where sectionId = @sectionID
		END
		ELSE IF @sortEntity = 3 or @sortEntityName = 'manufacturer' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductManufacturer a with (nolock) inner join (select distinct a.ProductID from ProductManufacturer a with (nolock)
			inner join ProductStore ps with (nolock) on a.ProductID = ps.ProductID and StoreID = @storeID) b on a.ProductID = B.ProductID where ManufacturerID = @manufacturerID
		END
		ELSE IF @sortEntity = 4 or @sortEntityName = 'distributor' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductDistributor a with (nolock) inner join (select distinct a.ProductID from ProductDistributor a with (nolock)
			inner join ProductStore ps with (nolock) on a.ProductID = ps.ProductID and StoreID = @storeID) b on a.ProductID = B.ProductID where DistributorID = @distributorID
		END
		ELSE IF @sortEntity = 5 or @sortEntityName = 'genre' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductGenre a with (nolock) inner join (select distinct a.ProductID from ProductGenre a with (nolock)
			inner join ProductStore ps with (nolock) on a.ProductID = ps.ProductID and StoreID = @storeID) b on a.ProductID = B.ProductID where GenreID = @genreID
		END
		ELSE IF @sortEntity = 6 or @sortEntityName = 'vector' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductVector a with (nolock) inner join (select distinct a.ProductID from ProductVector a with (nolock)
			inner join ProductStore ps with (nolock) on a.ProductID = ps.ProductID and StoreID = @storeID) b on a.ProductID = B.ProductID where VectorID = @vectorID
		END
		ELSE BEGIN
			INSERT #displayorder select distinct [name], a.productid, 1 from dbo.Product a with (nolock) inner join (select distinct a.ProductID from Product a with (nolock)
			inner join ProductStore ps with (nolock) on a.ProductID = ps.ProductID and StoreID = @storeID) b on a.ProductID = B.ProductID ORDER BY Name
		END
	END
	ELSE BEGIN
		IF @sortEntity = 1 or @sortEntityName = 'category' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductCategory a with (nolock) where categoryID = @categoryID
		END
		ELSE IF @sortEntity = 2 or @sortEntityName = 'section' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductSection a with (nolock) where sectionId = @sectionID
		END
		ELSE IF @sortEntity = 3 or @sortEntityName = 'manufacturer' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductManufacturer a with (nolock) where ManufacturerID = @manufacturerID
		END
		ELSE IF @sortEntity = 4 or @sortEntityName = 'distributor' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductDistributor a with (nolock) where DistributorID = @distributorID
		END
		ELSE IF @sortEntity = 5 or @sortEntityName = 'genre' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductGenre a with (nolock) where GenreID = @genreID
		END
		ELSE IF @sortEntity = 6 or @sortEntityName = 'vector' BEGIN
			INSERT #displayorder select distinct null as [name], a.productid, displayorder from dbo.ProductVector a with (nolock) where VectorID = @vectorID
		END
		ELSE BEGIN
			INSERT #displayorder select distinct [name], a.productid, 1 from dbo.Product a with (nolock) ORDER BY Name
		END
	END

	IF @searching = 1
	BEGIN
		IF (@ftsenabled = 1)
		BEGIN
			IF rtrim(isnull(@searchstr, '')) <> ''
			BEGIN
				DECLARE @tmpsrch nvarchar(4000)
				SET @tmpsrch = dbo.GetValidSearchString(@searchstr)
				DELETE #displayorder from #displayorder d left join dbo.KeyWordSearch(@tmpsrch) k on d.productid = k.productid where k.productid is null
			END
		END

		SET @searchstr = '%' + rtrim(ltrim(@searchstr)) + '%'
	END

    IF @InventoryFilter <> -1 BEGIN
        IF @ViewType = 1 BEGIN
            INSERT #inventoryfilter
            SELECT p.productid, pv.VariantID, sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) invqty
            FROM product p with (NOLOCK) join #displayorder d on p.ProductID = d.ProductID
                join ProductVariant pv with (NOLOCK) on p.ProductID = pv.ProductID  and pv.IsDefault = 1
                left join Inventory i with (NOLOCK) on pv.VariantID = i.VariantID
            GROUP BY p.productid, pv.VariantID
            HAVING sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) >= @InventoryFilter
        END
        ELSE
            INSERT #inventoryfilter
            SELECT p.productid, pv.VariantID, sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) invqty
            FROM product p with (NOLOCK) join #displayorder d on p.ProductID = d.ProductID
                join ProductVariant pv with (NOLOCK) on p.ProductID = pv.ProductID
                left join Inventory i with (NOLOCK) on pv.VariantID = i.VariantID
            GROUP BY p.productid, pv.VariantID
            HAVING sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) >= @InventoryFilter


        INSERT @productfilter (productid, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName)
        SELECT distinct p.productid, do.displayorder, pv.VariantID, pv.DisplayOrder, p.Name, pv.Name
        FROM
            product p with (nolock)
            join #displayorder do on p.ProductID = do.ProductID
            left join ProductVariant pv        with (NOLOCK) ON p.ProductID = pv.ProductID and pv.IsDefault >= @ViewType
            left join productcategory pc       with (nolock) on p.ProductID = pc.ProductID
            left join productsection ps        with (nolock) on p.ProductID = ps.ProductID
            left join ProductManufacturer pm   with (nolock) on p.ProductID = pm.ProductID
            left join ProductDistributor pd    with (nolock) on p.ProductID = pd.ProductID
            left join ProductGenre px          with (nolock) on p.ProductID = px.ProductID
            left join ProductVector px2        with (nolock) on p.ProductID = px2.ProductID
            left join ProductLocaleSetting pl  with (nolock) on p.ProductID = pl.ProductID
            left join ProductCustomerLevel pcl with (nolock) on p.ProductID = pcl.ProductID
            left join ProductAffiliate pa      with (nolock) on p.ProductID = pa.ProductID

            join #inventoryfilter i on pv.VariantID = i.VariantID
        WHERE
              (pc.categoryid = @categoryID or @categoryID is null or @categoryMappingsExist = 0)
          and (ps.sectionid = @sectionID or @sectionID is null or @sectionMappingsExist = 0)
          and (pl.LocaleSettingID = @localeID or @localeID is null or @localeMappingsExist = 0)
          and (pa.AffiliateID = @affiliateID or pa.AffiliateID is null or @affiliateMappingsExist = 0 or @FilterProductsByAffiliate = 0)
          and (pm.manufacturerid = @manufacturerID or @manufacturerID is null or @manufacturerMappingsExist = 0)
          and (pd.DistributorID = @distributorID or @distributorID is null or @distributorMappingsExist = 0)
          and (px.GenreID = @genreID or @genreID is null or @genreMappingsExist = 0)
          and (px2.VectorID = @vectorID or @vectorID is null or @vectorMappingsExist = 0)
          and p.ProductTypeID = coalesce(@ProductTypeID, p.ProductTypeID)
          and (case
                when @FilterProductsByCustomerLevel = 0 or @customerLevelMappingsExist = 0 or pcl.CustomerLevelID is null or @CustomerLevelID is null then 1
                when @CustomerLevelFilteringIsAscending = 1 and pcl.CustomerLevelID <= @CustomerLevelID then 1
                when pcl.CustomerLevelID = @CustomerLevelID or pcl.CustomerLevelID is null then 1
                else 0
               end  = 1
              )
          and (@ftsenabled = 1 or
					(@searching = 0 or
						(@searching = 1 and
							(@ftsenabled = 0 and
								(patindex(@searchstr, isnull(p.name, '')) > 0
									or patindex(@searchstr, isnull(convert(nvarchar(20),p.productid), '')) > 0
									or patindex(@searchstr, isnull(pv.name, '')) > 0
									or patindex(@searchstr, isnull(p.sku , '')+isnull(pv.skusuffix , '')) > 0
									or patindex(@searchstr, isnull(p.manufacturerpartnumber, '')) > 0
									or patindex(@searchstr, isnull(pv.manufacturerpartnumber, '')) > 0
									or (patindex(@searchstr, isnull(p.Description, '')) > 0 and @extSearch = 1)
									or (patindex(@searchstr, isnull(p.Summary, '')) > 0 and @extSearch = 1)
								)
							)
						)
					)
				)
          and case when isnull(pv.saleprice,0) = 0 then 0 else 1 end >= @OnSaleOnly
          and p.published >= @publishedonly
          and pv.published >= @publishedonly
          and isnull(p.IsAKit, 0) <= 1-@ExcludeKits
          and p.IsSystem <= 1-@ExcludeSysProds
          and p.Deleted = 0
          and pv.Deleted = 0
        order by do.displayorder, p.Name, pv.DisplayOrder, pv.Name

    END
    ELSE BEGIN
        INSERT @productfilter (productid, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName)
        SELECT distinct p.productid, do.displayorder, pv.VariantID, pv.DisplayOrder, p.Name, pv.Name
        FROM
            product p with (nolock)
            join #displayorder do on p.ProductID = do.ProductID
            join ProductVariant pv             with (NOLOCK) on p.ProductID = pv.ProductID and pv.IsDefault >= @ViewType
            left join productcategory pc       with (nolock) on p.ProductID = pc.ProductID
            left join productsection ps        with (nolock) on p.ProductID = ps.ProductID
            left join ProductManufacturer pm   with (nolock) on p.ProductID = pm.ProductID
            left join ProductDistributor pd    with (nolock) on p.ProductID = pd.ProductID
            left join ProductGenre px          with (nolock) on p.ProductID = px.ProductID
            left join ProductVector px2        with (nolock) on p.ProductID = px2.ProductID
            left join ProductLocaleSetting pl  with (nolock) on p.ProductID = pl.ProductID
            left join ProductCustomerLevel pcl with (nolock) on p.ProductID = pcl.ProductID
            left join ProductAffiliate pa      with (nolock) on p.ProductID = pa.ProductID
        WHERE
              (pc.categoryid = @categoryID or @categoryID is null or @categoryMappingsExist = 0)
          and (ps.sectionid = @sectionID or @sectionID is null or @sectionMappingsExist = 0)
          and (pl.LocaleSettingID = @localeID or @localeID is null or @localeMappingsExist = 0)
          and (pa.AffiliateID = @affiliateID or pa.AffiliateID is null or @affiliateMappingsExist = 0 or @FilterProductsByAffiliate = 0)
          and (pm.manufacturerid = @manufacturerID or @manufacturerID is null or @manufacturerMappingsExist = 0)
          and (pd.DistributorID = @distributorID or @distributorID is null or @distributorMappingsExist = 0)
          and (px.GenreID = @genreID or @genreID is null or @genreMappingsExist = 0)
          and (px2.VectorID = @vectorID or @vectorID is null or @vectorMappingsExist = 0)
          and p.ProductTypeID = coalesce(@ProductTypeID, p.ProductTypeID)
          and (case
                when @FilterProductsByCustomerLevel = 0 or @customerLevelMappingsExist = 0 or pcl.CustomerLevelID is null or @CustomerLevelID is null then 1
                when @CustomerLevelFilteringIsAscending = 1 and pcl.CustomerLevelID <= @CustomerLevelID then 1
                when pcl.CustomerLevelID = @CustomerLevelID or pcl.CustomerLevelID is null then 1
                else 0
               end  = 1
              )
          and (@ftsenabled = 1 or
					(@searching = 0 or
						(@searching = 1 and
							(@ftsenabled = 0 and
								(patindex(@searchstr, isnull(p.name, '')) > 0
									or patindex(@searchstr, isnull(convert(nvarchar(20),p.productid), '')) > 0
									or patindex(@searchstr, isnull(pv.name, '')) > 0
									or patindex(@searchstr, isnull(p.sku , '')+isnull(pv.skusuffix , '')) > 0
									or patindex(@searchstr, isnull(p.manufacturerpartnumber, '')) > 0
									or patindex(@searchstr, isnull(pv.manufacturerpartnumber, '')) > 0
									or (patindex(@searchstr, isnull(p.Description, '')) > 0 and @extSearch = 1)
									or (patindex(@searchstr, isnull(p.Summary, '')) > 0 and @extSearch = 1)
								)
							)
						)
					)
				)
          and case when isnull(pv.saleprice,0) = 0 then 0 else 1 end >= @OnSaleOnly
          and p.published >= @publishedonly
          and pv.published >= @publishedonly
          and isnull(p.IsAKit, 0) <= 1-@ExcludeKits
          and p.IsSystem <= 1-@ExcludeSysProds
          and p.Deleted = 0
          and pv.Deleted = 0
        order by do.displayorder, p.Name, pv.DisplayOrder, pv.Name
    END

    SET @rcount = @@rowcount
    IF @StatsFirst = 1
        SELECT cast(ceiling(@rcount*1.0/@pagesize) as int) pages, @rcount ProductCount

  --Begin sorting
  	if @sortby = 'bestseller'
		begin
			insert @productfiltersort (productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName)
			select pf.productid, pf.price, pf.saleprice, pf.displayorder, pf.VariantID, pf.VariantDisplayOrder, pf.ProductName, pf.VariantName
				from @productfilter pf
				inner join (
					select ProductID, SUM(Quantity) AS NumSales
					  from dbo.Orders_ShoppingCart sc with (NOLOCK)
							join [dbo].Orders o with (NOLOCK)  on sc.OrderNumber = o.OrderNumber and o.OrderDate >= dateadd(dy, -@since, getdate())
					  group by ProductID
				) bsSort on pf.productid = bsSort.ProductID
				order by isnull(bsSort.NumSales, 0) DESC
		end
  	else --default
		begin
			insert @productfiltersort (productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName)
			select productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName
			from @productfilter order by displayorder, productName, variantDisplayOrder, variantName
		end

    -- Check filtered products for recurring variants
    Declare @ProductResults Table
    (
		ProductID int
		, VariantID int
		, HasRecurring bit
		, RowNum int
    );
    -- temp table based on filtered product result set
    Insert Into @ProductResults

    SELECT   Distinct
        p.ProductID,
		pv.VariantID,
		0,
		pf.rownum
    FROM dbo.Product p with (NOLOCK)
        left join dbo.ProductVariant       pv  with (NOLOCK) on p.ProductID = pv.ProductID and pv.IsDefault >= @ViewType
        join @productfiltersort            pf                on pv.ProductID = pf.ProductID and pv.VariantID = pf.VariantID
    WHERE pf.rownum >= @pagesize*(@pagenum-1)+1 and pf.rownum <= @pagesize*(@pagenum)
    ORDER BY pf.rownum

    -- set HasRecurring
    Update pr
    Set HasRecurring = 1
    From @ProductResults pr, (
		Select prs.ProductId
		From @ProductResults prs, ProductVariant pv
		Where prs.ProductID = pv.ProductID
		And pv.IsRecurring = 1
		And pv.Deleted = 0
		And pv.Published = 1
		Group By prs.ProductId
		Having Count(*) > 0) tmp
    Where pr.ProductId = tmp.ProductId
    ---- End Recurring

    SELECT
        p.ProductID,
        p.Name,
        pv.VariantID,
        pv.Name AS VariantName,
        p.ProductGUID,
        p.Summary,
        p.Description,
        p.SEKeywords,
        p.SEDescription,
        p.MiscText,
        p.FroogleDescription,
        p.SETitle,
        p.SEAltText,
        p.SizeOptionPrompt,
        p.ColorOptionPrompt,
        p.TextOptionPrompt,
        p.ProductTypeID,
        p.TaxClassID,
        p.SKU,
        p.ManufacturerPartNumber,
        p.SalesPromptID,
        p.IsFeatured,
        p.XmlPackage,
        p.ColWidth,
        p.Published,
        p.RequiresRegistration,
        p.Looks,
        p.Notes,
        p.QuantityDiscountID,
        p.RelatedProducts,
        p.UpsellProducts,
        p.UpsellProductDiscountPercentage,
        p.RelatedDocuments,
        p.TrackInventoryBySizeAndColor,
        p.TrackInventoryBySize,
        p.TrackInventoryByColor,
        p.IsAKit,
        p.ShowBuyButton,
        p.RequiresProducts,
        p.HidePriceUntilCart,
        p.IsCalltoOrder,
        p.ExcludeFromPriceFeeds,
        p.RequiresTextOption,
        p.TextOptionMaxLength,
        p.SEName,
        p.Deleted,
        p.CreatedOn,
        p.ImageFilenameOverride,
        pv.VariantGUID,
        pv.Description AS VariantDescription,
        pv.SEKeywords AS VariantSEKeywords,
        pv.SEDescription AS VariantSEDescription,
        pv.Colors,
        pv.ColorSKUModifiers,
        pv.Sizes,
        pv.SizeSKUModifiers,
        pv.FroogleDescription AS VariantFroogleDescription,
        pv.SKUSuffix,
        pv.ManufacturerPartNumber AS VariantManufacturerPartNumber,
        pv.Price,
        pv.CustomerEntersPrice,
        pv.CustomerEntersPricePrompt,
        isnull(pv.SalePrice, 0) SalePrice,
        cast(isnull(pv.Weight,0) as decimal(10,1)) Weight,
        pv.MSRP,
        pv.Cost,
        isnull(pv.Points,0) Points,
        pv.Dimensions,
        case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end Inventory,
        pv.DisplayOrder as VariantDisplayOrder,
        pv.Notes AS VariantNotes,
        pv.IsTaxable,
        pv.IsShipSeparately,
        pv.IsDownload,
        pv.DownloadLocation,
        pv.Published AS VariantPublished,
        pv.IsSecureAttachment,
        pv.IsRecurring,
        pv.RecurringInterval,
        pv.RecurringIntervalType,
        pv.SEName AS VariantSEName,
        pv.RestrictedQuantities,
        pv.MinimumQuantity,
        pv.Deleted AS VariantDeleted,
        pv.CreatedOn AS VariantCreatedOn,
        d.Name AS DistributorName,
        d.DistributorID,
        d.SEName AS DistributorSEName,
        m.ManufacturerID,
        m.Name AS ManufacturerName,
        m.SEName AS ManufacturerSEName,
        s.Name AS SalesPromptName,
        pf.HasRecurring,
        case when pcl.productid is null then 0 else isnull(ep.Price, 0) end ExtendedPrice
    FROM dbo.Product p with (NOLOCK)
        left join dbo.ProductVariant       pv  with (NOLOCK) on p.ProductID = pv.ProductID and pv.IsDefault >= @ViewType
        inner join @ProductResults			   pf                on pv.ProductID = pf.ProductID and pv.VariantID = pf.VariantID
        left join dbo.SalesPrompt           s  with (NOLOCK) on p.SalesPromptID = s.SalesPromptID
        left join dbo.ProductManufacturer  pm  with (NOLOCK) on p.ProductID = pm.ProductID
        left join dbo.Manufacturer          m  with (NOLOCK) on pm.ManufacturerID = m.ManufacturerID
        left join dbo.ProductDistributor   pd  with (NOLOCK) on p.ProductID = pd.ProductID
        left join dbo.Distributor           d  with (NOLOCK) on pd.DistributorID = d.DistributorID
        left join dbo.ExtendedPrice        ep  with (NOLOCK) on ep.VariantID = pv.VariantID and ep.CustomerLevelID = @CustomerLevelID
        left join dbo.ProductCustomerLevel pcl with (NOLOCK) on p.ProductID = pcl.ProductID and pcl.CustomerLevelID = @CustomerLevelID
        left join (select VariantID, sum(quan) quan from dbo.Inventory with (nolock) group by VariantID) i  on pv.VariantID = i.VariantID
		order by pf.rownum

    IF @StatsFirst <> 1
        SELECT cast(ceiling(@rcount*1.0/@pagesize) as int) pages, @rcount ProductCount
END
GO

PRINT N'Creating [dbo].[aspdnsf_getProductVariants]...';
GO

CREATE PROCEDURE [dbo].[aspdnsf_getProductVariants]
(
	@FilterEntityType int = 0,
	@FilterEntityID int = 0,
	@Deleted tinyint = 0
)
AS
BEGIN
SET NOCOUNT ON

-- This can return huge result sets potentially
-- Dynamic SQL actually performs better in this scenario than static Sql would

DECLARE @sql nvarchar(max)
DECLARE @whereClause nvarchar(max)
DECLARE @finalSql nvarchar(max)

SELECT @FilterEntityID = ISNULL(@FilterEntityID, 0)
SELECT @FilterEntityType = ISNULL(@FilterEntityType, 0)

SET @sql = 'SELECT	[pv].[VariantID],
					[pv].[Name],
					[pv].[Description],
					[pv].[Price],
					[pv].[SalePrice],
					[pv].[SKUSuffix],
					[pv].[Published],
					[pv].[Inventory],
					[p].[TrackInventoryBySizeAndColor],
					[pv].[ProductID],
					[p].[Name] as ProductName
			FROM [ProductVariant] pv WITH (NOLOCK)
			JOIN [Product] p ON [pv].[ProductID] = [p].[ProductID]'

IF (@FilterEntityType = 1) BEGIN
	SET @whereClause = 'JOIN [ProductCategory] m ON [pv].[ProductID] = [m].[ProductID]
						WHERE [m].[CategoryID] =' + CAST(@FilterEntityID as nvarchar(12))
	END
ELSE IF (@FilterEntityType = 2) BEGIN
	SET @whereClause = 'JOIN [ProductSection] m ON [pv].[ProductID] = [m].[ProductID]
						WHERE [m].[SectionID] =' + CAST(@FilterEntityID as nvarchar(12))
	END
ELSE IF (@FilterEntityType = 3) BEGIN
	SET @whereClause = 'JOIN [ProductManufacturer] m ON [pv].[ProductID] = [m].[ProductID]
						WHERE [m].[ManufacturerID] =' + CAST(@FilterEntityID as nvarchar(12))
	END
ELSE IF (@FilterEntityType = 4) BEGIN
	SET @whereClause = 'JOIN [ProductDistributor] m ON [pv].[ProductID] = [m].[ProductID]
						WHERE [m].[DistributorID] =' + CAST(@FilterEntityID as nvarchar(12))
	END

IF (@Deleted = 0 AND @FilterEntityType = 0)
	SET @whereClause = ' WHERE [pv].[Deleted] = 0'
ELSE IF (@Deleted = 0 AND @FilterEntityType > 0)
	SET @whereClause = ISNULL(@whereClause, '') + ' AND [pv].[Deleted] = 0'

SET @finalSql = @sql + ' ' + ISNULL(@whereClause, '') + 'ORDER BY [pv].[ProductID] ASC'

exec sp_executesql @FinalSql

END
GO
PRINT N'Creating [dbo].[aspdnsf_GetProductWithVariants]...';

GO


CREATE procedure [dbo].[aspdnsf_GetProductWithVariants](
	@SearchFilter nvarchar(30) = null,
	@pageSize int = null,
	@page int = null
)
as
begin

	declare @count int
	declare @allPages int
	declare @start int
	declare @end int

	-- flag to determine if we should do paging
	declare @doPage bit
	set @doPage = case when @pageSize is null and @page is null then 0 else 1 end

	-- execute query to fetch the count of all availalble data
	-- which we will use later on to get the paging information
	select @count = count(*)
	from
	(
		select	p.ProductId,
				p.[Name],
				p.Description,
				p.Published,
				p.Deleted
		from Product p with (nolock)
		where	(@SearchFilter IS NULL OR (p.[Name] like '%' + @SearchFilter + '%'))
	) p

	-- sanity check
	if(@count <= @pageSize) set @pageSize = @count

	-- determine start and end index
	set @start = ((@page - 1) * @pageSize) + 1
	set @end = (@start + @pageSize) - 1
	if(@end > @count) set @end = @count

	-- compute the total number of pages
	if(@count > 0 )
	begin
		set @allPages = @count / @pageSize

		declare @rem int
		set @rem = @count % @pageSize -- residue
		if(@rem > 0) set @allPages = @allPages + 1
	end
	else set @allPages = 0


	-- paging information
	select	@count as TotalCount,
			@pageSize as PageSize,
			@page as CurrentPage,
			@allPages as TotalPages,
			@start as StartIndex,
			@end as [EndIndex]

	-- actual paged result set
	select	p.ProductId,
			p.[Name],
			p.Description,
			p.Published,
			p.Deleted
	from
	(
		select	ROW_NUMBER() over(order by p.ProductId) as [Row_Number],
				p.ProductId,
				p.[Name],
				p.Description,
				p.Published,
				p.Deleted
		from Product p with (nolock)
		where	(@SearchFilter IS NULL OR (p.[Name] like '%' + @SearchFilter + '%'))
	) p
	where @doPage = 0 or (ROW_NUMBER BETWEEN @start AND @end)

	-- next result set would be the variants that are tied to the previous products result set
	select	pv.VariantId,
			pv.ProductId,
			pv.[Name],
			pv.Description,
			pv.Published,
			pv.Deleted,
			pv.IsDefault,
			pv.Inventory,
			pv.Price,
			pv.SalePrice,
			pv.Weight
	from ProductVariant pv with (nolock)
	inner join
	(
		select	p.ProductId
		from
		(
			select	ROW_NUMBER() over(order by p.ProductId) as [Row_Number],
					p.ProductId,
					p.[Name],
					p.Description,
					p.Published,
					p.Deleted
			from Product p with (nolock)
			where	(@SearchFilter IS NULL OR (p.[Name] like '%' + @SearchFilter + '%'))
		) p
		where @doPage = 0 or (ROW_NUMBER BETWEEN @start AND @end)
	) p on p.ProductId = pv.ProductId

end
GO
PRINT N'Creating [dbo].[aspdnsf_GetRecentComments]...';

GO


create proc [dbo].[aspdnsf_GetRecentComments]
    @votingcustomer int,
    @pagesize int = 20,
    @pagenum int = 1,
    @sort tinyint = 0,
    @categoryid int = 0

AS
BEGIN
    SET NOCOUNT ON

    CREATE TABLE #tmp (rownum int not null identity, RatingID int, ProductID int, CustomerID int, Rating int, Comments nvarchar(max), FoundHelpful tinyint, FoundNotHelpful tinyint, CreatedOn datetime, IsFilthy tinyint, ProductName nvarchar(400), ProductSEName nvarchar(150), ProductGuid uniqueidentifier, RatingCustomerName nvarchar(200), CommentHelpFul smallint, MyRating tinyint)


    DECLARE @totalcomments int, @cmd nvarchar(4000)

    SET @cmd = N'SELECT  r.RatingID, r.ProductID, r.CustomerID, r.Rating, r.Comments, r.FoundHelpful,
            r.FoundNotHelpful, r.CreatedOn, r.IsFilthy,
            p.Name, p.SEName, p.ProductGuid,
            c.FirstName + '' '' + c.LastName RatingCustomerName,
            isnull(convert(smallint, h.HelpFul), -1),
            isnull(r2.Rating, 0)
    FROM dbo.Rating r with (nolock)
        join [dbo].Customer c with (nolock) ON r.CustomerID = c.CustomerID
        join [dbo].Product p with (nolock) ON r.ProductID = p.ProductID
        left join [dbo].RatingCommentHelpfulness h with (nolock) on h.productid = r.ProductID and h.RatingCustomerID = r.CustomerID and h.VotingCustomerID = @votingcustomerid
        left join [dbo].Rating r2 with (nolock) on r2.CustomerID = @votingcustomerid and r.ProductID = r2.ProductID
    WHERE r.HasComment <> 0 AND p.Deleted = 0 AND p.Published <> 0 '
    + case when @categoryid > 0 then
    'AND r.ProductID in (select productid from [dbo].productcategory where categoryid=' + CAST(@categoryid AS nvarchar(10)) +')'
    else '' end
    + ' ORDER BY ' + case @sort when 0 then 'r.CreatedOn desc' when 1 then 'r.CreatedOn asc' when 2 then 'r.Rating desc, r.CreatedOn desc' when 3 then 'r.Rating asc, r.CreatedOn desc' end

    INSERT #tmp (RatingID, ProductID, CustomerID, Rating, Comments, FoundHelpful, FoundNotHelpful, CreatedOn, IsFilthy, ProductName, ProductSEName, ProductGuid, RatingCustomerName, CommentHelpFul, MyRating)
    EXEC sp_executesql @cmd, N'@votingcustomerid int', @votingcustomerid = @votingcustomer


    SET @totalcomments = @@rowcount

    SELECT *
    FROM #tmp
    WHERE rownum >= @pagesize*(@pagenum-1)+1 and rownum <= @pagesize*(@pagenum)
    ORDER BY rownum

    SELECT @totalcomments totalcomments, ceiling(@totalcomments*1.0/@pagesize) pages

END
GO

PRINT N'Creating [dbo].[aspdnsf_GetShoppingCart]...';

GO

create proc [dbo].[aspdnsf_GetShoppingCart]
    @CartType tinyint, -- ShoppingCart = 0, WishCart = 1, RecurringCart = 2
    @CustomerID int,
    @OriginalRecurringOrderNumber int,
    @OnlyLoadRecurringItemsThatAreDue tinyint,
    @StoreID int = 1

AS
BEGIN
    SET NOCOUNT ON
    declare @FilterShoppingCart bit, @FilterProduct bit
	SELECT TOP 1 @FilterShoppingCart = ConfigValue FROM GlobalConfig WHERE Name='AllowShoppingcartFiltering'
    SELECT TOP 1 @FilterProduct = ConfigValue FROM GlobalConfig WHERE Name='AllowProductFiltering'

    SELECT
        ShoppingCart.ProductSKU,
        ShoppingCart.IsUpsell,
        ShoppingCart.Notes,
        ShoppingCart.ExtensionData,
        ShoppingCart.CustomerEntersPrice,
        ShoppingCart.NextRecurringShipDate,
        ShoppingCart.RecurringIndex,
        ShoppingCart.OriginalRecurringOrderNumber,
        ShoppingCart.RecurringSubscriptionID,
        ShoppingCart.CartType,
        ShoppingCart.ProductPrice,
        ShoppingCart.ProductWeight,
        ShoppingCart.ProductDimensions,
        ShoppingCart.ShoppingCartRecID,
        ShoppingCart.ProductID,
        ShoppingCart.VariantID,
        ShoppingCart.Quantity,
        ShoppingCart.IsTaxable,
        ShoppingCart.TaxClassID,
        ShoppingCart.TaxRate,
        ShoppingCart.IsShipSeparately,
        ShoppingCart.ChosenColor,
        ShoppingCart.ChosenColorSKUModifier,
        ShoppingCart.ChosenSize,
        ShoppingCart.ChosenSizeSKUModifier,
        ShoppingCart.TextOption,
        ShoppingCart.IsDownload,
        ShoppingCart.FreeShipping,
        ShoppingCart.DistributorID,
        ShoppingCart.DownloadLocation,
        ShoppingCart.CreatedOn,
        ShoppingCart.BillingAddressID as ShoppingCartBillingAddressID,
        ShoppingCart.ShippingAddressID as ShoppingCartShippingAddressID,
        ShoppingCart.ShippingMethodID,
        ShoppingCart.ShippingMethod,
        ShoppingCart.RequiresCount,
        ShoppingCart.IsSystem,
        ShoppingCart.IsAKit,
        ShoppingCart.IsGift,
        Customer.EMail,
        Customer.OrderOptions,
        Customer.OrderNotes,
        Customer.FinalizationData,
        Customer.CouponCode,
        Customer.ShippingAddressID as
        CustomerShippingAddressID,
        Customer.BillingAddressID as CustomerBillingAddressID,
        Product.Name as ProductName,
        Product.IsSystem,
        ProductVariant.name as VariantName,
        Product.TextOptionPrompt,
        Product.SizeOptionPrompt,
        Product.ColorOptionPrompt,
        ProductVariant.CustomerEntersPricePrompt,
        Product.ProductTypeId,
        Product.TaxClassId,
        Product.ManufacturerPartNumber,
        Product.ImageFilenameOverride,
        Product.SEName,
        Product.SEAltText,
        Product.Deleted,
        ProductVariant.Weight,
        case @CartType when 2 then ShoppingCart.RecurringInterval else productvariant.RecurringInterval end RecurringInterval,
        case @CartType when 2 then ShoppingCart.RecurringIntervalType else productvariant.RecurringIntervalType end RecurringIntervalType

    FROM dbo.Customer with (NOLOCK)
        join dbo.ShoppingCart with (NOLOCK) ON Customer.CustomerID = ShoppingCart.CustomerID
        join dbo.Product with (NOLOCK) on ShoppingCart.ProductID=Product.ProductID
        left join dbo.ProductVariant with (NOLOCK) on ShoppingCart.VariantID=ProductVariant.VariantID
        left join dbo.Address with (NOLOCK) on Customer.ShippingAddressID=Address.AddressID
		inner join (select distinct a.ProductID,a.StoreID from ShoppingCart a with (nolock) left join ProductStore b with (nolock) on a.ProductID = b.ProductID and (@FilterProduct = 0 or a.StoreID = b.StoreID)) productstore
        on ShoppingCart.ProductID = productstore.ProductID and ShoppingCart.StoreID = productstore.StoreID

    WHERE ShoppingCart.CartType = @CartType
        and Product.Deleted in (0,2)
        and ProductVariant.Deleted = 0
        and Customer.customerid = @CustomerID
        and (@OriginalRecurringOrderNumber = 0 or ShoppingCart.OriginalRecurringOrderNumber = @OriginalRecurringOrderNumber)
        and (@OnlyLoadRecurringItemsThatAreDue = 0 or (@CartType = 2 and NextRecurringShipDate < dateadd(dy, 1, getdate())))
        and (@FilterShoppingCart = 0 or ShoppingCart.StoreID = @StoreID)
END
GO
PRINT N'Creating [dbo].[aspdnsf_getStateTaxRate]...';

GO


create proc [dbo].[aspdnsf_getStateTaxRate]
    @StateID int = null,
    @TaxClassID int = null

AS
SET NOCOUNT ON


SELECT sr.StateTaxID, sr.StateID, sr.TaxClassID, sr.TaxRate, sr.CreatedOn, t.Name TaxClass, s.Name StateName
FROM dbo.StateTaxRate sr with (nolock) join dbo.TaxClass t with (nolock) on sr.TaxClassID = t.TaxClassID join dbo.State s on s.StateID = sr.StateID
WHERE sr.StateID = COALESCE(@StateID, sr.StateID) and sr.TaxClassID = COALESCE(@TaxClassID, sr.TaxClassID)
GO
PRINT N'Creating [dbo].[aspdnsf_getStateTaxRateByID]...';

GO


create proc [dbo].[aspdnsf_getStateTaxRateByID]
    @StateTaxID int

AS
SET NOCOUNT ON


SELECT sr.StateTaxID, sr.StateID, sr.TaxClassID, sr.TaxRate, sr.CreatedOn, t.Name TaxClass, s.Name StateName
FROM dbo.StateTaxRate sr with (nolock) join dbo.TaxClass t with (nolock) on sr.TaxClassID = t.TaxClassID join dbo.State s on s.StateID = sr.StateID
WHERE StateTaxID = @StateTaxID
GO
PRINT N'Creating [dbo].[aspdnsf_GetStoreShippingMethodMapping]...';

GO


create procedure [dbo].[aspdnsf_GetStoreShippingMethodMapping](
	@StoreId int,
	@IsRTShipping int = 0,
	@OnlyMapped int = 0,
	@ExcludeNameLike NVARCHAR(2000) = NULL
)
AS
BEGIN

	SET NOCOUNT ON;

	select	@StoreId as StoreId,
			dbo.GetStoreMap(@storeid, 'ShippingMethod', sm.ShippingMethodId) as Mapped,
			sm.*
	from ShippingMethod sm WITH (NOLOCK)
	WHERE	sm.IsRTShipping = @IsRTShipping AND
			(@OnlyMapped = 0 or (dbo.GetStoreMap(@storeid, 'ShippingMethod', sm.ShippingMethodId) = 1)) AND
			(@ExcludeNameLike IS NULL OR (sm.[Name] NOT LIKE '%' + @ExcludeNameLike + '%'))
	order by sm.DisplayOrder ASC

END
GO
PRINT N'Creating [dbo].[aspdnsf_getStringresource]...';

GO


create proc [dbo].[aspdnsf_getStringresource]
    @StringResourceID int = null

AS
SET NOCOUNT ON


SELECT StoreId, StringResourceID, StringResourceGUID, Name, LocaleSetting, ConfigValue, CreatedOn, Modified
FROM dbo.Stringresource with (nolock)
WHERE StringResourceID = COALESCE(@StringResourceID, StringResourceID)
GO
PRINT N'Creating [dbo].[aspdnsf_getSysLog]...';

GO



create proc dbo.aspdnsf_getSysLog
	@type nvarchar(100),
	@severity nvarchar(100),
	@startDate DateTime,
	@endDate DateTime

AS
SET NOCOUNT ON

select * from aspdnsf_SysLog
where CreatedOn >= @startDate
	and CreatedOn <= @endDate
	and (@type = 'ALL' or [Type] = @type)
	and (@severity = 'ALL' or Severity = @Severity)
GO
PRINT N'Creating [dbo].[aspdnsf_getTaxclass]...';

GO


create proc [dbo].[aspdnsf_getTaxclass]
    @TaxClassID int = null

AS
SET NOCOUNT ON

SELECT TaxClassID, TaxClassGUID, Name, TaxCode, DisplayOrder, CreatedOn
FROM dbo.Taxclass with (nolock)
WHERE TaxClassID = COALESCE(@TaxClassID, TaxClassID)
GO
PRINT N'Creating [dbo].[aspdnsf_GetUpsellProducts]...';

GO

CREATE PROCEDURE [dbo].[aspdnsf_GetUpsellProducts]
	@productId			INT,
	@customerlevelId	INT,
	@invFilter			INT,
	@storeId			INT = 1,
	@filterProduct		BIT = 0
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @upsellProducts VARCHAR(8000), @UpsellProductDiscountPercentage MONEY

	SELECT @upsellProducts = REPLACE(UpsellProducts, ' ', ''), 
		@upsellProductDiscountPercentage = UpsellProductDiscountPercentage
	FROM dbo.product WITH (NOLOCK) 
	WHERE productid = @productId

	--Bail early if no upsells are set
	IF @upsellProducts IS NULL OR @upsellProducts = ''
	BEGIN
		return
	END

	DECLARE @upsellProductsTable TABLE (ProductId INT NOT NULL)
	INSERT INTO @upsellProductsTable SELECT DISTINCT * FROM dbo.Split(@upsellProducts, ',')

	SELECT 1 - (@upsellProductDiscountPercentage/100) AS UpsellDiscMultiplier,
		p.ProductID,
		p.Name,
		p.Summary,
		p.[Description],
		p.SEAltText,
		p.HidePriceUntilCart,
		p.SEName,
		p.TaxClassID,
		pv.VariantID,
		pv.Price,
		ISNULL(pv.SalePrice, 0) SalePrice,
		ISNULL(pv.SkuSuffix, '') AS SkuSuffix,
		ISNULL(pv.ManufacturerPartNumber, '') AS VariantManufacturerPartNumber,
		ISNULL(pv.Dimensions, '') AS Dimensions,
		pv.Weight,
		ISNULL(pv.GTIN, '') AS GTIN,
		pv.Condition,
		ISNULL(pv.Points, 0) Points,
		sp.Name SalesPromptName,
		ISNULL(ep.price, 0) ExtendedPrice,
		pm.ManufacturerID AS ProductManufacturerId,
		m.Name AS ProductManufacturerName,
		m.SEName AS ProductManufacturerSEName
	FROM dbo.product p WITH (NOLOCK)
		JOIN @upsellProductsTable up ON p.productid = up.ProductId 
			AND p.Published = 1 
			AND p.Deleted = 0 
			AND p.IsCalltoOrder = 0 
			AND p.IsAKit = 0
			AND p.ShowBuyButton = 1
		LEFT JOIN dbo.SalesPrompt sp WITH (NOLOCK) ON sp.SalesPromptID = p.SalesPromptID
		JOIN dbo.ProductVariant pv WITH (NOLOCK) ON pv.ProductID = up.ProductId 
			AND pv.IsDefault = 1 
			AND pv.Published = 1 
			AND pv.Deleted = 0 
			AND pv.CustomerEntersPrice = 0
		LEFT JOIN dbo.ExtendedPrice ep WITH (NOLOCK) ON ep.VariantID = pv.VariantID AND ep.CustomerLevelID = @customerlevelId
		LEFT JOIN (SELECT VariantID, SUM(Quan) Quantity FROM Inventory WITH (NOLOCK) GROUP BY VariantID) i ON pv.VariantID = i.VariantID
		INNER JOIN (
			SELECT DISTINCT a.ProductID
			FROM Product a WITH (NOLOCK)
				LEFT JOIN ProductStore b WITH (NOLOCK) ON a.ProductID = b.ProductID 
			WHERE (@filterProduct = 0 OR StoreID = @storeId)
			) ps ON p.ProductID = ps.ProductID
		LEFT JOIN dbo.ProductManufacturer pm WITH (NOLOCK) ON up.ProductID = pm.ProductID
		LEFT JOIN dbo.Manufacturer m WITH (NOLOCK) ON pm.ManufacturerID = m.ManufacturerID
	WHERE (NULLIF(pv.Sizes, '') IS NULL
			OR NOT EXISTS (
				SELECT *
				FROM dbo.ParseMlLocales(pv.Sizes) Sizes
					INNER JOIN LocaleSetting ON Sizes.Locale = LocaleSetting.Name
				WHERE [Value] IS NOT NULL)
			)
		AND (NULLIF(pv.Colors, '') IS NULL
			OR NOT EXISTS (
				SELECT *
				FROM dbo.ParseMlLocales(pv.Colors) Colors
					INNER JOIN LocaleSetting ON Colors.Locale = LocaleSetting.Name
				WHERE [Value] IS NOT NULL)
			)
		AND p.ProductID != @productId
		AND CASE p.TrackInventoryBySizeAndColor WHEN 1 THEN ISNULL(i.Quantity, 0) ELSE pv.Inventory END >= @invFilter
END
GO
PRINT N'Creating [dbo].[aspdnsf_GetUpsellProductsForCart]...';

GO
CREATE PROCEDURE [dbo].[aspdnsf_GetUpsellProductsForCart]
	@customerId			INT,
	@customerlevelId	INT,
	@invFilter			INT,
	@storeId			INT = 1,
	@upsellProductsLimitNumberOnCart			INT = 4,
	@filterProduct		BIT = 0
AS
BEGIN
	SET NOCOUNT ON;

    DECLARE @tmp TABLE (ProductId INT, UpsellProductID INT)
    DECLARE @upsellProducts VARCHAR(8000), @pId INT
    SET @upsellProducts = ''

    SELECT TOP 1 @pId = p.ProductID, @upsellProducts = ISNULL(CAST(UpsellProducts AS VARCHAR(8000)), '')
    FROM ShoppingCart sc WITH (NOLOCK) JOIN Product p WITH (NOLOCK) ON sc.ProductID = p.ProductID
    WHERE CustomerID = @customerId
    ORDER BY sc.ProductID

    WHILE @@rowcount > 0 BEGIN
        INSERT @tmp SELECT @pId, CONVERT(INT, s.items) UpsellProductID FROM dbo.split(@UpsellProducts , ',') s LEFT JOIN @tmp t on t.UpsellProductID = CONVERT(INT, s.Items) WHERE t.ProductId IS NULL

        SELECT TOP 1 @pId = p.ProductID, @upsellProducts = ISNULL(CAST(UpsellProducts AS VARCHAR(8000)), '')
        FROM ShoppingCart sc WITH (NOLOCK) JOIN Product p WITH (NOLOCK) ON sc.ProductID = p.ProductID
        WHERE CustomerID = @customerId AND sc.ProductID > @pId
        ORDER BY sc.ProductID
    END

    --For multi store. Delete items not included in a specific store.
    IF (@filterProduct = 1)
	BEGIN
		DELETE @tmp WHERE UpsellProductID NOT IN (SELECT ProductID FROM ProductStore WHERE StoreID = @storeId)
	END

    SELECT TOP (@upsellProductsLimitNumberOnCart) 1-(p2.UpsellProductDiscountPercentage/100) UpsellDiscMultiplier,
            p.ProductID, p.Name, p.SEName, p.Summary, p.Description, RTRIM(pv.Name) VariantName, p.SEAltText, p.ImageFilenameOverride, p.TaxClassID,
            p.SKU, pv.VariantID, p.HidePriceUntilCart, pv.Price, ISNULL(pv.SalePrice, 0) SalePrice, ISNULL(ep.Price, 0) ExtendedPrice, pv.Points,
            sp.Name SalesPromptName
    FROM @tmp t
        JOIN Product p WITH (NOLOCK) ON p.ProductID  = t.UpsellProductID
        JOIN Product p2 WITH (NOLOCK) ON p2.ProductID  = t.ProductId
        JOIN ProductVariant pv WITH (NOLOCK) ON p.ProductID = pv.productid AND pv.IsDefault = 1
        LEFT JOIN SalesPrompt sp  with (NOLOCK) ON p.SalesPromptID = sp.SalesPromptID
        LEFT JOIN ExtendedPrice ep  with (NOLOCK) ON ep.VariantID = pv.VariantID and ep.CustomerLevelID = @customerlevelId
        LEFT JOIN (SELECT VariantID, SUM(quan) quan FROM Inventory WITH (NOLOCK) GROUP BY VariantID) i ON i.VariantID = pv.VariantID
    where (p.RequiresTextOption IS NULL OR p.RequiresTextOption=0)
        AND (ISNULL(CONVERT(NVARCHAR(4000), Sizes), '') = '' OR CONVERT(NVARCHAR(4000), Sizes) NOT LIKE '%>[^<>]%_[^<>]%<%')
        AND (ISNULL(CONVERT(NVARCHAR(4000), Colors), '') = '' OR CONVERT(NVARCHAR(4000), Colors) NOT LIKE '%>[^<>]%_[^<>]%<%')
        AND p.IsAKit=0 AND p.IsCallToOrder = 0 AND pv.CustomerEntersPrice = 0
        AND (pv.Sizes = '' OR pv.Sizes IS NULL) AND (pv.Colors = '' OR pv.Colors IS NULL)
        AND p.ProductID NOT IN (SELECT ProductID FROM ShoppingCart  WITH (NOLOCK) WHERE CartType=0 and CustomerID=@customerId)
        AND CASE p.TrackInventoryBySizeAndColor WHEN 1 THEN ISNULL(i.quan, 0) ELSE pv.inventory END >= @invFilter
        AND p.Published > 0
        AND p.ShowBuyButton = 1
END
GO
PRINT N'Creating [dbo].[aspdnsf_GetVariantsPaged]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_GetVariantsPaged]
(
	@pageSize int,
	@startIndex int,
	@EntityFilterType int = 0,
	@EntityFilterID int = 0
)
AS
BEGIN
SET NOCOUNT ON

DECLARE @Filter TABLE (productID int)

IF (@EntityFilterID <> 0 AND @EntityFilterType <> 0) BEGIN
	IF @EntityFilterType = 1
		INSERT INTO @Filter (productID) SELECT ProductID FROM ProductCategory WHERE CategoryID = @EntityFilterID
	IF @EntityFilterType = 2
		INSERT INTO @Filter (productID) SELECT ProductID FROM ProductManufacturer WHERE ManufacturerID = @EntityFilterID
	IF @EntityFilterType = 3
		INSERT INTO @Filter (productID) SELECT ProductID FROM ProductSection WHERE SectionID = @EntityFilterID
	IF @EntityFilterType = 4
		INSERT INTO @Filter (productID) SELECT ProductID FROM ProductDistributor WHERE DistributorID = @EntityFilterID
END;

WITH OrderedVariants AS
(
	SELECT	pv.variantID,
			pv.IsDefault,
			pv.Name,
			pv.Description,
			pv.ProductID,
			pv.SkuSuffix,
			pv.Price,
			pv.SalePrice,
			pv.Inventory,
			pv.Published,
			pv.Deleted,
			p.TrackInventoryBySizeAndColor,
			p.Name as ProductName,
			ROW_NUMBER() OVER(ORDER BY pv.variantID) as RowNum
			FROM ProductVariant pv WITH (NOLOCK)
			JOIN Product p on p.ProductID = pv.ProductID
			WHERE pv.Deleted = 0
				AND ((@EntityFilterType = 0 OR @EntityFilterID = 0) OR
					pv.ProductID in (SELECT ProductID from @Filter))
)
SELECT	TOP (@pageSize) variantID,
		IsDefault,
		Name,
		Description,
		ProductID,
		SkuSuffix,
		Price,
		SalePrice,
		Inventory,
		Published,
		Deleted,
		TrackInventoryBySizeAndColor,
		ProductName
FROM OrderedVariants
WHERE RowNum > @startIndex

END
GO
PRINT N'Creating [dbo].[aspdnsf_getZipTaxRate]...';

GO


create proc [dbo].[aspdnsf_getZipTaxRate]
    @ZipCode nvarchar(10) = null,
    @TaxClassID int = null

AS
SET NOCOUNT ON


SELECT ztr.ZipTaxID, ztr.ZipCode, ztr.TaxClassID, ztr.TaxRate, ztr.CreatedOn, t.Name TaxClass
FROM dbo.ZipTaxRate ztr with (nolock) join dbo.TaxClass t with (nolock) on ztr.TaxClassID = t.TaxClassID
WHERE ztr.ZipCode = COALESCE(@ZipCode, ztr.ZipCode) and ztr.TaxClassID = COALESCE(@TaxClassID, ztr.TaxClassID)
GO
PRINT N'Creating [dbo].[aspdnsf_getZipTaxRateByID]...';

GO


create proc [dbo].[aspdnsf_getZipTaxRateByID]
    @ZipTaxID int

AS
SET NOCOUNT ON


SELECT ztr.ZipTaxID, ztr.ZipCode, ztr.TaxClassID, ztr.TaxRate, ztr.CreatedOn, ztr.CountryId, t.Name TaxClass
FROM dbo.ZipTaxRate ztr with (nolock) join dbo.TaxClass t with (nolock) on ztr.TaxClassID = t.TaxClassID
WHERE ztr.ZipTaxID = @ZipTaxID
GO
PRINT N'Creating [dbo].[aspdnsf_ImportOrderShipment_XML]...';

GO


create PROC [dbo].[aspdnsf_ImportOrderShipment_XML]
 @xmlorder nvarchar(max),
 @carrierName nvarchar(max)

AS

BEGIN
SET NOCOUNT ON

CREATE TABLE #tmp (ReadyToShip bit, OrderNumber int, TrackingNumber nvarchar(100))

DECLARE @hdoc int, @retcode int
DECLARE @OrderState nvarchar(10)

EXEC @retcode = sp_xml_preparedocument
  @hdoc OUTPUT,
  @xmlorder

INSERT INTO #tmp
SELECT *
FROM OPENXML(@hdoc, '/shipment/ordershipment',2)
WITH (ReadyToShip bit, OrderNumber int, TrackingNumber nvarchar(100))

  UPDATE dbo.Orders
  SET
  ShippingTrackingNumber = t.TrackingNumber,
  ReadyToShip = t.ReadyToShip,
  ShippedOn = getdate(),
  ShippedVia = @carrierName,
  IsNew = 0
  FROM dbo.Orders o
  JOIN #tmp t
  ON o.OrderNumber = t.OrderNumber

EXEC sp_xml_removedocument @hdoc
DROP TABLE #tmp


END
GO
PRINT N'Creating [dbo].[aspdnsf_ImportProductPricing_XML]...';

GO
create procedure [dbo].[aspdnsf_ImportProductPricing_XML]
	@document xml
as
begin
	set nocount on

	declare @productImport table
	(
		ProductId int,
		VariantId int,
		KitItemId int,
		Name nvarchar(400),
		KitGroup nvarchar(800),
		SKU nvarchar(50),
		SKUSuffix nvarchar(50),
		ManufacturerPartNumber nvarchar(50),
		Cost money,
		MSRP money,
		Price money,
		SalePrice money,
		Inventory int
	)

	insert into @productImport
		select
			T.c.value('(ProductID)[1]', 'int'),
			T.c.value('(VariantID)[1]', 'int'),
			T.c.value('(KitItemID)[1]', 'int'),
			T.c.value('(Name)[1]', 'nvarchar(max)'),
			T.c.value('(KitGroup)[1]', 'nvarchar(max)'),
			T.c.value('(SKU)[1]', 'nvarchar(max)'),
			T.c.value('(SKUSuffix)[1]', 'nvarchar(max)'),
			T.c.value('(ManufacturerPartNumber)[1]', 'nvarchar(max)'),
			T.c.value('(Cost)[1]', 'money'),
			T.c.value('(MSRP)[1]', 'money'),
			T.c.value('(Price)[1]', 'money'),
			T.c.value('(SalePrice)[1]', 'money'),
			T.c.value('(Inventory)[1]', 'int')
		from
			@document.nodes('productlist/productvariant') T(c)

	update dbo.ProductVariant
		set Price = productImport.Price,
			SalePrice = nullif(productImport.SalePrice,0),
			Inventory = productImport.Inventory,
			Cost = productImport.cost,
			MSRP = productImport.msrp
		from dbo.ProductVariant p
			join @productImport productImport  on p.ProductID = productImport.ProductID and p.VariantID = productImport.VariantID
		where KitItemID = 0

	update dbo.KitItem
		set PriceDelta = productImport.Price
		from dbo.KitItem k
			join @productImport productImport  on k.KitItemID = productImport.KitItemID
		where productImport.KitItemID > 0
end
GO
PRINT N'Creating [dbo].[aspdnsf_insAddress]...';

GO

CREATE PROCEDURE [dbo].[aspdnsf_insAddress]
(
	@CustomerID int,
	@NickName nvarchar(100)	= null,
	@FirstName nvarchar(100),
	@LastName nvarchar(100),
	@Company nvarchar(100)	= null,
	@Address1 nvarchar(100),
	@Address2 nvarchar(100)	= null,
	@Suite nvarchar(50)		= null,
	@City nvarchar(100),
	@State nvarchar(100),
	@Zip nvarchar(100),
	@Country nvarchar(100),
	@ResidenceType int		= null,
	@Phone nvarchar(25),
	@Email nvarchar(25)
)
AS
BEGIN
	INSERT INTO [Address]	([CustomerID],
				[NickName],
				[FirstName],
				[LastName],
				[Company],
				[Address1],
				[Address2],
				[Suite],
				[City],
				[State],
				[Zip],
				[Country],
				[ResidenceType],
				[Phone],
				[Email])
		VALUES	(@CustomerID,
			@NickName,
			@FirstName,
			@LastName,
			@Company,
			@Address1,
			@Address2,
			@Suite,
			@City,
			@State,
			@Zip,
			@Country,
			@ResidenceType,
			@Phone,
			@Email)
END
GO
PRINT N'Creating [dbo].[aspdnsf_insAffiliate]...';

GO
CREATE PROC dbo.aspdnsf_insAffiliate
    @EMail nvarchar(100),
    @Password nvarchar(250),
    @Notes nvarchar(max),
    @IsOnline tinyint,
    @FirstName nvarchar(100),
    @LastName nvarchar(100),
    @Name nvarchar(100),
    @Company nvarchar(100),
    @Address1 nvarchar(100),
    @Address2 nvarchar(100),
    @Suite nvarchar(50),
    @City nvarchar(100),
    @State nvarchar(100),
    @Zip nvarchar(10),
    @Country nvarchar(100),
    @Phone nvarchar(25),
    @WebSiteName nvarchar(100),
    @WebSiteDescription nvarchar(max),
    @URL nvarchar(max),
    @DefaultSkinID int,
    @ParentAffiliateID int,
    @DisplayOrder int,
    @ExtensionData nvarchar(max),
    @SEName nvarchar(100),
    @SETitle nvarchar(max),
    @SEAltText nvarchar(max),
    @SEKeywords nvarchar(max),
    @SEDescription nvarchar(max),
    @Wholesale tinyint,
    @SaltKey int,
    @StoreID int,
    @AffiliateID int OUTPUT

AS
SET NOCOUNT ON


insert dbo.Affiliate(AffiliateGUID, EMail, Password, Notes, IsOnline, FirstName, LastName, [Name], Company, Address1, Address2, Suite, City, State, Zip, Country, Phone, WebSiteName, WebSiteDescription, URL, DefaultSkinID, ParentAffiliateID, DisplayOrder, ExtensionData, SEName, SETitle, SEAltText, SEKeywords, SEDescription, Published, Wholesale, CreatedOn, SaltKey)
values (newid(), @EMail, @Password, @Notes, @IsOnline, @FirstName, @LastName, @Name, @Company, @Address1, @Address2, @Suite, @City, @State, @Zip, @Country, @Phone, @WebSiteName, @WebSiteDescription, @URL, @DefaultSkinID, @ParentAffiliateID, @DisplayOrder, @ExtensionData, @SEName, @SETitle, @SEAltText, @SEKeywords, @SEDescription, 1, @Wholesale, getdate(), @SaltKey)

set @AffiliateID = SCOPE_IDENTITY()

insert into AffiliateStore (AffiliateID, StoreID, CreatedOn) values (@AffiliateID, @StoreID, GETDATE())
GO
PRINT N'Creating [dbo].[aspdnsf_insAppconfig]...';

GO
create proc dbo.aspdnsf_insAppconfig
    @Name nvarchar(100),
    @Description nvarchar(max),
    @ConfigValue nvarchar(max),
    @GroupName nvarchar(100),
    @SuperOnly tinyint,
    @StoreID int,
    @ValueType nvarchar(100) = null,
    @AllowableValues nvarchar(max) = null,
    @AppConfigID int OUTPUT

AS
SET NOCOUNT ON


    INSERT dbo.Appconfig(AppConfigGUID, Name, Description, ConfigValue, GroupName, SuperOnly, ValueType, AllowableValues, StoreID,CreatedOn)
    VALUES (newid(), @Name, @Description, @ConfigValue, @GroupName, @SuperOnly, @ValueType, @AllowableValues, @StoreID, getdate())

    set @AppConfigID = SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[aspdnsf_insBadWord]...';

GO
create proc [dbo].[aspdnsf_insBadWord]
    @LocaleSetting nvarchar(10),
    @Word nvarchar(100),
    @BadWordID int OUTPUT

AS
SET NOCOUNT ON

INSERT INTO [dbo].[BadWord] (LocaleSetting, Word, CreatedOn)
VALUES(@LocaleSetting,@Word,getdate())

set @BadWordId = SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[aspdnsf_insCountryTaxRate]...';

GO
create proc [dbo].[aspdnsf_insCountryTaxRate]
    @CountryID int,
    @TaxClassID int,
    @TaxRate money,
    @CountryTaxID int OUTPUT

AS
SET NOCOUNT ON


insert dbo.CountryTaxRate(CountryID, TaxClassID, TaxRate, CreatedOn)
values (@CountryID, @TaxClassID, @TaxRate, getdate())

set @CountryTaxID = SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[aspdnsf_insCustomer]...';

GO

create proc [dbo].[aspdnsf_insCustomer]
	@Email nvarchar(100),
	@Password nvarchar(100),
	@SkinID int,
	@AffiliateID int,
	@Referrer nvarchar(max),
	@IsAdmin tinyint,
	@LastIPAddress varchar(40),
	@LocaleSetting nvarchar(10),
	@Over13Checked tinyint,
	@OkToEmail tinyint = 0,	
	@CurrencySetting nvarchar(10),
	@VATSetting int,
	@VATRegistrationID nvarchar(100),
	@CustomerLevelID int,
	@StoreID int = 1,
	@CustomerID int output

as begin
	set nocount on

	insert dbo.Customer(CustomerGUID, CustomerLevelID, RegisterDate, Email, Password, Gender, FirstName, LastName, Notes, SkinID, Phone, AffiliateID, Referrer, CouponCode, OkToEmail, IsAdmin, BillingEqualsShipping, LastIPAddress, OrderNotes, RTShipRequest, RTShipResponse, OrderOptions, LocaleSetting, MicroPayBalance, RecurringShippingMethodID, RecurringShippingMethod, BillingAddressID, ShippingAddressID, ExtensionData, FinalizationData, Deleted, CreatedOn, Over13Checked, CurrencySetting, VATSetting, VATRegistrationID, StoreCCInDB, IsRegistered, LockedUntil, AdminCanViewCC, PwdChanged, BadLoginCount, LastBadLogin, Active, PwdChangeRequired, SaltKey, StoreID)
	values
	(
		newid(),
		@CustomerLevelID,
		getdate(),
		isnull(@Email, ''),
		isnull(@Password, ''),
		null,
		null,
		null,
		null,
		isnull(@SkinID, 1),
		null,
		@AffiliateID,
		@Referrer,
		null,
		isnull(@OkToEmail, 0),
		isnull(@IsAdmin, 0),
		0,
		@LastIPAddress,
		null,
		null,
		null,
		null,
		isnull(@LocaleSetting, ('en-US')),
		0.0,
		1,
		null,
		null,
		null,
		null,
		null,
		0,
		getdate(),
		@Over13Checked,
		@CurrencySetting,
		@VATSetting,
		@VATRegistrationID,
		1,
		0,
		null,
		1,
		getdate(),
		0,
		null,
		1,
		0,
		0,
		@StoreID
	)

	set @CustomerID = scope_identity()
end
GO
PRINT N'Creating [dbo].[aspdnsf_insEventHandler]...';

GO
create proc [dbo].[aspdnsf_insEventHandler]
    @EventName nvarchar(20),
    @CalloutURL varchar(200),
    @XmlPackage varchar(100),
    @Active bit,
    @Debug bit,
    @EventID int OUTPUT

AS
SET NOCOUNT ON


    if exists (select * from dbo.EventHandler with (nolock) where EventName = @EventName)
        set @EventID = -1
    else begin
        INSERT dbo.EventHandler(EventName, CalloutURL, XmlPackage, Active, Debug)
        VALUES (@EventName, @CalloutURL, @XmlPackage, @Active, @Debug)
        set @EventID = SCOPE_IDENTITY()
    end
GO
PRINT N'Creating [dbo].[aspdnsf_insGiftCardUsage]...';

GO
create proc [dbo].[aspdnsf_insGiftCardUsage]
    @GiftCardID int,
    @UsageTypeID int,
    @UsedByCustomerID int,
    @OrderNumber int,
    @Amount money,
    @ExtensionData nvarchar(max) = null,
    @GiftCardUsageID int OUTPUT

AS
BEGIN
    SET NOCOUNT ON
    DECLARE @err int, @TotalUsage money, @Balance money

    select @Balance = Balance from dbo.GiftCard with (nolock) WHERE GiftCardID = @GiftCardID
    IF @UsageTypeID in (2, 4) and @Balance < @Amount BEGIN
        SET @Amount = @Balance
    END

    BEGIN TRAN
        insert dbo.GiftCardUsage(GiftCardUsageGUID, GiftCardID, UsageTypeID, UsedByCustomerID, OrderNumber, Amount, ExtensionData, CreatedOn)
        values (newid(), @GiftCardID, @UsageTypeID, @UsedByCustomerID, @OrderNumber, @Amount, @ExtensionData, getdate())

        SELECT  @GiftCardUsageID = SCOPE_IDENTITY(), @err = @@ERROR
        IF @err <> 0 BEGIN
            SET @GiftCardUsageID = -2
            RAISERROR('Could not enter gift card usage transaction', 16, 1)
            ROLLBACK TRAN
            RETURN
        END

        SELECT @TotalUsage = sum(Amount*(case when UsageTypeID in (2, 4) then -1 else 1 end)) FROM dbo.GiftCardUsage with (nolock) WHERE GiftCardID = @GiftCardID
        UPDATE dbo.GiftCard
        SET Balance = InitialAmount + @TotalUsage
        WHERE GiftCardID = @GiftCardID

        IF @err <> 0 BEGIN
            SET @GiftCardUsageID = -3
            RAISERROR('Could not update gift card balance', 16, 1)
            ROLLBACK TRAN
            RETURN
        END

    COMMIT TRAN
END
GO
PRINT N'Creating [dbo].[aspdnsf_insProductType]...';

GO

create proc [dbo].[aspdnsf_insProductType]
    @Name nvarchar(400),
    @ProductTypeID int OUTPUT

AS
SET NOCOUNT ON

if exists (select * FROM dbo.ProductType with (nolock) where [Name] = @Name) begin
 select @ProductTypeID=ProductTypeID FROM dbo.ProductType with (nolock) where [Name] = @Name
end
else begin
    insert dbo.ProductType(ProductTypeGUID, Name) values (newid(),@Name)
    set @ProductTypeID = SCOPE_IDENTITY()
end
GO
PRINT N'Creating [dbo].[aspdnsf_insProductView]...';

GO


CREATE PROC [dbo].[aspdnsf_insProductView]
	@CustomerViewID nvarchar(50),
	@ProductID int,
	@ViewDate datetime


AS
SET NOCOUNT ON
BEGIN
	IF EXISTS (SELECT * FROM ProductView with (NOLOCK) where CustomerViewID = @CustomerViewID and ProductID = @ProductID)
	BEGIN
		UPDATE ProductView set ViewDate = @ViewDate where CustomerViewID = @CustomerViewID and ProductID = @ProductID
	END
	ELSE
	BEGIN
		insert into ProductView(CustomerViewID,ProductID,ViewDate) values (@CustomerViewID,@ProductID,@ViewDate)
	END
END
GO
PRINT N'Creating [dbo].[aspdnsf_insRestrictedIP]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_insRestrictedIP]
(
	@IPAddress nvarchar(25)
)
AS
BEGIN
SET NOCOUNT ON
	IF NOT EXISTS(SELECT IPAddress FROM RestrictedIP WHERE IPAddress = @IPAddress) BEGIN
		INSERT INTO RestrictedIP (IPAddress) VALUES(@IPAddress)
	END
END
GO
PRINT N'Creating [dbo].[aspdnsf_insStateTaxRate]...';

GO
create proc [dbo].[aspdnsf_insStateTaxRate]
    @StateID int,
    @TaxClassID int,
    @TaxRate money,
    @StateTaxID int OUTPUT

AS
SET NOCOUNT ON

insert dbo.StateTaxRate(StateID, TaxClassID, TaxRate, CreatedOn)
values (@StateID, @TaxClassID, @TaxRate, getdate())

set @StateTaxID = SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[aspdnsf_insStringresource]...';

GO


create proc [dbo].[aspdnsf_insStringresource]
    @Name nvarchar(100),
    @LocaleSetting nvarchar(10),
    @ConfigValue nvarchar(2500),
	@StoreId int,
    @StringResourceID int OUTPUT

AS
SET NOCOUNT ON

if exists (select * FROM dbo.Stringresource with (nolock) where StoreId = @StoreId and [Name] = @Name and LocaleSetting = @LocaleSetting) begin
    set @StringResourceID = -1
end
else begin
    insert dbo.Stringresource(StoreId, StringResourceGUID, Name, LocaleSetting, ConfigValue, CreatedOn, Modified)
    values (@StoreId, newid(), @Name, @LocaleSetting, @ConfigValue, getdate(), 0)

    set @StringResourceID = @@identity
end
GO
PRINT N'Creating [dbo].[aspdnsf_insSysLog]...';

GO


create proc dbo.aspdnsf_insSysLog
    @message nvarchar(max),
    @details nvarchar(max),
	@type nvarchar(100),
	@severity nvarchar(100)

AS
SET NOCOUNT ON

INSERT [dbo].[aspdnsf_SysLog] (Message,Details,Type,Severity)
	VALUES(	@message,
			@details,
			@type,
			@severity)
GO
PRINT N'Creating [dbo].[aspdnsf_insTaxclass]...';

GO
create proc [dbo].[aspdnsf_insTaxclass]
    @Name nvarchar(400),
    @TaxCode nvarchar(400),
    @DisplayOrder int,
    @TaxClassID int OUTPUT

AS
SET NOCOUNT ON

insert dbo.Taxclass(TaxClassGUID, Name, TaxCode, DisplayOrder, CreatedOn)
values (newid(), @Name, @TaxCode, @DisplayOrder, getdate())

set @TaxClassID = SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[aspdnsf_insZipTaxRate]...';

GO


create proc [dbo].[aspdnsf_insZipTaxRate]
    @ZipCode nvarchar(10),
    @TaxClassID int,
    @TaxRate money,
    @CountryId int

AS
SET NOCOUNT ON


insert dbo.ZipTaxRate(ZipCode, TaxClassID, TaxRate, CreatedOn, CountryId)
values (@ZipCode, @TaxClassID, @TaxRate, getdate(), @CountryId)

SELECT SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[aspdnsf_ListAllIndexes]...';

GO


create proc [dbo].[aspdnsf_ListAllIndexes]

as
begin
    SELECT
        TABLE_NAME = OBJECT_NAME(i.id),
        INDEX_NAME = i.name,
        COLUMN_LIST = dbo.GetIndexColumns(OBJECT_NAME(i.id), i.id, i.indid),
        IS_CLUSTERED = INDEXPROPERTY(i.id, i.name, 'IsClustered'),
        IS_UNIQUE = INDEXPROPERTY(i.id, i.name, 'IsUnique'),
        FILE_GROUP = g.GroupName
    INTO #AllIndexes
    FROM
        dbo.sysindexes i
    INNER join [dbo].
        dbo.sysfilegroups g
    ON
        i.groupid = g.groupid
    WHERE
        (i.indid BETWEEN 1 AND 254)
        -- leave out AUTO_STATISTICS:
        AND (i.Status & 64)=0
        -- leave out system tables:
        AND OBJECTPROPERTY(i.id, 'IsMsShipped') = 0

    SELECT
        v.*,
        [PrimaryKey?] = CASE
            WHEN T.TABLE_NAME IS NOT NULL THEN 1
            ELSE 0
        END
    FROM
        #AllIndexes v
    LEFT OUTER join
        INFORMATION_SCHEMA.TABLE_CONSTRAINTS T
    ON
        T.CONSTRAINT_NAME = v.INDEX_NAME
        AND T.TABLE_NAME = v.TABLE_NAME
        AND T.CONSTRAINT_TYPE = 'PRIMARY KEY'
    end
GO
PRINT N'Creating [dbo].[aspdnsf_ListAllNonPrimaryIndexes]...';

GO

create proc [dbo].[aspdnsf_ListAllNonPrimaryIndexes]

as
begin
    SELECT
        TABLE_NAME = OBJECT_NAME(i.id),
        INDEX_NAME = i.name,
        COLUMN_LIST = dbo.GetIndexColumns(OBJECT_NAME(i.id), i.id, i.indid),
        IS_CLUSTERED = INDEXPROPERTY(i.id, i.name, 'IsClustered'),
        IS_UNIQUE = INDEXPROPERTY(i.id, i.name, 'IsUnique'),
        FILE_GROUP = g.GroupName
    INTO #AllIndexes
    FROM
        dbo.sysindexes i
    INNER join [dbo].
        dbo.sysfilegroups g
    ON
        i.groupid = g.groupid
    WHERE
        (i.indid BETWEEN 1 AND 254)
        -- leave out AUTO_STATISTICS:
        AND (i.Status & 64)=0
        -- leave out system tables:
        AND OBJECTPROPERTY(i.id, 'IsMsShipped') = 0

    SELECT
        v.*,
        [PrimaryKey?] = CASE
            WHEN T.TABLE_NAME IS NOT NULL THEN 1
            ELSE 0
        END
    FROM
        #AllIndexes v
    LEFT OUTER join
        INFORMATION_SCHEMA.TABLE_CONSTRAINTS T
    ON
        T.CONSTRAINT_NAME = v.INDEX_NAME
        AND T.TABLE_NAME = v.TABLE_NAME
        AND T.CONSTRAINT_TYPE = 'PRIMARY KEY'
    where INDEX_Name like 'IX_%'
    order by Index_Name

END
GO
PRINT N'Creating [dbo].[aspdnsf_MakeStoreDefault]...';

GO

create procedure [dbo].[aspdnsf_MakeStoreDefault]
	@StoreID int
as
begin
	set nocount on;

	update Store set IsDefault = Case when(StoreId = @StoreId) then 1 else 0 end

end
GO
PRINT N'Creating [dbo].[aspdnsf_Map]...';

GO


/*********** begin update map sproc to handle all entities ******************************/
CREATE PROC [dbo].[aspdnsf_Map]
	@CreateMap BIT = null,
	@RemoveMap BIT = null,
	@Mapped BIT = null,
	@StoreID INT,
	@EntityID INT,
	@EntityType VARCHAR(100)

AS

IF @EntityType = 'Affiliate'
BEGIN
	INSERT INTO AffiliateStore (StoreID, AffiliateID)
	SELECT @StoreID, @EntityID
	WHERE
		COALESCE(@CreateMap, @Mapped, 0) = 1
		AND NOT EXISTS(SELECT * FROM AffiliateStore WHERE @StoreID = StoreID AND AffiliateID = @EntityID)

	DELETE FROM AffiliateStore
	WHERE
		COALESCE(@RemoveMap, ~@Mapped, 0) = 1
		AND AffiliateID = @EntityID
		AND StoreID = @StoreID
END
ELSE IF @EntityType = 'GiftCard'
BEGIN
	INSERT INTO GiftCardStore (StoreID, GiftCardID)
	SELECT @StoreID, @EntityID
	WHERE
		COALESCE(@CreateMap, @Mapped, 0) = 1
		AND NOT EXISTS(SELECT * FROM GiftCardStore WHERE @StoreID = StoreID AND GiftCardID = @EntityID)

	DELETE FROM GiftCardStore
	WHERE
		COALESCE(@RemoveMap, ~@Mapped, 0) = 1
		AND GiftCardID = @EntityID
		AND StoreID = @StoreID
END
ELSE IF @EntityType = 'News'
BEGIN
	INSERT INTO NewsStore(StoreID, NewsID)
	SELECT @StoreID, @EntityID
	WHERE
		COALESCE(@CreateMap, @Mapped, 0) = 1
		AND NOT EXISTS (SELECT * FROM NewsStore WHERE StoreID = @StoreID AND NewsID = @EntityID)

	DELETE FROM NewsStore
	WHERE
		COALESCE(@RemoveMap, ~@Mapped, 0) = 1
		AND NewsID = @EntityID
		AND StoreID = @StoreID
END
ELSE IF @EntityType='OrderOption'
BEGIN
	INSERT INTO OrderOptionStore(StoreID, OrderOptionID)
	SELECT @StoreID, @EntityID
	WHERE
		COALESCE(@CreateMap, @Mapped, 0) = 1
		AND NOT EXISTS (SELECT * FROM OrderOptionStore WHERE StoreID = @StoreID AND OrderOptionID = @EntityID)

	DELETE FROM OrderOptionStore
	WHERE
		COALESCE(@RemoveMap, ~@Mapped, 0) = 1
		AND OrderOptionID = @EntityID
		AND StoreID = @StoreID
END
ELSE IF @EntityType='Product'
BEGIN
	INSERT INTO ProductStore(StoreID, ProductID)
	SELECT @StoreID, @EntityID
	WHERE
		COALESCE(@CreateMap, @Mapped, 0) = 1
		AND NOT EXISTS (SELECT * FROM ProductStore WHERE StoreID = @StoreID AND ProductID = @EntityID)

	DELETE FROM ProductStore
	WHERE
		COALESCE(@RemoveMap, ~@Mapped, 0) = 1
		AND ProductID = @EntityID
		AND StoreID = @StoreID
END
ELSE IF @EntityType = 'Promotion'
BEGIN
	INSERT INTO PromotionStore (StoreID, PromotionID)
	SELECT @StoreID, @EntityID
	WHERE
		COALESCE(@CreateMap, @Mapped, 0) = 1
		AND NOT EXISTS(SELECT * FROM PromotionStore WHERE @StoreID = StoreID AND PromotionID = @EntityID)

	DELETE FROM PromotionStore
	WHERE
		COALESCE(@RemoveMap, ~@Mapped, 0) = 1
		AND PromotionID = @EntityID
		AND StoreID = @StoreID
END
ELSE IF @EntityType = 'ShippingMethod'
BEGIN
	INSERT INTO ShippingMethodStore (StoreId, ShippingMethodID)
	SELECT @StoreID, @EntityID
	WHERE
		COALESCE(@CreateMap, @Mapped, 0) = 1
		AND NOT EXISTS(SELECT * FROM ShippingMethodStore WHERE @StoreID = StoreId AND ShippingMethodID = @EntityID)

	DELETE FROM ShippingMethodStore
	WHERE
		COALESCE(@RemoveMap, ~@Mapped, 0) = 1
		AND ShippingMethodID = @EntityID
		AND StoreId = @StoreID
END
ELSE IF @EntityType = 'Topic'
BEGIN
	INSERT INTO TopicStore (StoreID, TopicID)
	SELECT @StoreID, @EntityID
	WHERE
		COALESCE(@CreateMap, @Mapped, 0) = 1
		AND NOT EXISTS(SELECT * FROM TopicStore WHERE @StoreID = StoreID AND TopicID = @EntityID)

	DELETE FROM TopicStore
	WHERE
		COALESCE(@RemoveMap, ~@Mapped, 0) = 1
		AND TopicID = @EntityID
		AND StoreID = @StoreID
END
ELSE
BEGIN
	INSERT INTO EntityStore (StoreID, EntityID, EntityType)
	SELECT @StoreID, @EntityID, @EntityType
	WHERE
		COALESCE(@CreateMap, @Mapped, 0) = 1
		AND NOT EXISTS(SELECT * FROM EntityStore WHERE StoreID = @StoreID AND EntityID = @EntityID  AND EntityType = @EntityType)

	DELETE FROM EntityStore
	WHERE
		COALESCE(@RemoveMap, ~@Mapped, 0) = 1
		AND StoreID = @StoreID
		AND EntityID = @EntityID
		AND EntityType = @EntityType
END
GO
PRINT N'Creating [dbo].[aspdnsf_MarkOrderAsFraud]...';

GO

create proc dbo.aspdnsf_MarkOrderAsFraud
    @ordernum int,
    @fraudstate int

AS
SET NOCOUNT ON
BEGIN
    if @fraudstate=1
        update orders set TransactionState='FRAUD', IsNew=0 where OrderNumber=@ordernum
    else
        update orders
        set TransactionState= case
                                when AuthorizedOn > isnull(CapturedOn, '1/1/1900')   and AuthorizedOn > isnull(RefundedOn, '1/1/1900')   and AuthorizedOn > isnull(VoidedOn, '1/1/1900')     then 'AUTHORIZED'
                                when CapturedOn   > isnull(AuthorizedOn, '1/1/1900') and CapturedOn   > isnull(RefundedOn, '1/1/1900')   and CapturedOn   > isnull(VoidedOn, '1/1/1900')     then 'CAPTURED'
                                when RefundedOn   > isnull(CapturedOn, '1/1/1900')   and RefundedOn   > isnull(AuthorizedOn, '1/1/1900') and RefundedOn   > isnull(VoidedOn, '1/1/1900')     then 'REFUNDED'
                                when VoidedOn     > isnull(CapturedOn, '1/1/1900')   and VoidedOn     > isnull(RefundedOn, '1/1/1900')   and VoidedOn     > isnull(AuthorizedOn, '1/1/1900') then 'VOIDED'
                              end,
            IsNew=0
        where OrderNumber=@ordernum
END
GO
PRINT N'Creating [dbo].[aspdnsf_MoveToShoppingCart]...';

GO

create proc [dbo].[aspdnsf_MoveToShoppingCart]
    @ShoppingCartRecId int,
    @CartType int

AS
SET NOCOUNT ON

DECLARE @custid int, @pid int, @vid int, @isakit tinyint, @color nvarchar(200), @size nvarchar(200), @text nvarchar(4000), @qty int

select @custid = s.Customerid, @pid = s.ProductID, @vid = variantid, @color = s.ChosenColor, @size = s.ChosenSize, @qty = s.Quantity, @text = convert(nvarchar(4000), TextOption), @isakit = p.IsAKit
from dbo.shoppingcart s with (nolock)
    join dbo.Product p with (nolock) on s.ProductID = p.ProductID
where s.ShoppingCartRecId = @ShoppingCartRecId and s.CartType = @CartType

if @isakit = 0 begin
    if exists (select * from dbo.shoppingcart with (nolock) where CustomerID=@custid and carttype = 0 and productid = @pid and variantid = @vid and ChosenColor = @color and ChosenSize = @size and convert(nvarchar(4000), TextOption) = @text) begin
        update dbo.shoppingcart set Quantity = Quantity + @qty,CreatedOn=getdate() where CustomerID=@custid and carttype = 0 and productid = @pid and variantid = @vid and ChosenColor = @color and ChosenSize = @size and convert(nvarchar(4000), TextOption) = @text
        delete dbo.shoppingcart where ShoppingCartRecId = @ShoppingCartRecId and CartType = @CartType
    end
    else begin
        update dbo.ShoppingCart set CartType = 0,CreatedOn=getdate() where ShoppingCartRecId = @ShoppingCartRecId and CartType = @CartType
    end
end
else begin
    update dbo.ShoppingCart set CartType = 0,CreatedOn=getdate() where ShoppingCartRecId = @ShoppingCartRecId and CartType = @CartType
    update dbo.KitCart set CartType = 0,CreatedOn=getdate() where ShoppingCartRecId = @ShoppingCartRecId and CartType = @CartType
end
GO
PRINT N'Creating [dbo].[aspdnsf_NukeProduct]...';

GO

create proc [dbo].[aspdnsf_NukeProduct]
    @ProductID int

AS
SET NOCOUNT ON
BEGIN


BEGIN TRAN
    DELETE dbo.ProductCategory WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ProductCategory could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.ProductDistributor WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ProductDistributor could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.ProductGenre WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ProductGenre could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.KitCart WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('KitCart could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.KitGroup WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('KitGroup could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.ProductManufacturer WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ProductManufacturer could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.ProductAffiliate WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ProductAffiliate could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.ProductCategory WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ProductCategory could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.ProductCustomerLevel WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ProductCustomerLevel could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.ProductLocaleSetting WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ProductLocaleSetting could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.ProductSection WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ProductSection could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.Rating WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('Rating could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.RatingCommentHelpfulness WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('RatingCommentHelpfulness could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.ShoppingCart WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ShoppingCart could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.ExtendedPrice FROM dbo.ExtendedPrice with (nolock) join [dbo].productvariant pv with (nolock) on ExtendedPrice.variantid = pv.variantid where pv.productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ExtendedPrice could not be deleted', 1, 16)
        rollback tran
        return
    end

    DELETE dbo.Inventory FROM dbo.Inventory with (nolock) join [dbo].productvariant pv with (nolock) on Inventory.variantid = pv.variantid where pv.productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('Inventory could not be deleted', 1, 16)
        rollback tran
        return
    end

    DELETE dbo.ProductVariant WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('ProductVariant could not be deleted', 1, 16)
        rollback tran
        return
    END

    DELETE dbo.Product WHERE productid = @productid
    IF @@ERROR <> 0 BEGIN
        raiserror('Product could not be deleted', 1, 16)
        rollback tran
        return
    END


COMMIT TRAN

END
GO
PRINT N'Creating [dbo].[aspdnsf_NukeStoreAffiliate]...';

GO


create procedure [dbo].[aspdnsf_NukeStoreAffiliate]
	@StoreID int
as
begin
	set nocount on;

	delete aa
	from AffiliateActivity aa
	inner join Affiliate af on aa.AffiliateID = af.AffiliateID
	inner join AffiliateStore afs on afs.AffiliateID = af.AffiliateID
	where dbo.UniquelyMapped(@StoreID, 'Affiliate', af.AffiliateID) = 1

	delete pa
	from ProductAffiliate pa
	inner join Affiliate af on pa.AffiliateID = af.AffiliateID
	inner join AffiliateStore afs on afs.AffiliateID = af.AffiliateID
	where dbo.UniquelyMapped(@StoreID, 'Affiliate', af.AffiliateID) = 1

	delete af
	from Affiliate af
	inner join AffiliateStore afs on afs.AffiliateID = af.AffiliateID
	where dbo.UniquelyMapped(@StoreID, 'Affiliate', af.AffiliateID) = 1

end
GO
PRINT N'Creating [dbo].[aspdnsf_NukeStoreCustomer]...';

GO


create procedure [dbo].[aspdnsf_NukeStoreCustomer]
		@StoreID int,
		@IncludeAdmins BIT = 0
	as
	begin
		set nocount on;

		delete pu
		from promotionusage pu
		inner join Customer c on pu.CustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete okc
		from orders_kitcart okc
		inner join Customer c on okc.CustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete osc
		from orders_ShoppingCart osc
		inner join Customer c on osc.CustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete o
		from orders o
		inner join Customer c on o.CustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete sc
		from ShoppingCart sc
		inner join Customer c on sc.CustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete ft
		from failedtransaction ft
		inner join Customer c on ft.CustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete kc
		from kitcart kc
		inner join Customer c on kc.CustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete rch
		from ratingcommenthelpfulness rch
		inner join Customer c on rch.RatingCustomerID = c.CustomerID or rch.VotingCustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete r
		from rating r
		inner join Customer c on r.CustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete a
		from Address a
		inner join Customer c on a.CustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete cs
		from CustomerSession cs
		inner join Customer c on cs.CustomerID = c.CustomerID
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

		delete c
		from Customer c
		where c.StoreID = @StoreID and (@IncludeAdmins = 0 and c.IsAdmin = 0) or (@IncludeAdmins = 1 and c.IsAdmin in (0, 1, 3))

	end
GO
PRINT N'Creating [dbo].[aspdnsf_NukeStoreMappings]...';

GO



CREATE PROC [dbo].[aspdnsf_NukeStoreMappings]
	@StoreID INT
	AS
	BEGIN
		DELETE FROM EntityStore WHERE StoreID = @StoreID
		DELETE FROM AffiliateStore WHERE StoreID = @StoreID
		DELETE FROM NewsStore WHERE StoreID = @StoreID
		DELETE FROM ProductStore WHERE StoreID = @StoreID
		DELETE FROM TopicStore WHERE StoreID = @StoreID
		DELETE FROM GiftCardStore WHERE StoreID = @StoreID
		DELETE FROM CouponStore WHERE StoreID = @StoreID
		DELETE FROM PromotionStore WHERE StoreID = @StoreID
		DELETE FROM OrderOptionStore WHERE StoreID = @StoreID
		DELETE FROM ShippingMethodStore WHERE StoreID = @StoreID

		-- only create additional configs/string resources for non-default stores
		declare @isDefault tinyint
		select @isDefault = IsDefault from Store WHERE StoreID = @StoreID
		if(@isDefault <> 1)
		begin
			DELETE FROM StringResource WHERE StoreID = @StoreID
			DELETE FROM AppConfig WHERE StoreID = @StoreID
		end
	END
GO
PRINT N'Creating [dbo].[aspdnsf_NukeStoreOrder]...';

GO


create procedure [dbo].[aspdnsf_NukeStoreOrder]
	@StoreID int
as
begin
	set nocount on;

	delete okc
	from Orders_KitCart okc
	inner join Orders o on o.OrderNumber = okc.OrderNumber
	where o.StoreId = @StoreId

	delete osc
	from Orders_ShoppingCart osc
	inner join Orders o on o.OrderNumber = osc.OrderNumber
	where o.StoreId = @StoreId

	delete o
	from Orders o
	where o.StoreId = @StoreId

end
GO
PRINT N'Creating [dbo].[aspdnsf_OrderAvgSummary]...';

GO


create proc [dbo].[aspdnsf_OrderAvgSummary]
@transactionstate nvarchar(100)

AS
BEGIN
SET NOCOUNT ON

SELECT case CountTodayOrders when 0 then 0 else SumTodayOrders/CountTodayOrders end Today,
case CountThisWeekOrders when 0 then 0 else SumThisWeekOrders/CountThisWeekOrders end ThisWeek,
case CountThisMonthOrders when 0 then 0 else SumThisMonthOrders/CountThisMonthOrders end ThisMonth,
case CountThisYearOrders when 0 then 0 else SumThisYearOrders/CountThisYearOrders end ThisYear,
AllTime
FROM
(

select sum(case when datediff(dy, OrderDate, getdate()) = 0 then OrderTotal else 0 end) SumTodayOrders,

sum(case when datediff(dy, OrderDate, getdate()) = 0 then 1 else 0 end) CountTodayOrders,
sum(case when datediff(wk, OrderDate, getdate()) = 0 then OrderTotal else 0 end) SumThisWeekOrders,
sum(case when datediff(wk, OrderDate, getdate()) = 0 then 1 else 0 end) CountThisWeekOrders,
sum(case when datediff(mm, OrderDate, getdate()) = 0 then OrderTotal else 0 end) SumThisMonthOrders,
sum(case when datediff(mm, OrderDate, getdate()) = 0 then 1 else 0 end) CountThisMonthOrders,
sum(case when datediff(yy, OrderDate, getdate()) = 0 then OrderTotal else 0 end) SumThisYearOrders,
sum(case when datediff(yy, OrderDate, getdate()) = 0 then 1 else 0 end) CountThisYearOrders,
avg(OrderTotal) AllTime

from dbo.Orders
where OrderTotal > 0 and TransactionState=@transactionstate

) a
END
GO
PRINT N'Creating [dbo].[aspdnsf_OrderSummary]...';

GO


CREATE proc [dbo].[aspdnsf_OrderSummary]
    @transactionstate nvarchar(100)

AS
BEGIN
SET NOCOUNT ON

SELECT case CountTodayOrder when 0 then 0 else SumTodayOrders/CountTodayOrder end Today,
        case CountThisWeekOrders when 0 then 0 else SumThisWeekOrders/CountThisWeekOrders end ThisWeek,
        case CountThisMonthOrders when 0 then 0 else SumThisMonthOrders/CountThisMonthOrders end ThisMonth,
        case CountThisYearOrders when 0 then 0 else SumThisWeekOrders/SumThisYearOrders end ThisYear,
        AllTime
FROM
(
    select sum(case when datediff(dy, OrderDate, getdate()) = 0 then OrderTotal else 0 end) SumTodayOrders,
            sum(case when datediff(dy, OrderDate,getdate()) = 0 then 1 else 0 end) CountTodayOrder,
            sum(case when datediff(wk, OrderDate, getdate()) = 0 then OrderTotal else 0 end) SumThisWeekOrders,
            sum(case when datediff(wk, OrderDate,getdate()) = 0 then 1 else 0 end) CountThisWeekOrders,
            sum(case when datediff(mm, OrderDate, getdate()) = 0 then OrderTotal else 0 end) SumThisMonthOrders,
            sum(case when datediff(mm,OrderDate,getdate()) = 0 then 1 else 0 end) CountThisMonthOrders,
            sum(case when datediff(yy, OrderDate, getdate()) = 0 then OrderTotal else 0 end) SumThisYearOrders,
            sum(case when datediff(yy, OrderDate,getdate()) = 0 then 1 else 0 end) CountThisYearOrders,
            avg(OrderTotal) AllTime
    from Orders
    where TransactionState=@transactionstate
) a

END
GO
PRINT N'Creating [dbo].[aspdnsf_PABPEraseCCInfo]...';

GO

CREATE PROCEDURE [dbo].[aspdnsf_PABPEraseCCInfo]
    @CartType int

AS
SET NOCOUNT ON
UPDATE [dbo].[Orders] SET CardNumber = NULL WHERE CardNumber IS NOT NULL

UPDATE [dbo].[Address] SET CardNumber = NULL
FROM [dbo].[Address] a LEFT JOIN (SELECT DISTINCT CustomerID FROM [dbo].[Shoppingcart] WHERE CartType = @CartType) b ON a.CustomerID = b.CustomerID
WHERE CardNumber IS NOT NULL AND b.CustomerID IS NULL
GO
PRINT N'Creating [dbo].[aspdnsf_PageQuery]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_PageQuery]
  @Select varchar(8000),
  @OrderBy varchar(2000),
  @PageNum int,
  @PageSize int,
  @StatsFirst int = 1

AS
SET NOCOUNT ON

BEGIN

declare @ColList varchar(8000);
declare @Where varchar(8000);
declare @i int;
declare @i2 int;
declare @tmp varchar(8000);
declare @dec varchar(8000);
declare @f varchar(100);
declare @d varchar(100);
declare @Symbol char(2);
declare @sTmp varchar(2000)
declare @SQL varchar(8000);
declare @Sort varchar(2000);

declare @StartRow int;
declare @EndRow int;
declare @Total int;

set @StartRow = ((@PageNum-1)* @PageSize)+1
set @EndRow = @StartRow + @PageSize - 1

--Print @Select


if ltrim(rtrim(@OrderBy))=''
begin
  Print @OrderBy
  set @i = charindex('order by',@Select)
  set @OrderBy = ltrim(rtrim(right(@Select,len(@Select)-@i-8)))
  Print @OrderBy
  set @Select = left(@Select,@i-1)
  Print @Select
end


create table #recCount(RecCount int)
exec('INSERT into #recCount (RecCount) select count(*) from ('+@Select+') a')
select @Total=RecCount from #recCount
drop table #recCount



set @Sort = @OrderBy + ', '
set @dec = ''
set @Where  = ''
set @SQL = ''

set @i = charindex(',' , @Sort)
while @i != 0
 begin
  set @tmp = left(@Sort,@i-1)
  set @i2 = charindex(' ', @tmp)

  set @f = case when @i2=0 then ltrim(rtrim(@tmp)) else ltrim(rtrim(left(@tmp,@i2-1))) end
  set @d = case when @i2=0 then '' else ltrim(rtrim(substring(@tmp,@i2+1,100))) end

  set @Sort = rtrim(ltrim(substring(@Sort,@i+1,100)))
  set @i = charindex(',', @Sort)
  set @symbol = case when @d = 'DESC' then '<' else '>' end +
                case when @i=0 then '=' else '' end

  set @dec = @dec + 'declare @' + @f + ' sql_variant; '
  set @ColList = isnull(replace(replace(@colList,'>','='),'<','=') + ' and ','') +
                 @f + ' ' + @Symbol + ' @' + @f
  set @Where = @Where + ' OR (' + @ColList + ') '
  set @SQL = @SQL + ', @' + @f + '= ' + @f
 end

set @SQL = @dec + ' ' +
           'SELECT top ' + convert(varchar(10), @StartRow) + ' ' + substring(@SQL,3,7000) + ' from (' + @Select + ') a ORDER BY ' +
           @OrderBy + '; ' +
           'select top ' + convert(varchar(10), 1 + @EndRow - @StartRow) + ' * from (' + @Select + ') a WHERE ' +
           substring(@Where,4,7000) + ' ORDER BY ' + @OrderBy


IF @StatsFirst = 1 BEGIN
    SELECT @Total TotalRows, ceiling(@Total*1.0/@PageSize) Pages
    exec(@SQL)
END
ELSE BEGIN
    exec(@SQL)
    SELECT @Total TotalRows, ceiling(@Total*1.0/@PageSize) Pages
END

--PRINT @SQL
END
GO
PRINT N'Creating [dbo].[aspdnsf_ProductInfo]...';

GO

CREATE PROCEDURE [dbo].[aspdnsf_ProductInfo]
    @ProductID          INT,
    @CustomerLevelID    INT,
    @DefaultVariantOnly TINYINT,
    @InvFilter          INT = 0,
    @AffiliateID        INT = null,
    @PublishedOnly      TINYINT = 1,
    @IsAdmin			TINYINT = 0,
    @StoreID			INT = 0
AS BEGIN
	SET NOCOUNT ON
	DECLARE
		@CustLevelExists INT,
		@AffiliateExists INT,
		@FilterProductsByAffiliate TINYINT,
		@FilterProductsByCustomerLevel TINYINT,
		@CustomerLevelFilteringIsAscending TINYINT,
		@CustomerLevelCount INT,
		@AffiliateCount INT,
		@MinProductCustomerLevel INT,
		@HideProductsWithLessThanThisInventoryLevel INT

		SET @FilterProductsByCustomerLevel = (SELECT TOP 1 CASE ConfigValue WHEN 'true' THEN 1 ELSE 0 END FROM dbo.AppConfig WITH (NOLOCK) WHERE Name = 'FilterProductsByCustomerLevel' AND (StoreID = @StoreID OR StoreID = 0) ORDER BY StoreID DESC)
		SET @CustomerLevelFilteringIsAscending= (SELECT TOP 1 CASE ConfigValue WHEN 'true' THEN 1 ELSE 0 END FROM dbo.AppConfig WITH (NOLOCK) WHERE Name = 'FilterByCustomerLevelIsAscending'	AND (StoreID = @StoreID OR StoreID = 0) ORDER BY StoreID DESC)
		SET @FilterProductsByAffiliate = (SELECT TOP 1 CASE ConfigValue WHEN 'true' THEN 1 ELSE 0 END FROM dbo.AppConfig WITH (NOLOCK) WHERE Name = 'FilterProductsByAffiliate' AND (StoreID = @StoreID OR StoreID = 0) ORDER BY StoreID DESC)
		SET @HideProductsWithLessThanThisInventoryLevel	= (SELECT TOP 1 CONVERT(INT, ConfigValue) FROM dbo.AppConfig WITH (NOLOCK) WHERE Name = 'HideProductsWithLessThanThisInventoryLevel' AND ISNUMERIC(ConfigValue) = 1 AND (StoreID = @StoreID OR StoreID = 0) ORDER BY StoreID DESC)
		SELECT @CustomerLevelCount = COUNT(*), @MinProductCustomerLevel = MIN(CustomerLevelID), @CustLevelExists = SUM(CASE WHEN CustomerLevelID = @CustomerLevelID THEN 1 ELSE 0 END) FROM dbo.ProductCustomerLevel WITH (NOLOCK) WHERE ProductID = @ProductID
		SELECT @AffiliateCount = COUNT(*), @AffiliateExists = SUM(CASE WHEN AffiliateID = @AffiliateID THEN 1 ELSE 0 END) FROM dbo.ProductAffiliate WITH (NOLOCK) WHERE ProductID = @ProductID

		IF (@HideProductsWithLessThanThisInventoryLevel > @InvFilter or @HideProductsWithLessThanThisInventoryLevel = -1) and @InvFilter <> 0
			SET @InvFilter = @HideProductsWithLessThanThisInventoryLevel

		IF
		(
			(
				(
					@FilterProductsByCustomerLevel = 0
					OR @CustomerLevelCount = 0
					OR (
						@CustomerLevelFilteringIsAscending = 1
						AND @MinProductCustomerLevel <= @CustomerLevelID)
					OR @CustLevelExists > 0
				)
				AND (
					@FilterProductsByAffiliate = 0
					OR @AffiliateCount = 0
					OR @AffiliateExists > 0)
			)
			OR @IsAdmin = 1
		)
		SELECT
			  p.*
			, pv.VariantID
			, pv.name VariantName
			, pv.Price
			, pv.Description VariantDescription
			, ISNULL(pv.SalePrice, 0) SalePrice
			, ISNULL(pv.SkuSuffix, '') AS SkuSuffix
			, ISNULL(pv.ManufacturerPartNumber, '') AS VariantManufacturerPartNumber
			, ISNULL(pv.Dimensions, '') AS Dimensions
			, pv.Weight
			, ISNULL(pv.GTIN, '') AS GTIN
			, pv.Condition
			, ISNULL(pv.Points, 0) Points
			, pv.Inventory
			, pv.ImageFilenameOverride VariantImageFilenameOverride
			, pv.isdefault
			, pv.CustomerEntersPrice
			, ISNULL(pv.colors, '') Colors
			, ISNULL(pv.sizes, '') Sizes
			, sp.name SalesPromptName
			, CASE WHEN pcl.productid is null THEN 0 ELSE ISNULL(e.Price, 0) END ExtendedPrice
			, PRODUCTMANUFACTURER.ManufacturerID AS ProductManufacturerId
			, MANUFACTURER.Name AS ProductManufacturerName
			, MANUFACTURER.SEName AS ProductManufacturerSEName
		 FROM dbo.Product p WITH (NOLOCK)
		 JOIN dbo.productvariant pv WITH (NOLOCK) ON p.ProductID = pv.ProductID
		 JOIN dbo.SalesPrompt sp WITH (NOLOCK) ON p.SalesPromptID = sp.SalesPromptID
	LEFT JOIN dbo.ExtendedPrice e WITH (NOLOCK) ON pv.VariantID=e.VariantID and e.CustomerLevelID = @CustomerLevelID
	LEFT JOIN dbo.ProductCustomerLevel pcl WITH (NOLOCK) ON p.ProductID = pcl.ProductID and pcl.CustomerLevelID = @CustomerLevelID
	LEFT JOIN (SELECT variantid, SUM(quan) inventory
				 FROM inventory
			 GROUP BY variantid) i on pv.variantid = i.variantid
	LEFT JOIN dbo.PRODUCTMANUFACTURER WITH (NOLOCK) ON p.ProductID = PRODUCTMANUFACTURER.ProductID
	LEFT JOIN dbo.MANUFACTURER WITH (NOLOCK) ON PRODUCTMANUFACTURER.ManufacturerID = MANUFACTURER.ManufacturerID
	    WHERE p.ProductID = @ProductID
		  AND p.Deleted = 0
		  AND pv.Deleted = 0
		  AND p.Published >= @PublishedOnly
		  AND pv.Published >= @PublishedOnly
		  AND pv.IsDefault >= @DefaultVariantOnly
		  AND (CASE p.TrackInventoryBySizeAndColor WHEN 1 THEN ISNULL(i.inventory, 0) ELSE pv.inventory END >= @InvFilter or @InvFilter = 0)
     ORDER BY pv.DisplayOrder, pv.name
END
GO
PRINT N'Creating [dbo].[aspdnsf_ProductStats]...';

GO


CREATE proc [dbo].[aspdnsf_ProductStats]
    @ProductID	int,
	@storeID	int = 1

AS
BEGIN
    SET NOCOUNT ON

    SELECT *
    FROM dbo.product p with (nolock)
        left join (SELECT ProductID,count(rating) as NumRatings, sum(rating) as SumRatings, convert(decimal(4,3), avg(rating*1.0)) AvgRating
                   FROM dbo.Rating with (nolock)
                   WHERE ProductID = @ProductID and StoreID = @storeID
                   GROUP BY ProductID) ps on p.productid = ps.productid
    WHERE p.ProductID = @ProductID
END
GO
PRINT N'Creating [dbo].[aspdnsf_RecentAdditions]...';

GO


create proc [dbo].[aspdnsf_RecentAdditions]
    @since			int = 180,  -- products added in the last "@since" number of days
    @return			int = 10,   -- returns the top "@returns" items
    @storeID		int = 1,
	@filterProduct	bit = 0


AS
BEGIN
SET NOCOUNT ON

DECLARE @cmd varchar(200)

CREATE TABLE #tmp (id int not null identity, ProductID int, VariantID int, SKU nvarchar(50), SKUSuffix nvarchar(50), ProductName nvarchar(400), SEName nvarchar(150), VariantName nvarchar(400),ImageFilenameOverride nvarchar(max))
INSERT #tmp (ProductID, VariantID, SKU, SKUSuffix, ProductName, SEName, VariantName,ImageFilenameOverride)
SELECT
    p.ProductID,
    pv.VariantID,
    p.SKU,
    isnull(pv.SKUSuffix, '') SKUSuffix,
    p.Name,
    p.SEName,
    isnull(pv.Name, '') VariantName,
    ISNULL(p.ImageFilenameOverride, '') AS ImageFilenameOverride
FROM dbo.Product p with (nolock)
    join [dbo].ProductVariant pv with (nolock) on pv.productid = p.productid
    inner join (select distinct a.ProductID from Product a with (nolock) left join ProductStore b with (nolock) on a.ProductID = b.ProductID where (@filterProduct = 0 or StoreID = @storeID)) b on p.ProductID = b.ProductID
WHERE p.CreatedOn >= dateadd(dy, -@since, getdate())
    and p.Deleted = 0
    and p.Published = 1
    and pv.Published = 1
    and pv.Deleted = 0
ORDER BY p.CreatedOn desc

SET @cmd = 'select top ' + convert(varchar(10), @return ) + ' * FROM #tmp order by id'

EXEC (@cmd)
END
GO
PRINT N'Creating [dbo].[aspdnsf_ReloadCart]...';

GO

CREATE proc [dbo].[aspdnsf_ReloadCart]
    @CartXML nvarchar(max)

AS
BEGIN
    SET NOCOUNT ON

    DECLARE @tmpShoppingCart TABLE (                                                                             [CustomerID] [int] NOT NULL , [ProductSKU] [nvarchar] (100) NULL , [ProductPrice] [money] NULL , [ProductWeight] [money] NULL , [ProductID] [int] NOT NULL , [VariantID] [int] NOT NULL , [Quantity] [int] NOT NULL , [ChosenColor] [nvarchar] (100) NULL , [ChosenColorSKUModifier] [nvarchar] (50) NULL , [ChosenSize] [nvarchar] (100) NULL , [ChosenSizeSKUModifier] [nvarchar] (50) NULL , [IsTaxable] [tinyint] NOT NULL , [IsShipSeparately] [tinyint] NOT NULL , [IsDownload] [tinyint] NOT NULL , [DownloadLocation] [nvarchar](max) NULL , [CreatedOn] [datetime] NOT NULL , [ProductDimensions] [nvarchar] (100) NULL , [CartType] [int] NOT NULL , [IsSecureAttachment] [tinyint] NOT NULL , [TextOption] [nvarchar](max) NULL , [NextRecurringShipDate] [datetime] NULL , [RecurringIndex] [int] NOT NULL , [OriginalRecurringOrderNumber] [int] NULL , [RecurringSubscriptionID] [nvarchar](100) NOT NULL, [BillingAddressID] [int] NULL , [ShippingAddressID] [int] NULL , [ShippingMethodID] [int] NULL , [ShippingMethod] [nvarchar] (max) NULL , [DistributorID] [int] NULL , [Notes] [nvarchar] (max) NULL , [IsUpsell] [tinyint] NOT NULL , [RecurringInterval] [int] NOT NULL , [RecurringIntervalType] [int] NOT NULL , [ExtensionData] [nvarchar] (max) NULL, [FreeShipping] [tinyint] NOT NULL, [CustomerEntersPrice] [tinyint] NOT NULL, [IsAKit] [tinyint] NULL)
    DECLARE @tmpShoppingCart2 TABLE (oldCartID int not null,  [ShoppingCartRecGUID] [uniqueidentifier] NOT NULL, [CustomerID] [int] NOT NULL , [ProductSKU] [nvarchar] (100) NULL , [ProductPrice] [money] NULL , [ProductWeight] [money] NULL , [ProductID] [int] NOT NULL , [VariantID] [int] NOT NULL , [Quantity] [int] NOT NULL , [ChosenColor] [nvarchar] (100) NULL , [ChosenColorSKUModifier] [nvarchar] (50) NULL , [ChosenSize] [nvarchar] (100) NULL , [ChosenSizeSKUModifier] [nvarchar] (50) NULL , [IsTaxable] [tinyint] NOT NULL , [IsShipSeparately] [tinyint] NOT NULL , [IsDownload] [tinyint] NOT NULL , [DownloadLocation] [nvarchar](max) NULL , [CreatedOn] [datetime] NOT NULL , [ProductDimensions] [nvarchar] (100) NULL , [CartType] [int] NOT NULL , [IsSecureAttachment] [tinyint] NOT NULL , [TextOption] [nvarchar](max) NULL , [NextRecurringShipDate] [datetime] NULL , [RecurringIndex] [int] NOT NULL , [OriginalRecurringOrderNumber] [int] NULL , [RecurringSubscriptionID] [nvarchar](100) NOT NULL, [BillingAddressID] [int] NULL , [ShippingAddressID] [int] NULL , [ShippingMethodID] [int] NULL , [ShippingMethod] [nvarchar] (max) NULL , [DistributorID] [int] NULL , [Notes] [nvarchar] (max) NULL , [IsUpsell] [tinyint] NOT NULL , [RecurringInterval] [int] NOT NULL , [RecurringIntervalType] [int] NOT NULL , [ExtensionData] [nvarchar] (max) NULL, [FreeShipping] [tinyint] NOT NULL, [CustomerEntersPrice] [tinyint] NOT NULL, [IsAKit] [tinyint] NULL)
    DECLARE @tmpCart TABLE (cartid int not null, addressid int not null, qty  int not null)
    DECLARE @tmp1 TABLE ( [CustomerID] [int] NOT NULL , [CartType] [int] NOT NULL , [ProductID] [int] NOT NULL , [VariantID] [int] NOT NULL , [ChosenColor] [nvarchar] (100) NULL , [ChosenSize] [nvarchar] (100) NULL ,[TextOption] [nvarchar](max) NULL , [ShippingAddressID] [int] NULL , [Qty] [int] NOT NULL )
    DECLARE @tmp2 TABLE ([cartid] [int] NOT NULL )

    DECLARE @hdoc int, @retcode int
    EXEC @retcode = sp_xml_preparedocument
                        @hdoc OUTPUT,
                        @CartXML

    INSERT @tmpCart (cartid, addressid, qty)
    SELECT cartid, addressid, count(*)
    FROM OPENXML(@hdoc, '/root/row', 0) WITH (cartid int, addressid int)
    GROUP BY cartid, addressid

    DECLARE @custid int, @carttype int

    SELECT top 1 @custid = CustomerID, @carttype = CartType
    FROM dbo.ShoppingCart s with (nolock)
            join @tmpCart c on s.ShoppingCartRecID = c.cartid


    --creates cart item/shipping address combinations
    INSERT @tmpShoppingCart
    SELECT CustomerID, ProductSKU, ProductPrice, ProductWeight, ProductID,VariantID, c.qty quantity, ChosenColor, ChosenColorSKUModifier, ChosenSize,ChosenSizeSKUModifier, IsTaxable, IsShipSeparately, IsDownload,DownloadLocation, CreatedOn, ProductDimensions, CartType,IsSecureAttachment, TextOption, NextRecurringShipDate, RecurringIndex,OriginalRecurringOrderNumber, RecurringSubscriptionID, BillingAddressID,c.addressid ShippingAddressID, ShippingMethodID, ShippingMethod,DistributorID, Notes,IsUpsell, RecurringInterval,RecurringIntervalType, ExtensionData, s.FreeShipping, s.CustomerEntersPrice, s.IsAKit
    FROM dbo.ShoppingCart s
        join @tmpCart c on s.ShoppingCartRecID = c.cartid



    -- combines like items based on the fields in the group by clause
    INSERT @tmp1
    SELECT customerid, carttype, productid, variantid, chosencolor, chosensize, convert(nvarchar(4000), textoption) textoption, shippingaddressid, sum(quantity)
    FROM @tmpShoppingCart
    GROUP BY customerid,carttype,productid,variantid,chosencolor,chosensize,convert(nvarchar(4000), textoption),shippingaddressid


    -- gets original cartID for restricting new cart items
    INSERT @tmp2
    SELECT min(ShoppingCartRecID) cartid
    FROM dbo.ShoppingCart
    WHERE customerid = @custid and carttype = @carttype
    GROUP BY customerid, carttype, productid, variantid, chosencolor, chosensize, convert(nvarchar(4000), textoption)


    -- create new cart records
    INSERT @tmpShoppingCart2 (oldCartID, ShoppingCartRecGUID, CustomerID,ProductSKU, ProductPrice, ProductWeight, ProductID, VariantID, Quantity,ChosenColor, ChosenColorSKUModifier, ChosenSize, ChosenSizeSKUModifier,IsTaxable, IsShipSeparately, IsDownload, DownloadLocation, CreatedOn,ProductDimensions, CartType, IsSecureAttachment, TextOption,NextRecurringShipDate, RecurringIndex, OriginalRecurringOrderNumber,RecurringSubscriptionID, BillingAddressID, ShippingAddressID,ShippingMethodID, ShippingMethod, DistributorID, Notes, IsUpsell, RecurringInterval, RecurringIntervalType, ExtensionData, FreeShipping, CustomerEntersPrice, IsAKit)
    SELECT c.cartid, newid(), s.CustomerID, s.ProductSKU, s.ProductPrice,s.ProductWeight, s.ProductID, s.VariantID, a.qty, s.ChosenColor,s.ChosenColorSKUModifier, s.ChosenSize, s.ChosenSizeSKUModifier,s.IsTaxable, s.IsShipSeparately, s.IsDownload, s.DownloadLocation,s.CreatedOn, s.ProductDimensions, s.CartType, s.IsSecureAttachment,s.TextOption, s.NextRecurringShipDate, s.RecurringIndex,s.OriginalRecurringOrderNumber, s.RecurringSubscriptionID,s.BillingAddressID, a.shippingaddressid, s.ShippingMethodID,s.ShippingMethod, s.DistributorID, '', s.IsUpsell, s.RecurringInterval, s.RecurringIntervalType, s.ExtensionData, s.FreeShipping, s.CustomerEntersPrice, s.IsAKit
    FROM dbo.ShoppingCart s
        join @tmp1 a
            on s.customerid = a.customerid and
               s.carttype = a.carttype and
               s.productid = a.productid and
               s.variantid = a.variantid and
               s.chosencolor = a.chosencolor and
               s.chosensize = a.chosensize and
               convert(nvarchar(4000), s.textoption)  = convert(nvarchar(4000), a.textoption)
        join @tmp2 c on s.ShoppingCartRecID = c.cartid


    BEGIN TRAN
        INSERT [dbo].ShoppingCart (ShoppingCartRecGUID, CustomerID,ProductSKU, ProductPrice, ProductWeight, ProductID, VariantID, Quantity,ChosenColor, ChosenColorSKUModifier, ChosenSize, ChosenSizeSKUModifier,IsTaxable, IsShipSeparately, IsDownload, DownloadLocation, CreatedOn,ProductDimensions, CartType, IsSecureAttachment, TextOption,NextRecurringShipDate, RecurringIndex, OriginalRecurringOrderNumber,RecurringSubscriptionID, BillingAddressID, ShippingAddressID,ShippingMethodID, ShippingMethod, DistributorID, Notes, IsUpsell, RecurringInterval, RecurringIntervalType, ExtensionData, FreeShipping, CustomerEntersPrice, IsAKit)
        SELECT ShoppingCartRecGUID, CustomerID, ProductSKU, ProductPrice,ProductWeight, ProductID, VariantID, Quantity, ChosenColor,ChosenColorSKUModifier, ChosenSize, ChosenSizeSKUModifier, IsTaxable,IsShipSeparately, IsDownload, DownloadLocation, CreatedOn,ProductDimensions, CartType, IsSecureAttachment, TextOption,NextRecurringShipDate, RecurringIndex, OriginalRecurringOrderNumber,RecurringSubscriptionID, BillingAddressID, ShippingAddressID,ShippingMethodID, ShippingMethod, DistributorID, Notes, IsUpsell, RecurringInterval, RecurringIntervalType, ExtensionData, FreeShipping, CustomerEntersPrice, IsAKit
        FROM @tmpShoppingCart2

        IF @@Error <>0 BEGIN
            ROLLBACK TRAN
            RAISERROR('Could not add new shopping cart records', 16, 1)
            RETURN -1
        END



        INSERT [dbo].KitCart(CustomerID, ShoppingCartRecID, ProductID,VariantID, KitGroupID, KitGroupTypeID, KitItemID, TextOption, Quantity,CartType, OriginalRecurringOrderNumber, ExtensionData, InventoryVariantID, InventoryVariantColor,InventoryVariantSize, CreatedOn)
        SELECT k.CustomerID, s.ShoppingCartRecID, k.ProductID, k.VariantID,k.KitGroupID, k.KitGroupTypeID, k.KitItemID, k.TextOption, k.Quantity,k.CartType, k.OriginalRecurringOrderNumber, k.ExtensionData, k.InventoryVariantID, k.InventoryVariantColor,k.InventoryVariantSize, k.CreatedOn
        FROM dbo.KitCart k
            join @tmpShoppingCart2 c on k.ShoppingCartRecID = c.oldCartID
            join [dbo].ShoppingCart s with (nolock) on s.ShoppingCartRecGUID = c.ShoppingCartRecGUID

        IF @@Error <>0 BEGIN
            ROLLBACK TRAN
            RAISERROR('Could not add new kit cart records', 16, 1)
            RETURN -2
        END


        DELETE dbo.ShoppingCart
        FROM dbo.ShoppingCart s
            join @tmpCart c on s.ShoppingCartRecID = c.cartid

        IF @@Error <>0 BEGIN
            ROLLBACK TRAN
            RAISERROR('Could not delete old shopping cart records', 16, 1)
            RETURN -4
        END

        DELETE dbo.KitCart
        FROM dbo.KitCart s
            join @tmpCart c on s.ShoppingCartRecID = c.cartid

        IF @@Error <>0 BEGIN
            ROLLBACK TRAN
            RAISERROR('Could not delete old kit cart records', 16, 1)
            RETURN -5
        END

    COMMIT TRAN

    exec sp_xml_removedocument @hdoc
END
GO
PRINT N'Creating [dbo].[aspdnsf_RemoveDuplicateAppConfigs]...';

GO


create proc [dbo].[aspdnsf_RemoveDuplicateAppConfigs]
as
BEGIN
    delete from [dbo].appconfig where appconfigid in (select max(AppConfigID) as AppConfigID from AppConfig where name in (select name from appconfig group by name having count(name) > 1)  group by name)
end
GO
PRINT N'Creating [dbo].[aspdnsf_ResetAllProductVariantDefaults]...';

GO


create proc [dbo].[aspdnsf_ResetAllProductVariantDefaults]

as
BEGIN
    SET NOCOUNT ON

    update dbo.ProductVariant set IsDefault=0
    update dbo.ProductVariant
    set IsDefault=1
    from dbo.ProductVariant pv
        join ( select distinct p.ProductID,pv.VariantID
               from Product p
               join ProductVariant pv on p.ProductID=pv.ProductID
               where pv.VariantID in (SELECT top 1 VariantID from ProductVariant where ProductID=p.ProductID and ProductVariant.Deleted=0 order by DisplayOrder,Name)
               and p.Deleted=0
             ) a on pv.VariantID = a.VariantID

END
GO
PRINT N'Creating [dbo].[aspdnsf_SalesForChart]...';

GO

--New sprocs for the splash page graphs


CREATE PROCEDURE [dbo].[aspdnsf_SalesForChart]
    @StartDate DATETIME,
    @EndDate DATETIME,
    @NumIntervals INT
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @Totals TABLE (EndDate DATETIME, Sales MONEY)
	DECLARE @SecondInterval INT
	DECLARE @ThisIntervalStart DATETIME
	DECLARE @ThisIntervalStop DATETIME
	DECLARE @CurrentInterval INT
	DECLARE @ThisIntervalValue MONEY

	SET @ThisIntervalStop = @EndDate
	SET @CurrentInterval = 0
	SET @SecondInterval = DATEDIFF(second,@StartDate,@EndDate) / @NumIntervals
	SET @ThisIntervalStart = DATEADD(second,-@SecondInterval,@EndDate)

	WHILE @CurrentInterval < @NumIntervals
	BEGIN
		SELECT @ThisIntervalValue = SUM(OrderTotal)
		FROM Orders
		WHERE Orders.OrderDate > @ThisIntervalStart
			AND Orders.OrderDate < @ThisIntervalStop
			AND Orders.TransactionState = 'CAPTURED'
			AND Orders.Deleted = 0

		INSERT INTO @Totals VALUES(@ThisIntervalStop, ISNULL(@ThisIntervalValue,0))

		SET @CurrentInterval = @CurrentInterval + 1
		SET @ThisIntervalStop = DATEADD(second,-@SecondInterval,@ThisIntervalStop)
		SET @ThisIntervalStart = DATEADD(second,-@SecondInterval,@ThisIntervalStop)
	END

SELECT * FROM @Totals ORDER BY EndDate
END
GO
PRINT N'Creating [dbo].[aspdnsf_SaveKitGroup]...';

GO
create procedure [dbo].[aspdnsf_SaveKitGroup] (
	@KitGroupID int,
	@Name nvarchar(400),
	@Description nvarchar(max),
	@Summary nvarchar(max),
	@ProductID int,
	@DisplayOrder int,
	@KitGroupTypeID int,
	@IsRequired bit,
	@IsReadOnly bit,
	@SavedID int OUTPUT)

AS
BEGIN
	IF(EXISTS(SELECT * FROM KitGroup WITH (NOLOCK) WHERE KitGroupID = @KitGroupID))
	BEGIN
		UPDATE KitGroup SET
			[Name] = @Name,
			Description = @Description,
			Summary = @Summary,
			ProductID = @ProductID,
			DisplayOrder = @DisplayOrder,
			KitGroupTypeID = @KitGroupTypeID,
			IsRequired = @IsRequired,
			IsReadOnly = @IsReadOnly
		WHERE KitGroupID = @KitGroupID

		SET @SavedID = @KitGroupID

	END
	ELSE
	BEGIN
		INSERT INTO KitGroup(
			KitGroupGUID,
			[Name],
			Description,
			Summary,
			ProductID,
			DisplayOrder,
			KitGroupTypeID,
			IsRequired,
			IsReadOnly,
			CreatedOn)
		VALUES (
			newid(),
			@Name,
			@Description,
			@Summary,
			@ProductID,
			@DisplayOrder,
			@KitGroupTypeID,
			@IsRequired,
			@IsReadOnly,
			getdate())

		SET @SavedID = SCOPE_IDENTITY()
	END
END
GO
PRINT N'Creating [dbo].[aspdnsf_SaveKitItem]...';

GO
create procedure [dbo].[aspdnsf_SaveKitItem](
	@KitItemID int,
	@KitGroupID int,
	@Name nvarchar(400),
	@Description nvarchar(max),
	@PriceDelta money,
	@WeightDelta money,
	@IsDefault bit,
	@DisplayOrder int,
	@InventoryVariantID int,
	@InventoryQuantityDelta int,
	@InventoryVariantColor nvarchar(100),
	@InventoryVariantSize nvarchar(100),
	@SavedID int OUTPUT
)

AS
BEGIN

	IF EXISTS(SELECT * FROM KitItem WITH(NOLOCK) WHERE KitItemId = @KitItemId )
	BEGIN
		UPDATE KitItem SET
			KitGroupID = @KitGroupID,
			[Name] = @Name,
			Description = @Description,
			PriceDelta = @PriceDelta,
			WeightDelta = @WeightDelta,
			IsDefault = @IsDefault,
			DisplayOrder = @DisplayOrder,
			InventoryVariantID = @InventoryVariantID,
			InventoryQuantityDelta = @InventoryQuantityDelta,
			InventoryVariantColor = @InventoryVariantColor,
			InventoryVariantSize = @InventoryVariantSize
		WHERE KitItemID = @KitItemID

		SET @SavedID = @KitItemId
	END
	ELSE
	BEGIN

		INSERT INTO KitItem( KitItemGUID,
			KitGroupID,
			[Name],
			Description,
			PriceDelta,
			WeightDelta,
			IsDefault,
			DisplayOrder,
			InventoryVariantID,
			InventoryQuantityDelta,
			InventoryVariantColor,
			InventoryVariantSize,
			CreatedOn)
		VALUES ( newid(),
			@KitGroupID,
			@Name,
			@Description,
			@PriceDelta,
			@WeightDelta,
			@IsDefault,
			@DisplayOrder,
			@InventoryVariantID,
			@InventoryQuantityDelta,
			@InventoryVariantColor,
			@InventoryVariantSize,
			getdate() )

		SET @SavedID = SCOPE_IDENTITY()

	END

END
GO
PRINT N'Creating [dbo].[aspdnsf_SaveMap]...';

GO

create procedure [dbo].[aspdnsf_SaveMap]
	@StoreID INT,
	@EntityID INT,
	@EntityType NVARCHAR(50),
	@Map BIT
	AS
	BEGIN
		-- Add Mapping Information
		if(@map = 1)
		begin

			IF @EntityType='Product'
			begin
				IF NOT EXISTS (SELECT * FROM ProductStore WHERE StoreID = @StoreID AND ProductID = @EntityID)
				begin
					INSERT INTO ProductStore(StoreID, ProductID) VALUES (@StoreID, @EntityID)
				end
			end
			else IF @EntityType in ('Category', 'Manufacturer', 'Section')
			begin
				IF NOT EXISTS (SELECT * FROM EntityStore WHERE StoreID = @StoreID AND EntityId = @EntityID and EntityType = @EntityType)
				begin
					INSERT INTO EntityStore(StoreID, EntityType, EntityId) VALUES (@StoreID, @EntityType, @EntityID)
				end
			end
			else IF @EntityType='ShippingMethod'
			begin
				IF NOT EXISTS (SELECT * FROM ShippingMethodStore WHERE StoreID = @StoreID AND ShippingMethodId = @EntityID)
				begin
					INSERT INTO ShippingMethodStore(StoreID, ShippingMethodId) VALUES (@StoreID, @EntityID)
				end
			end
			else IF @EntityType = 'Topic'
			begin
				IF NOT EXISTS(SELECT * FROM TopicStore WHERE @StoreID = StoreID AND TopicID = @EntityID)
				begin
					INSERT INTO TopicStore (StoreID, TopicID) VALUES (@StoreID, @EntityID)
				end
			end
			else IF @EntityType = 'News'
			begin
				IF NOT EXISTS (SELECT * FROM NewsStore WHERE StoreID = @StoreID AND NewsID = @EntityID)
				begin
					INSERT INTO NewsStore(StoreID, NewsID) VALUES (@StoreID, @EntityID)
				end
			end
			else IF @EntityType='OrderOption'
			begin
				IF NOT EXISTS (SELECT * FROM OrderOptionStore WHERE StoreID = @StoreID AND OrderOptionID = @EntityID)
				begin
					INSERT INTO OrderOptionStore(StoreID, OrderOptionID) VALUES (@StoreID, @EntityID)
				end
			end
			else IF @EntityType='GiftCard'
			begin
				IF NOT EXISTS (SELECT * FROM GiftCardStore WHERE StoreID = @StoreID AND GiftCardId = @EntityID)
				begin
					INSERT INTO GiftCardStore(StoreID, GiftCardId) VALUES (@StoreID, @EntityID)
				end
			end
			else IF @EntityType='Affiliate'
			begin
				IF NOT EXISTS (SELECT * FROM AffiliateStore WHERE StoreID = @StoreID AND AffiliateID = @EntityID)
				begin
					INSERT INTO AffiliateStore(StoreID, AffiliateID) VALUES (@StoreID, @EntityID)
				end
			end
			else IF @EntityType='Coupon'
			begin
				IF NOT EXISTS (SELECT * FROM CouponStore WHERE StoreID = @StoreID AND CouponID = @EntityID)
				begin
					INSERT INTO CouponStore(StoreID, CouponID) VALUES (@StoreID, @EntityID)
				end
			end
			else IF @EntityType='Promotion'
			begin
				IF NOT EXISTS (SELECT * FROM PromotionStore WHERE StoreID = @StoreID AND PromotionId = @EntityID)
				begin
					INSERT INTO PromotionStore(StoreID, PromotionId) VALUES (@StoreID, @EntityID)
				end
			end
		end
		-- Remove Mapping Information if any
		else if (@map = 0)
		begin

			IF @EntityType='Product'
			begin
				DELETE FROM ProductStore WHERE ProductID = @EntityID AND StoreID = @StoreID
			end
			else IF @EntityType in ('Category', 'Manufacturer', 'Section')
			begin
				DELETE FROM EntityStore WHERE EntityId = @EntityID AND StoreID = @StoreID and EntityType = @EntityType
			end
			else IF @EntityType = 'ShippingMethod'
			begin
				DELETE FROM ShippingMethodStore WHERE ShippingMethodID = @EntityID AND StoreID = @StoreID
			end
			else IF @EntityType = 'Topic'
			begin
				DELETE FROM TopicStore WHERE TopicID = @EntityID AND StoreID = @StoreID
			end
			else IF @EntityType = 'News'
			begin
				DELETE FROM NewsStore WHERE NewsID = @EntityID AND StoreID = @StoreID
			end
			else IF @EntityType='OrderOption'
			begin
				DELETE FROM OrderOptionStore WHERE OrderOptionID = @EntityID AND StoreID = @StoreID
			end
			else IF @EntityType='GiftCard'
			begin
				DELETE FROM GiftCardStore WHERE GiftCardId = @EntityID AND StoreID = @StoreID
			end
			else IF @EntityType='Affiliate'
			begin
				DELETE FROM AffiliateStore WHERE AffiliateId = @EntityID AND StoreID = @StoreID
			end
			else IF @EntityType='Coupon'
			begin
				DELETE FROM CouponStore WHERE CouponID = @EntityID AND StoreID = @StoreID
			end
			else IF @EntityType='Promotion'
			begin
				DELETE FROM PromotionStore WHERE PromotionID = @EntityID AND StoreID = @StoreID
			end
		end
	END
GO
PRINT N'Creating [dbo].[aspdnsf_SearchCategories]...';

GO


create proc [dbo].[aspdnsf_SearchCategories]
    @SearchTerm nvarchar(3000),
    @CategoryID int = null,
    @storeID	int = 1,
    @filterEntity bit


AS
BEGIN
SET NOCOUNT ON

    SET @SearchTerm = '%' + rtrim(ltrim(@SearchTerm)) + '%'
    SET @CategoryID = nullif(@CategoryID, 0)

    SELECT a.*
    FROM dbo.Category a with (NOLOCK)
    inner join (SELECT DISTINCT CategoryID EntityID FROM Category A WITH (NOLOCK) LEFT JOIN EntityStore B WITH (NOLOCK) ON A.CategoryID = B.EntityID AND EntityType = 'Category' WHERE (@filterEntity = 0 or StoreID = @storeID)) B ON A.CategoryID = B.EntityID
    WHERE a.name like @SearchTerm
        and Published <> 0
        and Deleted = 0
        and CategoryID = coalesce(@CategoryID, CategoryID)
        and CategoryID in (select distinct CategoryID
                           from dbo.ProductCategory   with (NOLOCK)
                           where ProductID in
                                (select ProductID
                                 from dbo.Product   with (NOLOCK)
                                 where Deleted=0 and Published=1
                                )
                          )
    ORDER BY DisplayOrder, Name

END
GO
PRINT N'Creating [dbo].[aspdnsf_SearchDistributors]...';

GO



create proc [dbo].[aspdnsf_SearchDistributors]
    @SearchTerm		nvarchar(3000),
    @DistributorID	int = null,
    @storeID		int = 1,
    @filterEntity bit


AS
BEGIN
SET NOCOUNT ON

    SET @SearchTerm = '%' + rtrim(ltrim(@SearchTerm)) + '%'
    SET @DistributorID = nullif(@DistributorID, 0)

    SELECT *
    FROM dbo.Distributor a with (NOLOCK)
    inner join (SELECT DISTINCT DistributorID EntityID FROM Distributor A WITH (NOLOCK) LEFT JOIN EntityStore B WITH (NOLOCK) ON A.DistributorID = B.EntityID AND EntityType = 'Distributor' WHERE (@filterEntity = 0 or StoreID = @storeID)) B ON A.DistributorID = B.EntityID
    WHERE deleted=0
        and name like @SearchTerm
        and DistributorID = coalesce(@DistributorID, DistributorID)
END
GO
PRINT N'Creating [dbo].[aspdnsf_SearchGenres]...';

GO


create proc [dbo].[aspdnsf_SearchGenres]
    @SearchTerm nvarchar(3000),
    @GenreID int = null,
    @storeID		int = 1,
    @filterEntity bit


AS
BEGIN
SET NOCOUNT ON

    SET @SearchTerm = '%' + rtrim(ltrim(@SearchTerm)) + '%'
    SET @GenreID = nullif(@GenreID, 0)

    SELECT *
    FROM dbo.Genre a with (NOLOCK)
    inner join (SELECT DISTINCT GenreID EntityID FROM Genre A WITH (NOLOCK) LEFT JOIN EntityStore B WITH (NOLOCK) ON A.GenreID = B.EntityID AND EntityType = 'Genre' WHERE (@filterEntity = 0 or StoreID = @storeID)) B ON A.GenreID = B.EntityID
    WHERE deleted=0
        and name like @SearchTerm
        and GenreID = coalesce(@GenreID, GenreID)

END
GO
PRINT N'Creating [dbo].[aspdnsf_SearchManufacturers]...';

GO


create proc [dbo].[aspdnsf_SearchManufacturers]
    @SearchTerm		nvarchar(3000),
    @ManufacturerID int = null,
    @storeID		int = 1,
    @filterEntity bit


AS
BEGIN
SET NOCOUNT ON

    SET @SearchTerm = '%' + rtrim(ltrim(@SearchTerm)) + '%'
    SET @ManufacturerID = nullif(@ManufacturerID, 0)

    SELECT *
    FROM dbo.Manufacturer a with (NOLOCK)
    inner join (SELECT DISTINCT ManufacturerID EntityID FROM Manufacturer A WITH (NOLOCK) LEFT JOIN EntityStore B WITH (NOLOCK) ON A.ManufacturerID = B.EntityID AND EntityType = 'Manufacturer' WHERE (@filterEntity = 0 or StoreID = @storeID)) B ON A.ManufacturerID = B.EntityID
    WHERE deleted=0
        and name like @SearchTerm
        and ManufacturerID = coalesce(@ManufacturerID, ManufacturerID)
END
GO
PRINT N'Creating [dbo].[aspdnsf_SearchProductRatings]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_SearchProductRatings]
    @SearchTerm		varchar(1000) = '',
    @FilthyOnly		tinyint = 0,
    @Days			int = 7,
	@StoreID		int = 1,
	@FilterByStore	tinyint = 0

AS
BEGIN
    SET NOCOUNT ON

	SELECT
		r.RatingID,
		r.CreatedOn,
		p.Name AS ProductName,
		r.ProductID,
		c.FirstName + ' ' + c.LastName + ' (' + CAST(r.CustomerID AS nvarchar(255)) + ')' AS FullName,
		r.Rating,
		r.Comments,
		r.FoundHelpful,
		r.FoundNotHelpful,
		CAST(r.IsFilthy as BIT) AS IsFilthy
	FROM Rating r
	JOIN Product p ON p.ProductID = r.ProductID
	JOIN Customer c ON c.CustomerID = r.CustomerID
	WHERE (@FilterByStore = 0 OR r.StoreID = @StoreID)
		AND (@FilthyOnly = 0 OR r.IsFilthy = 1)
		AND r.CreatedOn > DATEADD(day, (@Days * -1), GETDATE())
		AND ((@SearchTerm = '' OR r.Comments LIKE '%' + @SearchTerm + '%')
			OR (@SearchTerm = '' OR CAST(r.ProductID as NVARCHAR(15)) LIKE '%' + @SearchTerm + '%'))
END
GO
PRINT N'Creating [dbo].[aspdnsf_SearchSections]...';

GO


create proc [dbo].[aspdnsf_SearchSections]
    @SearchTerm nvarchar(3000),
    @SectionID int = null,
    @storeID	int = 1,
    @filterEntity bit


AS
BEGIN
SET NOCOUNT ON

    SET @SearchTerm = '%' + rtrim(ltrim(@SearchTerm)) + '%'
    SET @SectionID = nullif(@SectionID, 0)


    SELECT *
    FROM dbo.[Section] a with (NOLOCK)
    inner join (SELECT DISTINCT SectionID EntityID FROM Section A WITH (NOLOCK) LEFT JOIN EntityStore B WITH (NOLOCK) ON A.SectionID = B.EntityID AND EntityType = 'Section' WHERE (@filterEntity = 0 or StoreID = @storeID)) B ON A.SectionID = B.EntityID
    WHERE Deleted=0 and Published=1
        and SectionID = coalesce(@SectionID, SectionID)
        and a.Name like @SearchTerm
        and SectionID in (select distinct SectionID
                          from dbo.ProductSection   with (NOLOCK)
                          where ProductID in (select distinct ProductID
                                              from dbo.Product   with (NOLOCK)
                                              where Deleted=0 and Published=1
                                              )
                         )
    ORDER BY DisplayOrder, Name
END
GO
PRINT N'Creating [dbo].[aspdnsf_SearchVectors]...';

GO



create proc [dbo].[aspdnsf_SearchVectors]
    @SearchTerm nvarchar(3000),
    @VectorID int = null,
    @storeID		int = 1,
    @filterEntity bit


AS
BEGIN
SET NOCOUNT ON

    SET @SearchTerm = '%' + rtrim(ltrim(@SearchTerm)) + '%'
    SET @VectorID = nullif(@VectorID, 0)

    SELECT *
    FROM dbo.vector a with (NOLOCK)
    inner join (SELECT DISTINCT VectorID EntityID FROM Vector A WITH (NOLOCK) LEFT JOIN EntityStore B WITH (NOLOCK) ON A.VectorID = B.EntityID AND EntityType = 'Vector' WHERE (@filterEntity = 0 or StoreID = @storeID)) B ON A.VectorID = B.EntityID
    WHERE deleted=0
        and name like @SearchTerm
        and VectorID = coalesce(@VectorID, VectorID)
END
GO
PRINT N'Creating [dbo].[aspdnsf_SecurityLogInsert]...';

GO
create proc [dbo].[aspdnsf_SecurityLogInsert]
    @SecurityAction nvarchar(100),
    @Description nvarchar(max),
    @CustomerUpdated int,
    @UpdatedBy int,
    @CustomerSessionID int,
    @logid bigint OUTPUT

AS
SET NOCOUNT ON


insert dbo.SecurityLog(SecurityAction, Description, ActionDate, CustomerUpdated, UpdatedBy, CustomerSessionID)
values (@SecurityAction, @Description, getdate(), @CustomerUpdated, @UpdatedBy, @CustomerSessionID)

set @logid = SCOPE_IDENTITY()
GO
PRINT N'Creating [dbo].[aspdnsf_SelectZipTaxRatesAll]...';

GO


CREATE PROCEDURE dbo.[aspdnsf_SelectZipTaxRatesAll]

AS

SET NOCOUNT ON

SELECT
 ztr.[ZipCode],
 ztr.[TaxRate],
 ztr.[CreatedOn],
 ztr.[ZipTaxID],
 ztr.[TaxClassID],
 ztr.[CountryId],
 t.[Name] TaxClass
FROM
 dbo.[ZipTaxRate] ztr
JOIN
 dbo.[TaxClass] t ON ztr.TaxClassID = t.TaxClassID
GO
PRINT N'Creating [dbo].[aspdnsf_SessionAge]...';

GO

CREATE PROCEDURE [dbo].[aspdnsf_SessionAge]
    @CustomerID int = null,
	@storeId INT = 0

AS
SET NOCOUNT ON

DECLARE @SessionTimeOut varchar(10), @intSessionTimeOut int
SET @SessionTimeOut = (SELECT TOP 1 ConfigValue FROM dbo.AppConfig with (nolock) WHERE [Name] = 'SessionTimeoutInMinutes' AND (StoreID=@storeId OR StoreID=0) ORDER BY StoreID desc)

IF ISNUMERIC(@SessionTimeOut) = 1
    set @intSessionTimeOut = convert(int, @SessionTimeOut)
ELSE
    set @intSessionTimeOut = 60

DELETE dbo.Customersession WHERE CustomerID = coalesce(@CustomerID, CustomerID) and  (LoggedOut is not null or LastActivity <= dateadd(mi, -@intSessionTimeOut, getdate()))
GO
PRINT N'Creating [dbo].[aspdnsf_SessionGetByCustomerID]...';

GO


create proc [dbo].[aspdnsf_SessionGetByCustomerID]
    @CustomerID int

AS
SET NOCOUNT ON

DECLARE @CustomerSessionID int

select @CustomerSessionID = max(CustomerSessionID)
from dbo.Customersession with (nolock)
WHERE CustomerID = @CustomerID

SELECT cs.CustomerSessionID, cs.CustomerSessionGUID, cs.CustomerID, cs.SessionName, cs.SessionValue, cs.CreatedOn, cs.ExpiresOn, cs.ipaddr, cs.LastActivity, cs.LoggedOut
FROM dbo.Customersession cs with (nolock)
WHERE CustomerSessionID = @CustomerSessionID
GO
PRINT N'Creating [dbo].[aspdnsf_SessionGetByID]...';

GO

create proc [dbo].[aspdnsf_SessionGetByID]
    @CustomerSessionID int

AS
SET NOCOUNT ON

SELECT CustomerSessionID, CustomerSessionGUID, CustomerID, SessionName, SessionValue, CreatedOn, ExpiresOn, ipaddr, LastActivity, LoggedOut
FROM dbo.Customersession
WHERE CustomerSessionID = @CustomerSessionID
GO
PRINT N'Creating [dbo].[aspdnsf_SessionInsert]...';

GO
create proc [dbo].[aspdnsf_SessionInsert]
    @CustomerID int,
    @SessionValue nvarchar(max),
    @ipaddr varchar(15),
    @CustomerSessionID int OUTPUT

AS
SET NOCOUNT ON

DECLARE @CustomerSessionGUID uniqueidentifier

set @CustomerSessionGUID = newid()
insert dbo.Customersession(CustomerID, SessionName, SessionValue, CreatedOn, ipaddr, LastActivity, CustomerSessionGUID)
values (@CustomerID, '', isnull(@SessionValue, ''), getdate(), @ipaddr, getdate(), @CustomerSessionGUID)

set @CustomerSessionID = SCOPE_IDENTITY()

DELETE dbo.Customersession WHERE CustomerID = @CustomerID and CustomersessionID <> @CustomerSessionID
GO
PRINT N'Creating [dbo].[aspdnsf_SessionUpdate]...';

GO


CREATE proc [dbo].[aspdnsf_SessionUpdate]
    @CustomerSessionID int,
    @SessionName nvarchar(100),
    @SessionValue nvarchar(max),
    @ExpiresOn datetime,
    @LoggedOut datetime

AS
SET NOCOUNT ON

UPDATE dbo.Customersession
SET
    SessionName = COALESCE(@SessionName, SessionName),
    SessionValue = COALESCE(@SessionValue, SessionValue),
    ExpiresOn = COALESCE(@ExpiresOn, ExpiresOn),
    LastActivity = getdate(),
    LoggedOut = COALESCE(@LoggedOut, LoggedOut)
WHERE CustomerSessionID = @CustomerSessionID
GO
PRINT N'Creating [dbo].[aspdnsf_SetProfileProperties]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_SetProfileProperties]
    @customerid				int,
    @CustomerGUID			UniqueIdentifier,
    @isAuthenticated        bit,
    @PropertyNames          nvarchar(256),
    @PropertyValuesString   nvarchar(256),
    @storeid				int


AS
BEGIN
		IF EXISTS (SELECT * FROM profile with (NOLOCK) where CustomerGUID = @CustomerGUID and PropertyName = @PropertyNames and StoreID = @storeid)
		BEGIN
			Update profile Set
				PropertyValueString = @PropertyValuesString,
				UpdatedOn = GETDATE()
				Where CustomerGUID = @CustomerGUID and PropertyName = @PropertyNames and StoreID = @storeid
		END
		ELSE
		BEGIN
				Insert into profile
				(
				StoreID,
				CustomerID,
				PropertyName,
				CustomerGUID,
				PropertyValueString,
				UpdatedOn
				)
				Values
				(
				@storeid,
				@customerid,
				@PropertyNames,
				@CustomerGUID,
				@PropertyValuesString,
				GETDATE()
				)
		END
END
GO
PRINT N'Creating [dbo].[aspdnsf_SingleEntityTree]...';

GO
CREATE PROCEDURE [dbo].[aspdnsf_SingleEntityTree]
	@EntityID int,
    @EntityType varchar(50)
AS
BEGIN
    IF @EntityType = 'Category' BEGIN
		;WITH EntityTree (ParentEntityID, EntityID, Name, ParentName, Level)
		AS
		(
		-- Anchor member definition
			SELECT e.ParentCategoryID as ParentEntityID, e.CategoryID as EntityID, Name, convert(nvarchar(max), '') as ParentName, 0 AS Level
			FROM dbo.Category e
			WHERE CategoryID = @EntityID
			UNION ALL
		-- Recursive member definition
			SELECT e.ParentCategoryID as ParentEntityID, e.CategoryID as EntityID, e.Name, convert(nvarchar(max), p.Name) as ParentName, Level + 1
			FROM dbo.Category e
			INNER JOIN EntityTree p
				ON e.CategoryID = p.ParentEntityID
		)
		-- Statement that executes the CTE
		SELECT ParentEntityID, EntityID, Name, ParentName, Level
		FROM EntityTree
		Order By Level Desc
	END

	IF @EntityType = 'Affiliate' BEGIN
		;WITH EntityTree (ParentEntityID, EntityID, Name, ParentName, Level)
		AS
		(
		-- Anchor member definition
			SELECT e.ParentAffiliateID as ParentEntityID, e.AffiliateID as EntityID, Name, convert(nvarchar(max), '') as ParentName, 0 AS Level
			FROM dbo.Affiliate e
			WHERE AffiliateID = @EntityID
			UNION ALL
		-- Recursive member definition
			SELECT e.ParentAffiliateID as ParentEntityID, e.AffiliateID as EntityID, e.Name, convert(nvarchar(max), p.Name) as ParentName, Level + 1
			FROM dbo.Affiliate e
			INNER JOIN EntityTree p
				ON e.AffiliateID = p.ParentEntityID
		)
		-- Statement that executes the CTE
		SELECT ParentEntityID, EntityID, Name, ParentName, Level
		FROM EntityTree
		Order By Level Desc
	END

	IF @EntityType = 'Section' BEGIN
		;WITH EntityTree (ParentEntityID, EntityID, Name, ParentName, Level)
		AS
		(
		-- Anchor member definition
			SELECT e.ParentSectionID as ParentEntityID, e.SectionID as EntityID, Name, convert(nvarchar(max), '') as ParentName, 0 AS Level
			FROM dbo.Section e
			WHERE SectionID = @EntityID
			UNION ALL
		-- Recursive member definition
			SELECT e.ParentSectionID as ParentEntityID, e.SectionID as EntityID, e.Name, convert(nvarchar(max), p.Name) as ParentName, Level + 1
			FROM dbo.Section e
			INNER JOIN EntityTree p
				ON e.SectionID = p.ParentEntityID
		)
		-- Statement that executes the CTE
		SELECT ParentEntityID, EntityID, Name, ParentName, Level
		FROM EntityTree
		Order By Level Desc
	END

	IF @EntityType = 'Manufacturer' BEGIN
		;WITH EntityTree (ParentEntityID, EntityID, Name, ParentName, Level)
		AS
		(
		-- Anchor member definition
			SELECT e.ParentManufacturerID as ParentEntityID, e.ManufacturerID as EntityID, Name, convert(nvarchar(max), '') as ParentName, 0 AS Level
			FROM dbo.Manufacturer e
			WHERE ManufacturerID = @EntityID
			UNION ALL
		-- Recursive member definition
			SELECT e.ParentManufacturerID as ParentEntityID, e.ManufacturerID as EntityID, e.Name, convert(nvarchar(max), p.Name) as ParentName, Level + 1
			FROM dbo.Manufacturer e
			INNER JOIN EntityTree p
				ON e.ManufacturerID = p.ParentEntityID
		)
		-- Statement that executes the CTE
		SELECT ParentEntityID, EntityID, Name, ParentName, Level
		FROM EntityTree
		Order By Level Desc
	END

	IF @EntityType = 'Distributor' BEGIN
		;WITH EntityTree (ParentEntityID, EntityID, Name, ParentName, Level)
		AS
		(
		-- Anchor member definition
			SELECT e.ParentDistributorID as ParentEntityID, e.DistributorID as EntityID, Name, convert(nvarchar(max), '') as ParentName, 0 AS Level
			FROM dbo.Distributor e
			WHERE DistributorID = @EntityID
			UNION ALL
		-- Recursive member definition
			SELECT e.ParentDistributorID as ParentEntityID, e.DistributorID as EntityID, e.Name, convert(nvarchar(max), p.Name) as ParentName, Level + 1
			FROM dbo.Distributor e
			INNER JOIN EntityTree p
				ON e.DistributorID = p.ParentEntityID
		)
		-- Statement that executes the CTE
		SELECT ParentEntityID, EntityID, Name, ParentName, Level
		FROM EntityTree
		Order By Level Desc
	END

	IF @EntityType = 'Customerlevel' BEGIN
		;WITH EntityTree (ParentEntityID, EntityID, Name, ParentName, Level)
		AS
		(
		-- Anchor member definition
			SELECT e.ParentCustomerlevelID as ParentEntityID, e.CustomerlevelID as EntityID, Name, convert(nvarchar(max), '') as ParentName, 0 AS Level
			FROM dbo.Customerlevel e
			WHERE CustomerlevelID = @EntityID
			UNION ALL
		-- Recursive member definition
			SELECT e.ParentCustomerlevelID as ParentEntityID, e.CustomerlevelID as EntityID, e.Name, convert(nvarchar(max), p.Name) as ParentName, Level + 1
			FROM dbo.Customerlevel e
			INNER JOIN EntityTree p
				ON e.CustomerlevelID = p.ParentEntityID
		)
		-- Statement that executes the CTE
		SELECT ParentEntityID, EntityID, Name, ParentName, Level
		FROM EntityTree
		Order By Level Desc
	END

END
GO
PRINT N'Creating [dbo].[aspdnsf_StoreVersion]...';

GO


create proc [dbo].[aspdnsf_StoreVersion]
as
BEGIN
    select configvalue from dbo.appconfig with (nolock) where name='StoreVersion'
end
GO
PRINT N'Creating [dbo].[aspdnsf_SynchronizeCart]...';

GO


CREATE PROC [dbo].[aspdnsf_SynchronizeCart](
    @CustomerID int,
    @CartType int
)

AS
SET NOCOUNT ON
BEGIN

	UPDATE sc
	SET sc.ProductSKU = case when i.VendorFullSKU IS NULL OR rtrim(i.VendorFullSKU) = '' then isnull(p.sku, '') + isnull(pv.skusuffix, '') + isnull(sc.ChosenColorSKUModifier, '') + isnull(sc.ChosenSizeSKUModifier, '') else i.VendorFullSKU end
	FROM dbo.ShoppingCart sc
		INNER JOIN  dbo.Product p with (NOLOCK)  ON p.ProductID = sc.ProductID AND sc.CustomerID = @CustomerID
		JOIN dbo.ProductVariant pv with (NOLOCK) on sc.VariantID = pv.VariantID
		LEFT JOIN dbo.Inventory i with (NOLOCK) on pv.VariantID = i.VariantID AND i.size = sc.ChosenSize AND i.color = sc.ChosenColor
    WHERE sc.CustomerID = @CustomerID and
          sc.CartType  = @CartType
END
GO
PRINT N'Creating [dbo].[aspdnsf_TopProducts]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_TopProducts]
    @StartDate DATETIME,
    @EndDate DATETIME,
	@CountOfProducts INT
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @Totals TABLE (ProductName NVARCHAR(MAX), Sales MONEY, ProductID INT)

	INSERT INTO @Totals (Sales, ProductName, ProductID)
	SELECT TOP (@CountOfProducts) SUM(os.OrderedProductPrice), os.OrderedProductName, os.ProductID
		FROM Orders_ShoppingCart os
			LEFT JOIN Orders o ON os.OrderNumber = o.OrderNumber
		WHERE o.TransactionState = 'CAPTURED'
			AND o.OrderDate > @StartDate
			AND o.OrderDate < @EndDate
			AND os.IsSystem = 0
			AND o.Deleted = 0
		GROUP BY os.ProductID, os.OrderedProductName
	    ORDER BY SUM(os.OrderedProductPrice) DESC

	SELECT * FROM @Totals ORDER BY Sales DESC
END
GO
PRINT N'Creating [dbo].[aspdnsf_UndoImport]...';

GO


create procEDURE [dbo].[aspdnsf_UndoImport]

as
BEGIN
    SET NOCOUNT ON
    delete from [dbo].kitcart where shoppingcartrecid in (select shoppingcartrecid from shoppingcart where productid in (select productid from product where IsImport=1 and IsSystem=0));
    delete from [dbo].shoppingcart where productid in (select productid from product where IsImport=1 and IsSystem=0);
    delete from [dbo].ProductCategory where productid in (select productid from product where IsImport=1 and IsSystem=0);
    delete from [dbo].ProductSection where productid in (select productid from product where IsImport=1 and IsSystem=0);
    delete from [dbo].ProductAffiliate where productid in (select productid from product where IsImport=1 and IsSystem=0);
    delete from [dbo].ProductCustomerLevel where productid in (select productid from product where IsImport=1 and IsSystem=0);
    delete from [dbo].ProductManufacturer where productid in (select productid from product where IsImport=1 and IsSystem=0);
    delete from [dbo].productvariant where productid in (select productid from product where IsImport=1 and IsSystem=0) or IsImport=1;
    delete from [dbo].kititem where kitgroupid in (select kitgroupid from kitgroup where productid in (select productid from product where IsImport=1 and IsSystem=0));
    delete from [dbo].kitgroup where productid in (select productid from product where IsImport=1 and IsSystem=0);
    delete from [dbo].product where IsImport=1 and IsSystem=0;
    delete from [dbo].manufacturer where IsImport=1;
    delete from [dbo].category where IsImport=1;
    delete from [dbo].section where IsImport=1;
    delete from [dbo].library where IsImport=1;
    delete from [dbo].Document where IsImport=1;
    delete from [dbo].Manufacturer where IsImport=1;
END
GO
PRINT N'Creating [dbo].[aspdnsf_updAddress]...';

GO

CREATE PROCEDURE [dbo].[aspdnsf_updAddress]
(
	@AddressID int,
	@NickName nvarchar(100) = null,
	@FirstName nvarchar(100) = null,
	@LastName nvarchar(100) = null,
	@Company nvarchar(100) = null,
	@Address1 nvarchar(100) = null,
	@Address2 nvarchar(100) = null,
	@Suite nvarchar(50) = null,
	@City nvarchar(100) = null,
	@State nvarchar(100) = null,
	@Zip nvarchar(100) = null,
	@Country nvarchar(100) = null,
	@ResidenceType int = null,
	@Phone nvarchar(25) = null,
	@Email nvarchar(100) = null
)
AS
BEGIN
SET NOCOUNT ON
UPDATE [Address]
SET
	[NickName]		= COALESCE(@NickName, [NickName]),
	[FirstName]		= COALESCE(@FirstName, [FirstName]),
	[LastName]		= COALESCE(@LastName, [LastName]),
	[Company]		= COALESCE(@Company, [Company]),
	[Address1]		= COALESCE(@Address1, [Address1]),
	[Address2]		= COALESCE(@Address2, [Address2]),
	[Suite]			= COALESCE(@Suite, [Suite]),
	[City]			= COALESCE(@City, [City]),
	[State]			= COALESCE(@State, [State]),
	[Zip]			= COALESCE(@Zip, [Zip]),
	[Country]		= COALESCE(@Country, [Country]),
	[ResidenceType]	= COALESCE(@ResidenceType, [ResidenceType]),
	[Phone]			= COALESCE(@Phone, [Phone]),
	[Email]			= COALESCE(@Email, [Email])
WHERE [AddressID] = @AddressID
END
GO
PRINT N'Creating [dbo].[aspdnsf_updAffiliate]...';

GO


create proc dbo.aspdnsf_updAffiliate
    @AffiliateID int,
    @EMail nvarchar(100) = null,
    @Password nvarchar(250) = null,
    @Notes nvarchar(max) = null,
    @IsOnline tinyint = null,
    @FirstName nvarchar(100) = null,
    @LastName nvarchar(100) = null,
    @Name nvarchar(100) = null,
    @Company nvarchar(100) = null,
    @Address1 nvarchar(100) = null,
    @Address2 nvarchar(100) = null,
    @Suite nvarchar(50) = null,
    @City nvarchar(100) = null,
    @State nvarchar(100) = null,
    @Zip nvarchar(10) = null,
    @Country nvarchar(100) = null,
    @Phone nvarchar(25) = null,
    @WebSiteName nvarchar(100) = null,
    @WebSiteDescription nvarchar(max) = null,
    @URL nvarchar(max) = null,
    @DefaultSkinID int = null,
    @ParentAffiliateID int = null,
    @DisplayOrder int = null,
    @ExtensionData nvarchar(max) = null,
    @SEName nvarchar(100) = null,
    @SETitle nvarchar(max) = null,
    @SEAltText nvarchar(max) = null,
    @SEKeywords nvarchar(max) = null,
    @SEDescription nvarchar(max) = null,
    @Published tinyint = null,
    @Wholesale tinyint = null,
    @Deleted tinyint = null,
    @SaltKey int = null

AS
SET NOCOUNT ON

UPDATE dbo.Affiliate
SET
    EMail = COALESCE(@EMail, EMail),
    Password = COALESCE(@Password, Password),
    Notes = COALESCE(@Notes, Notes),
    IsOnline = COALESCE(@IsOnline, IsOnline),
    FirstName = COALESCE(@FirstName, FirstName),
    LastName = COALESCE(@LastName, LastName),
    Name = COALESCE(@Name, Name),
    Company = COALESCE(@Company, Company),
    Address1 = COALESCE(@Address1, Address1),
    Address2 = COALESCE(@Address2, Address2),
    Suite = COALESCE(@Suite, Suite),
    City = COALESCE(@City, City),
    State = COALESCE(@State, State),
    Zip = COALESCE(@Zip, Zip),
    Country = COALESCE(@Country, Country),
    Phone = COALESCE(@Phone, Phone),
    WebSiteName = COALESCE(@WebSiteName, WebSiteName),
    WebSiteDescription = COALESCE(@WebSiteDescription, WebSiteDescription),
    URL = COALESCE(@URL, URL),
    DefaultSkinID = COALESCE(@DefaultSkinID, DefaultSkinID),
    ParentAffiliateID = COALESCE(@ParentAffiliateID, ParentAffiliateID),
    DisplayOrder = COALESCE(@DisplayOrder, DisplayOrder),
    ExtensionData = COALESCE(@ExtensionData, ExtensionData),
    SEName = COALESCE(@SEName, SEName),
    SETitle = COALESCE(@SETitle, SETitle),
    SEAltText = COALESCE(@SEAltText, SEAltText),
    SEKeywords = COALESCE(@SEKeywords, SEKeywords),
    SEDescription = COALESCE(@SEDescription, SEDescription),
    Published = COALESCE(@Published, Published),
    Wholesale = COALESCE(@Wholesale, Wholesale),
    Deleted = COALESCE(@Deleted, Deleted),
    SaltKey = COALESCE(@SaltKey, SaltKey)
WHERE AffiliateID = @AffiliateID
GO
PRINT N'Creating [dbo].[aspdnsf_updAppconfig]...';

GO


create proc dbo.aspdnsf_updAppconfig
    @AppConfigID int,
    @Description nvarchar(max) = null,
    @ConfigValue nvarchar(max) = null,
    @GroupName nvarchar(100) = null,
    @SuperOnly tinyint = null,
    @StoreID int = null,
    @ValueType nvarchar(100) = null,
    @AllowableValues nvarchar(max) = null

AS
SET NOCOUNT ON


    UPDATE dbo.Appconfig
    SET
        Description = COALESCE(@Description, Description),
        ConfigValue = COALESCE(@ConfigValue, ConfigValue),
        GroupName = COALESCE(@GroupName, GroupName),
        SuperOnly = COALESCE(@SuperOnly, SuperOnly),
        StoreID =  COALESCE(@StoreID, StoreID),
	ValueType =  COALESCE(@ValueType, ValueType),
	AllowableValues = COALESCE(@AllowableValues, AllowableValues)
    WHERE AppConfigID = @AppConfigID
GO
PRINT N'Creating [dbo].[aspdnsf_UpdateCartItemQuantity]...';

GO



CREATE PROCEDURE [dbo].[aspdnsf_UpdateCartItemQuantity]
	@ProductID int,
    @VariantID int,
	@ShoppingCartRecID INT,
	@Quantity INT,
	@NewQuantity INT OUTPUT

AS
BEGIN
	DECLARE @RestrictedQy varchar(8000), @CurrentCartQty int

	SELECT @RestrictedQy = RestrictedQuantities
	FROM dbo.ProductVariant with (nolock)
	WHERE VariantID = @VariantID

	SELECT @CurrentCartQty = Quantity
	FROM dbo.shoppingcart with (nolock)
	WHERE ShoppingCartRecID = @ShoppingCartRecID

	DECLARE @RQty int
	IF isnull(rtrim(@RestrictedQy), '') = ''
		set @RQty = -1
	ELSE
		SELECT @RQty = cast(items as int) FROM dbo.Split(@RestrictedQy, ',') WHERE cast(items as int) <= isnull(@CurrentCartQty, 0) + @Quantity

	UPDATE dbo.ShoppingCart
    SET Quantity = case @RQty when -1 then Quantity + @Quantity else isnull(@RQty, 0) end
    WHERE ShoppingCartRecID = @ShoppingCartRecID

	SELECT @NewQuantity = Quantity FROM dbo.ShoppingCart with (nolock) WHERE ShoppingCartRecID = @ShoppingCartRecID
END
GO
PRINT N'Creating [dbo].[aspdnsf_UpdateCartKitPrice]...';

GO


create proc dbo.aspdnsf_UpdateCartKitPrice
    @ShoppingCartRecId int,
    @CustomerLevelID int = 0

AS
BEGIN
    SET NOCOUNT ON
    DECLARE @LevelDiscountsApplyToExtendedPrices tinyint, @LevelDiscountPercent money, @ProductPrice money

    SELECT @LevelDiscountsApplyToExtendedPrices = LevelDiscountsApplyToExtendedPrices, @LevelDiscountPercent = LevelDiscountPercent
    FROM customerlevel
    WHERE CustomerLevelID = @CustomerLevelID

    select @ProductPrice = case
                            when isnull(@LevelDiscountsApplyToExtendedPrices, 0) = 1 then (100-isnull(@LevelDiscountPercent, 0))*(coalesce(ep.price, nullif(pv.saleprice, 0), pv.price) + kc.pricedelta)/100.0
                            when isnull(@LevelDiscountsApplyToExtendedPrices, 0) = 0 and ep.price is not null then ep.price + kc.pricedelta
                            else (100-isnull(@LevelDiscountPercent, 0))*((coalesce(nullif(pv.saleprice, 0), pv.price) + kc.pricedelta))/100.0
                           end
    FROM ShoppingCart sc with (nolock)
        join productvariant pv with (nolock) on sc.variantid = pv.variantid
        left join extendedprice ep with (nolock) on pv.variantid = ep.variantid and ep.CustomerLevelID = @CustomerLevelID
        join (select ShoppingCartRecId, sum(pricedelta) pricedelta
              from kitcart kc with (nolock)
                join kititem ki with (nolock) on kc.kititemid = ki.kititemid
              where kc.ShoppingCartRecId = @ShoppingCartRecId
              group by ShoppingCartRecId
             ) kc on sc.ShoppingCartRecId = kc.ShoppingCartRecId
    WHERE sc.ShoppingCartRecId = @ShoppingCartRecId

    UPDATE ShoppingCart
    SET ProductPrice = @ProductPrice
    WHERE ShoppingCartRecID = @ShoppingCartRecId
END
GO
PRINT N'Creating [dbo].[aspdnsf_UpdateIndexes]...';

GO

CREATE PROC [dbo].[aspdnsf_UpdateIndexes]

AS
BEGIN

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Address]') AND name = N'UIX_Address_AddressGUID') CREATE UNIQUE INDEX [UIX_Address_AddressGUID] ON [Address](AddressGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Address]') AND name = N'IX_Address_CustomerID') CREATE INDEX [IX_Address_CustomerID] ON [Address](CustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Address]') AND name = N'IX_Address_Deleted') CREATE INDEX [IX_Address_Deleted] ON [Address](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AffiliateActivity]') AND name = N'IX_AffiliateActivity_AffiliateID') CREATE INDEX [IX_AffiliateActivity_AffiliateID] ON [AffiliateActivity](AffiliateID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AffiliateActivity]') AND name = N'IX_AffiliateActivity_AffiliateID_ActivityDate') CREATE INDEX [IX_AffiliateActivity_AffiliateID_ActivityDate] ON [AffiliateActivity](AffiliateID, ActivityDate);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AffiliateCommissions]') AND name = N'IX_AffiliateCommissions_RowGUID') CREATE INDEX [IX_AffiliateCommissions_RowGUID] ON [AffiliateCommissions](RowGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AffiliateCommissions]') AND name = N'IX_AffiliateCommissions_LowValue') CREATE INDEX [IX_AffiliateCommissions_LowValue] ON [AffiliateCommissions](LowValue);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AffiliateCommissions]') AND name = N'IX_AffiliateCommissions_HighValue') CREATE INDEX [IX_AffiliateCommissions_HighValue] ON [AffiliateCommissions](HighValue);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AppConfig]') AND name = N'UIX_AppConfig_Name_StoreID') CREATE UNIQUE INDEX [UIX_AppConfig_Name_StoreID] ON [AppConfig](Name, StoreID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AppConfig]') AND name = N'IX_AppConfig_GroupName') CREATE INDEX [IX_AppConfig_GroupName] ON [AppConfig](GroupName);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BadWord]') AND name = N'IX_BadWord') CREATE INDEX [IX_BadWord] ON [BadWord](Word);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Category]') AND name = N'IX_Category_Name') CREATE INDEX [IX_Category_Name] ON [Category](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Category]') AND name = N'IX_Category_Deleted') CREATE INDEX [IX_Category_Deleted] ON [Category](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Category]') AND name = N'IX_Category_Published') CREATE INDEX [IX_Category_Published] ON [Category](Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Category]') AND name = N'IX_Category_Wholesale') CREATE INDEX [IX_Category_Wholesale] ON [Category](Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Category]') AND name = N'IX_Category_CategoryGUID') CREATE INDEX [IX_Category_CategoryGUID] ON [Category](CategoryGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Category]') AND name = N'IX_Category_ParentCategoryID') CREATE INDEX [IX_Category_ParentCategoryID] ON [Category](ParentCategoryID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Category]') AND name = N'IX_Category_DisplayOrder') CREATE INDEX [IX_Category_DisplayOrder] ON [Category](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Category]') AND name = N'IX_Category_Deleted_Published') CREATE INDEX [IX_Category_Deleted_Published] ON [Category](Deleted, Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Category]') AND name = N'IX_Category_Deleted_Wholesale') CREATE INDEX [IX_Category_Deleted_Wholesale] ON [Category](Deleted, Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Country]') AND name = N'UIX_Country_Name') CREATE UNIQUE INDEX [UIX_Country_Name] ON [Country](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Country]') AND name = N'IX_Country_DisplayOrder_Name') CREATE INDEX [IX_Country_DisplayOrder_Name] ON [Country](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Country]') AND name = N'IX_Country_CountryGUID') CREATE INDEX [IX_Country_CountryGUID] ON [Country](CountryGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Country]') AND name = N'IX_Country_DisplayOrder') CREATE INDEX [IX_Country_DisplayOrder] ON [Country](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CountryTaxRate]') AND name = N'UIX_CountryTaxRate_CountryID_TaxClassID') CREATE UNIQUE INDEX [UIX_CountryTaxRate_CountryID_TaxClassID] ON [CountryTaxRate](CountryID, TaxClassID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Coupon]') AND name = N'UIX_Coupon_CouponGUID') CREATE UNIQUE INDEX [UIX_Coupon_CouponGUID] ON [Coupon](CouponGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Coupon]') AND name = N'UIX_Coupon_CouponCode') CREATE UNIQUE INDEX [UIX_Coupon_CouponCode] ON [Coupon](CouponCode);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Coupon]') AND name = N'IX_Coupon_ExpirationDate') CREATE INDEX [IX_Coupon_ExpirationDate] ON [Coupon](ExpirationDate);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Coupon]') AND name = N'IX_Coupon_Deleted') CREATE INDEX [IX_Coupon_Deleted] ON [Coupon](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CreditCardType]') AND name = N'UIX_CreditCardTypes') CREATE UNIQUE INDEX [UIX_CreditCardTypes] ON [CreditCardType](CardTypeGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CreditCardType]') AND name = N'IX_CreditCardType_CardType') CREATE INDEX [IX_CreditCardType_CardType] ON [CreditCardType](CardType);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Currency]') AND name = N'UIX_Currency_CurrencyGUID') CREATE UNIQUE INDEX [UIX_Currency_CurrencyGUID] ON [Currency](CurrencyGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customer]') AND name = N'UIX_Customer_CustomerGUID') CREATE UNIQUE INDEX [UIX_Customer_CustomerGUID] ON [Customer](CustomerGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customer]') AND name = N'IX_Customer_EMail') CREATE INDEX [IX_Customer_EMail] ON [Customer](Email);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customer]') AND name = N'IX_Customer_Password') CREATE INDEX [IX_Customer_Password] ON [Customer](Password);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customer]') AND name = N'IX_Customer_CustomerLevelID') CREATE INDEX [IX_Customer_CustomerLevelID] ON [Customer](CustomerLevelID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customer]') AND name = N'IX_Customer_IsAdmin') CREATE INDEX [IX_Customer_IsAdmin] ON [Customer](IsAdmin);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customer]') AND name = N'IX_Customer_OkToEMail') CREATE INDEX [IX_Customer_OkToEMail] ON [Customer](OkToEmail);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customer]') AND name = N'IX_Customer_Deleted') CREATE INDEX [IX_Customer_Deleted] ON [Customer](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customer]') AND name = N'IX_Customer_AffiliateID') CREATE INDEX [IX_Customer_AffiliateID] ON [Customer](AffiliateID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customer]') AND name = N'IX_Customer_CouponCode') CREATE INDEX [IX_Customer_CouponCode] ON [Customer](CouponCode);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customer]') AND name = N'IX_Customer_CreatedOn') CREATE INDEX [IX_Customer_CreatedOn] ON [Customer](CreatedOn);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLevel]') AND name = N'IX_CustomerLevel_Deleted') CREATE INDEX [IX_CustomerLevel_Deleted] ON [CustomerLevel](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLevel]') AND name = N'IX_CustomerLevel_Name') CREATE INDEX [IX_CustomerLevel_Name] ON [CustomerLevel](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLevel]') AND name = N'IX_CustomerLevel_DisplayOrder') CREATE INDEX [IX_CustomerLevel_DisplayOrder] ON [CustomerLevel](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLevel]') AND name = N'IX_CustomerLevel_DisplayOrder_Name') CREATE INDEX [IX_CustomerLevel_DisplayOrder_Name] ON [CustomerLevel](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerSession]') AND name = N'IX_CustomerSession_CustomerID') CREATE INDEX [IX_CustomerSession_CustomerID] ON [CustomerSession](CustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Distributor]') AND name = N'UIX_Distributor_DistributorGUID') CREATE UNIQUE INDEX [UIX_Distributor_DistributorGUID] ON [Distributor](DistributorGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Distributor]') AND name = N'IX_Distributor_DisplayOrder') CREATE INDEX [IX_Distributor_DisplayOrder] ON [Distributor](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Distributor]') AND name = N'IX_Distributor_Name') CREATE INDEX [IX_Distributor_Name] ON [Distributor](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Distributor]') AND name = N'IX_Distributor_DisplayOrder_Name') CREATE INDEX [IX_Distributor_DisplayOrder_Name] ON [Distributor](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Document]') AND name = N'UIX_Document_DocumentGUID') CREATE UNIQUE INDEX [UIX_Document_DocumentGUID] ON [Document](DocumentGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Document]') AND name = N'IX_Document_Published') CREATE INDEX [IX_Document_Published] ON [Document](Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Document]') AND name = N'IX_Document_Wholesale') CREATE INDEX [IX_Document_Wholesale] ON [Document](Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Document]') AND name = N'IX_Document_Deleted') CREATE INDEX [IX_Document_Deleted] ON [Document](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Document]') AND name = N'IX_Document_Published_Deleted') CREATE INDEX [IX_Document_Published_Deleted] ON [Document](Published, Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Document]') AND name = N'IX_Document_Wholesale_Deleted') CREATE INDEX [IX_Document_Wholesale_Deleted] ON [Document](Wholesale, Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Document]') AND name = N'IX_Document_Name') CREATE INDEX [IX_Document_Name] ON [Document](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[EventHandler]') AND name = N'UIX_EventhHandler') CREATE UNIQUE INDEX [UIX_EventhHandler] ON [EventHandler](EventName);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ExtendedPrice]') AND name = N'UIX_ExtendedPrice_2') CREATE UNIQUE INDEX [UIX_ExtendedPrice_2] ON [ExtendedPrice](ExtendedPriceGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ExtendedPrice]') AND name = N'IX_ExtendedPrice_VariantID_CustomerLevelID') CREATE INDEX [IX_ExtendedPrice_VariantID_CustomerLevelID] ON [ExtendedPrice](VariantID, CustomerLevelID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ExtendedPrice]') AND name = N'IX_ExtendedPrice_VariantID') CREATE INDEX [IX_ExtendedPrice_VariantID] ON [ExtendedPrice](VariantID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[FailedTransaction]') AND name = N'IX_FailedTransaction_OrderDate') CREATE INDEX [IX_FailedTransaction_OrderDate] ON [FailedTransaction](OrderDate);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[FailedTransaction]') AND name = N'IX_FailedTransaction_PaymentGateway') CREATE INDEX [IX_FailedTransaction_PaymentGateway] ON [FailedTransaction](PaymentGateway);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Feed]') AND name = N'UIX_Feed_FeedGUID') CREATE UNIQUE INDEX [UIX_Feed_FeedGUID] ON [Feed](FeedGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Feed]') AND name = N'IX_Feed_DisplayOrder') CREATE INDEX [IX_Feed_DisplayOrder] ON [Feed](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Feed]') AND name = N'IX_Feed_DisplayOrder_Name') CREATE INDEX [IX_Feed_DisplayOrder_Name] ON [Feed](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Genre]') AND name = N'UIX_Genre_GenreGUID') CREATE UNIQUE INDEX [UIX_Genre_GenreGUID] ON [Genre](GenreGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Genre]') AND name = N'IX_Genre_Name') CREATE INDEX [IX_Genre_Name] ON [Genre](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Genre]') AND name = N'IX_Genre_DisplayOrder_Name') CREATE INDEX [IX_Genre_DisplayOrder_Name] ON [Genre](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GiftCard]') AND name = N'UIX_GiftCard_GiftCardGUID') CREATE UNIQUE INDEX [UIX_GiftCard_GiftCardGUID] ON [GiftCard](GiftCardGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GiftCard]') AND name = N'IX_GiftCard_SerialNumber') CREATE INDEX [IX_GiftCard_SerialNumber] ON [GiftCard](SerialNumber);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GiftCard]') AND name = N'IX_GiftCard_ExpirationDate') CREATE INDEX [IX_GiftCard_ExpirationDate] ON [GiftCard](ExpirationDate);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GiftCard]') AND name = N'IX_GiftCard_CreatedOn') CREATE INDEX [IX_GiftCard_CreatedOn] ON [GiftCard](CreatedOn);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GiftCard]') AND name = N'IX_GiftCard_PurchasedByCustomerID') CREATE INDEX [IX_GiftCard_PurchasedByCustomerID] ON [GiftCard](PurchasedByCustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GiftCardUsage]') AND name = N'UIX_GiftCardUsage_GiftCardUsageGUID') CREATE UNIQUE INDEX [UIX_GiftCardUsage_GiftCardUsageGUID] ON [GiftCardUsage](GiftCardUsageGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GiftCardUsage]') AND name = N'IX_GiftCardUsage_GiftCardID') CREATE INDEX [IX_GiftCardUsage_GiftCardID] ON [GiftCardUsage](GiftCardID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GiftCardUsage]') AND name = N'IX_GiftCardUsage_UsedByCustomerID') CREATE INDEX [IX_GiftCardUsage_UsedByCustomerID] ON [GiftCardUsage](UsedByCustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Inventory]') AND name = N'UIX_Inventory_InventoryGUID') CREATE UNIQUE INDEX [UIX_Inventory_InventoryGUID] ON [Inventory](InventoryGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Inventory]') AND name = N'IX_Inventory_VariantID_Color_Size') CREATE INDEX [IX_Inventory_VariantID_Color_Size] ON [Inventory](VariantID, Color, Size);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitCart]') AND name = N'IX_KitCart_CreatedOn') CREATE INDEX [IX_KitCart_CreatedOn] ON [KitCart](CreatedOn);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitCart]') AND name = N'IX_KitCart_ShoppingCartRecID') CREATE INDEX [IX_KitCart_ShoppingCartRecID] ON [KitCart](ShoppingCartRecID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitCart]') AND name = N'IX_KitCart_CustomerID_ShoppingCartRecID') CREATE INDEX [IX_KitCart_CustomerID_ShoppingCartRecID] ON [KitCart](CustomerID, ShoppingCartRecID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitCart]') AND name = N'IX_KitCart_ProductID') CREATE INDEX [IX_KitCart_ProductID] ON [KitCart](ProductID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitCart]') AND name = N'IX_KitCart_VariantID') CREATE INDEX [IX_KitCart_VariantID] ON [KitCart](VariantID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitCart]') AND name = N'IX_KitCart_KitGroupID') CREATE INDEX [IX_KitCart_KitGroupID] ON [KitCart](KitGroupID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitCart]') AND name = N'IX_KitCart_KitItemID') CREATE INDEX [IX_KitCart_KitItemID] ON [KitCart](KitItemID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitGroup]') AND name = N'UIX_KitGroup_KitGroupGUID') CREATE UNIQUE INDEX [UIX_KitGroup_KitGroupGUID] ON [KitGroup](KitGroupGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitGroup]') AND name = N'IX_KitGroup_ProductID') CREATE INDEX [IX_KitGroup_ProductID] ON [KitGroup](ProductID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitGroup]') AND name = N'IX_KitGroup_ProductID_DisplayOrder') CREATE INDEX [IX_KitGroup_ProductID_DisplayOrder] ON [KitGroup](ProductID, DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitGroup]') AND name = N'IX_KitGroup_DisplayOrder') CREATE INDEX [IX_KitGroup_DisplayOrder] ON [KitGroup](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitGroupType]') AND name = N'UIX_KitGroupType_KitGroupTypeGUID') CREATE UNIQUE INDEX [UIX_KitGroupType_KitGroupTypeGUID] ON [KitGroupType](KitGroupTypeGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitGroupType]') AND name = N'IX_KitGroupType_DisplayOrder') CREATE INDEX [IX_KitGroupType_DisplayOrder] ON [KitGroupType](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitGroupType]') AND name = N'IX_KitGroupType_DisplayOrder_Name') CREATE INDEX [IX_KitGroupType_DisplayOrder_Name] ON [KitGroupType](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitGroupType]') AND name = N'IX_KitGroupType_Name') CREATE INDEX [IX_KitGroupType_Name] ON [KitGroupType](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitItem]') AND name = N'UIX_KitItem_KitItemGUID') CREATE UNIQUE INDEX [UIX_KitItem_KitItemGUID] ON [KitItem](KitItemGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitItem]') AND name = N'IX_KitItem_KitGroupID') CREATE INDEX [IX_KitItem_KitGroupID] ON [KitItem](KitGroupID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitItem]') AND name = N'IX_KitItem_KitGroupID_DisplayOrder') CREATE INDEX [IX_KitItem_KitGroupID_DisplayOrder] ON [KitItem](KitGroupID, DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitItem]') AND name = N'IX_KitItem_DisplayOrder') CREATE INDEX [IX_KitItem_DisplayOrder] ON [KitItem](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitItem]') AND name = N'IX_KitItem_DisplayOrder_Name') CREATE INDEX [IX_KitItem_DisplayOrder_Name] ON [KitItem](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[KitItem]') AND name = N'IX_KitItem_Name') CREATE INDEX [IX_KitItem_Name] ON [KitItem](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Library]') AND name = N'IX_Library_Deleted') CREATE INDEX [IX_Library_Deleted] ON [Library](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Library]') AND name = N'IX_Library_Published') CREATE INDEX [IX_Library_Published] ON [Library](Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Library]') AND name = N'IX_Library_Wholesale') CREATE INDEX [IX_Library_Wholesale] ON [Library](Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Library]') AND name = N'IX_Library_LibraryGUID') CREATE INDEX [IX_Library_LibraryGUID] ON [Library](LibraryGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Library]') AND name = N'IX_Library_ParentLibraryID') CREATE INDEX [IX_Library_ParentLibraryID] ON [Library](ParentLibraryID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Library]') AND name = N'IX_Library_DisplayOrder') CREATE INDEX [IX_Library_DisplayOrder] ON [Library](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Library]') AND name = N'IX_Library_Deleted_Published') CREATE INDEX [IX_Library_Deleted_Published] ON [Library](Deleted, Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Library]') AND name = N'IX_Library_Deleted_Wholesale') CREATE INDEX [IX_Library_Deleted_Wholesale] ON [Library](Deleted, Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Library]') AND name = N'IX_Library_Name') CREATE INDEX [IX_Library_Name] ON [Library](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Library]') AND name = N'IX_Library_DisplayOrder_Name') CREATE INDEX [IX_Library_DisplayOrder_Name] ON [Library](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[LocaleSetting]') AND name = N'UIX_Locale_LocaleSettingGUID') CREATE UNIQUE INDEX [UIX_Locale_LocaleSettingGUID] ON [LocaleSetting](LocaleSettingGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[LocaleSetting]') AND name = N'UIX_Locale_Name') CREATE UNIQUE INDEX [UIX_Locale_Name] ON [LocaleSetting](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[LocaleSetting]') AND name = N'IX_Locale_DisplayOrder_Name') CREATE INDEX [IX_Locale_DisplayOrder_Name] ON [LocaleSetting](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[LocaleSetting]') AND name = N'IX_Locale_DisplayOrder') CREATE INDEX [IX_Locale_DisplayOrder] ON [LocaleSetting](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Manufacturer]') AND name = N'UIX_Manufacturer_ManufacturerGUID') CREATE UNIQUE INDEX [UIX_Manufacturer_ManufacturerGUID] ON [Manufacturer](ManufacturerGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Manufacturer]') AND name = N'IX_Manufacturer_Deleted') CREATE INDEX [IX_Manufacturer_Deleted] ON [Manufacturer](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Manufacturer]') AND name = N'IX_Manufacturer_DisplayOrder') CREATE INDEX [IX_Manufacturer_DisplayOrder] ON [Manufacturer](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Manufacturer]') AND name = N'IX_Manufacturer_Name') CREATE INDEX [IX_Manufacturer_Name] ON [Manufacturer](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Manufacturer]') AND name = N'IX_Manufacturer_DisplayOrder_Name') CREATE INDEX [IX_Manufacturer_DisplayOrder_Name] ON [Manufacturer](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[News]') AND name = N'UIX_News_NewsGUID') CREATE UNIQUE INDEX [UIX_News_NewsGUID] ON [News](NewsGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[News]') AND name = N'IX_News_ExpiresOn') CREATE INDEX [IX_News_ExpiresOn] ON [News](ExpiresOn DESC);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[News]') AND name = N'IX_News_Deleted') CREATE INDEX [IX_News_Deleted] ON [News](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[News]') AND name = N'IX_News_Published') CREATE INDEX [IX_News_Published] ON [News](Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[News]') AND name = N'IX_News_Wholesale') CREATE INDEX [IX_News_Wholesale] ON [News](Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OrderNumbers]') AND name = N'UIX_OrderNumbers_OrderNumberGUID') CREATE UNIQUE INDEX [UIX_OrderNumbers_OrderNumberGUID] ON [OrderNumbers](OrderNumberGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OrderNumbers]') AND name = N'IX_OrderNumbers_CreatedOn') CREATE INDEX [IX_OrderNumbers_CreatedOn] ON [OrderNumbers](CreatedOn);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_OrderNumber') CREATE INDEX [IX_Orders_OrderNumber] ON [Orders](OrderNumber);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_ParentOrderNumber') CREATE INDEX [IX_Orders_ParentOrderNumber] ON [Orders](ParentOrderNumber);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_CustomerID') CREATE INDEX [IX_Orders_CustomerID] ON [Orders](CustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_OrderNumber_CustomerID') CREATE INDEX [IX_Orders_OrderNumber_CustomerID] ON [Orders](OrderNumber, CustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_AffiliateID') CREATE INDEX [IX_Orders_AffiliateID] ON [Orders](AffiliateID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_OrderDate') CREATE INDEX [IX_Orders_OrderDate] ON [Orders](OrderDate);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_OrderGUID') CREATE INDEX [IX_Orders_OrderGUID] ON [Orders](OrderGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_EMail') CREATE INDEX [IX_Orders_EMail] ON [Orders](Email);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_IsNew') CREATE INDEX [IX_Orders_IsNew] ON [Orders](IsNew);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_CouponCode') CREATE INDEX [IX_Orders_CouponCode] ON [Orders](CouponCode);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders]') AND name = N'IX_Orders_TransactionState') CREATE INDEX [IX_Orders_TransactionState] ON [Orders](TransactionState);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_KitCart]') AND name = N'IX_Orders_KitCart_OrderNumber') CREATE CLUSTERED INDEX [IX_Orders_KitCart_OrderNumber] ON [Orders_KitCart](OrderNumber);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_KitCart]') AND name = N'IX_Orders_KitCart_ProductID_VariantID') CREATE INDEX [IX_Orders_KitCart_ProductID_VariantID] ON [Orders_KitCart](ProductID, VariantID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_KitCart]') AND name = N'IX_Orders_KitCart_CreatedOn') CREATE INDEX [IX_Orders_KitCart_CreatedOn] ON [Orders_KitCart](CreatedOn);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_KitCart]') AND name = N'IX_Orders_KitCart_KitCartRecID') CREATE INDEX [IX_Orders_KitCart_KitCartRecID] ON [Orders_KitCart](KitCartRecID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_KitCart]') AND name = N'IX_Orders_KitCart_CustomerID') CREATE INDEX [IX_Orders_KitCart_CustomerID] ON [Orders_KitCart](CustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_KitCart]') AND name = N'IX_Orders_KitCart_ShoppingCartRecID') CREATE INDEX [IX_Orders_KitCart_ShoppingCartRecID] ON [Orders_KitCart](ShoppingCartRecID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_KitCart]') AND name = N'IX_Orders_KitCart_KitGroupID') CREATE INDEX [IX_Orders_KitCart_KitGroupID] ON [Orders_KitCart](KitGroupID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_ShoppingCart]') AND name = N'IX_Orders_ShoppingCart_OrderNumber_CustomerID') CREATE CLUSTERED INDEX [IX_Orders_ShoppingCart_OrderNumber_CustomerID] ON [Orders_ShoppingCart](OrderNumber, CustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_ShoppingCart]') AND name = N'IX_Orders_ShoppingCart_OrderedProductSKU') CREATE INDEX [IX_Orders_ShoppingCart_OrderedProductSKU] ON [Orders_ShoppingCart](OrderedProductSKU);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_ShoppingCart]') AND name = N'IX_Orders_ShoppingCart_CustomerID') CREATE INDEX [IX_Orders_ShoppingCart_CustomerID] ON [Orders_ShoppingCart](CustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_ShoppingCart]') AND name = N'IX_Orders_ShoppingCart_ShoppingCartRecID') CREATE INDEX [IX_Orders_ShoppingCart_ShoppingCartRecID] ON [Orders_ShoppingCart](ShoppingCartRecID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_ShoppingCart]') AND name = N'IX_Orders_ShoppingCart_ProductID') CREATE INDEX [IX_Orders_ShoppingCart_ProductID] ON [Orders_ShoppingCart](ProductID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_ShoppingCart]') AND name = N'IX_Orders_ShoppingCart_ProductID_VariantID_ChosenColor_ChosenSize') CREATE INDEX [IX_Orders_ShoppingCart_ProductID_VariantID_ChosenColor_ChosenSize] ON [Orders_ShoppingCart](ProductID, VariantID, ChosenColor, ChosenSize);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Orders_ShoppingCart]') AND name = N'IX_Orders_ShoppingCart_CreatedOn') CREATE INDEX [IX_Orders_ShoppingCart_CreatedOn] ON [Orders_ShoppingCart](CreatedOn);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PasswordLog]') AND name = N'CIX_PasswordLog') CREATE CLUSTERED INDEX [CIX_PasswordLog] ON [PasswordLog](CustomerID, ChangeDt);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'UIX_Product_ProductGUID') CREATE UNIQUE INDEX [UIX_Product_ProductGUID] ON [Product](ProductGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_SKU') CREATE INDEX [IX_Product_SKU] ON [Product](SKU);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_IsImport') CREATE INDEX [IX_Product_IsImport] ON [Product](IsImport);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_IsSystem') CREATE INDEX [IX_Product_IsSystem] ON [Product](IsSystem);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_Published') CREATE INDEX [IX_Product_Published] ON [Product](Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_Wholesale') CREATE INDEX [IX_Product_Wholesale] ON [Product](Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_Deleted') CREATE INDEX [IX_Product_Deleted] ON [Product](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_ProductTypeID') CREATE INDEX [IX_Product_ProductTypeID] ON [Product](ProductTypeID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_IsAKit') CREATE INDEX [IX_Product_IsAKit] ON [Product](IsAKit);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_Name') CREATE INDEX [IX_Product_Name] ON [Product](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_ManufacturerPartNumber') CREATE INDEX [IX_Product_ManufacturerPartNumber] ON [Product](ManufacturerPartNumber);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_Published_Deleted') CREATE INDEX [IX_Product_Published_Deleted] ON [Product](Published, Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_Wholesale_Deleted') CREATE INDEX [IX_Product_Wholesale_Deleted] ON [Product](Wholesale, Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Product]') AND name = N'IX_Product_Published_Deleted_IsAKit') CREATE NONCLUSTERED INDEX [IX_Product_Published_Deleted_IsAKit] ON [dbo].[Product] ([Published],[Deleted],[IsAKit]) INCLUDE ([ProductID],[Name],[ProductTypeID],[TrackInventoryBySizeAndColor])
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductCategory]') AND name = N'IX_Product_ProductID') CREATE INDEX [IX_Product_ProductID] ON [ProductCategory](ProductID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductCategory]') AND name = N'IX_Category_CategoryID') CREATE INDEX [IX_Category_CategoryID] ON [ProductCategory](CategoryID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductSection]') AND name = N'IX_ProductSection_SectionID_DisplayOrder') CREATE INDEX [IX_ProductSection_SectionID_DisplayOrder] ON [ProductSection](SectionID, DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductType]') AND name = N'IX_ProductType_ProductTypeGUID') CREATE INDEX [IX_ProductType_ProductTypeGUID] ON [ProductType](ProductTypeGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductType]') AND name = N'IX_ProductType_Name') CREATE INDEX [IX_ProductType_Name] ON [ProductType](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductType]') AND name = N'IX_ProductType_DisplayOrder') CREATE INDEX [IX_ProductType_DisplayOrder] ON [ProductType](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductType]') AND name = N'IX_ProductType_DisplayOrder_Name') CREATE INDEX [IX_ProductType_DisplayOrder_Name] ON [ProductType](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'UIX_ProductVariant_VariantID') CREATE UNIQUE INDEX [UIX_ProductVariant_VariantID] ON [ProductVariant](VariantGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_ProductID') CREATE INDEX [IX_ProductVariant_ProductID] ON [ProductVariant](ProductID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_SKUSuffix') CREATE INDEX [IX_ProductVariant_SKUSuffix] ON [ProductVariant](SKUSuffix);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_ManufacturerPartNumber') CREATE INDEX [IX_ProductVariant_ManufacturerPartNumber] ON [ProductVariant](ManufacturerPartNumber);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_Deleted') CREATE INDEX [IX_ProductVariant_Deleted] ON [ProductVariant](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_Published') CREATE INDEX [IX_ProductVariant_Published] ON [ProductVariant](Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_Wholesale') CREATE INDEX [IX_ProductVariant_Wholesale] ON [ProductVariant](Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_Deleted_Published') CREATE INDEX [IX_ProductVariant_Deleted_Published] ON [ProductVariant](Deleted, Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_Deleted_Wholesale') CREATE INDEX [IX_ProductVariant_Deleted_Wholesale] ON [ProductVariant](Deleted, Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_IsDefault') CREATE INDEX [IX_ProductVariant_IsDefault] ON [ProductVariant](IsDefault);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_DisplayOrder') CREATE INDEX [IX_ProductVariant_DisplayOrder] ON [ProductVariant](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_Name') CREATE INDEX [IX_ProductVariant_Name] ON [ProductVariant](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ProductVariant]') AND name = N'IX_ProductVariant_DisplayOrder_Name') CREATE INDEX [IX_ProductVariant_DisplayOrder_Name] ON [ProductVariant](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Profile]') AND name = N'IX_Profile_CustomerGuid') CREATE INDEX [IX_Profile_CustomerGuid] ON [Profile](CustomerGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Promotions]') AND name = N'XMLIX_Promotions_PromotionRuleData') CREATE PRIMARY XML INDEX [XMLIX_Promotions_PromotionRuleData] ON [Promotions](PromotionRuleData)
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Promotions]') AND name = N'XMLIX_Promotions_PromotionRuleData_Path') CREATE XML INDEX [XMLIX_Promotions_PromotionRuleData_Path] ON [Promotions](PromotionRuleData) USING XML INDEX XMLIX_Promotions_PromotionRuleData FOR PATH
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Promotions]') AND name = N'XMLIX_Promotions_PromotionDiscountData') CREATE PRIMARY XML INDEX [XMLIX_Promotions_PromotionDiscountData] ON [Promotions](PromotionDiscountData)
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Promotions]') AND name = N'XMLIX_Promotions_PromotionDiscountData_Path') CREATE XML INDEX [XMLIX_Promotions_PromotionDiscountData_Path] ON [Promotions](PromotionDiscountData) USING XML INDEX XMLIX_Promotions_PromotionDiscountData FOR PATH
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[QuantityDiscount]') AND name = N'UIX_QuantityDiscount_QuantityDiscountGUID') CREATE UNIQUE INDEX [UIX_QuantityDiscount_QuantityDiscountGUID] ON [QuantityDiscount](QuantityDiscountGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[QuantityDiscount]') AND name = N'IX_QuantityDiscount_DisplayOrder') CREATE INDEX [IX_QuantityDiscount_DisplayOrder] ON [QuantityDiscount](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[QuantityDiscount]') AND name = N'IX_QuantityDiscount_DisplayOrder_Name') CREATE INDEX [IX_QuantityDiscount_DisplayOrder_Name] ON [QuantityDiscount](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[QuantityDiscount]') AND name = N'IX_QuantityDiscount_Name') CREATE INDEX [IX_QuantityDiscount_Name] ON [QuantityDiscount](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[QuantityDiscountTable]') AND name = N'UIX_QuantityDiscountTable_QuantityDiscountTableGUID') CREATE UNIQUE INDEX [UIX_QuantityDiscountTable_QuantityDiscountTableGUID] ON [QuantityDiscountTable](QuantityDiscountTableGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[QuantityDiscountTable]') AND name = N'IX_QuantityDiscountTable_QuantityDiscountTableID') CREATE INDEX [IX_QuantityDiscountTable_QuantityDiscountTableID] ON [QuantityDiscountTable](QuantityDiscountID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[QuantityDiscountTable]') AND name = N'IX_QuantityDiscountTable_LowQuantity_HighQuantity') CREATE INDEX [IX_QuantityDiscountTable_LowQuantity_HighQuantity] ON [QuantityDiscountTable](LowQuantity, HighQuantity);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Rating]') AND name = N'IX_Rating_FoundNotHelpful') CREATE INDEX [IX_Rating_FoundNotHelpful] ON [Rating](FoundNotHelpful);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Rating]') AND name = N'IX_Rating_CreatedOn') CREATE INDEX [IX_Rating_CreatedOn] ON [Rating](CreatedOn);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Rating]') AND name = N'IX_Rating') CREATE INDEX [IX_Rating] ON [Rating](HasComment);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Rating]') AND name = N'IX_Rating_ProductID') CREATE INDEX [IX_Rating_ProductID] ON [Rating](ProductID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Rating]') AND name = N'IX_Rating_CustomerID') CREATE INDEX [IX_Rating_CustomerID] ON [Rating](CustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Rating]') AND name = N'IX_Rating_IsROTD') CREATE INDEX [IX_Rating_IsROTD] ON [Rating](IsROTD);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Rating]') AND name = N'IX_Rating_FoundHelpful') CREATE INDEX [IX_Rating_FoundHelpful] ON [Rating](FoundHelpful);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Rating]') AND name = N'IX_Rating_IsFilthy') CREATE INDEX [IX_Rating_IsFilthy] ON [Rating](IsFilthy);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RatingCommentHelpfulness]') AND name = N'IX_RatingCommentHelpfulness_StoreID') CREATE INDEX [IX_RatingCommentHelpfulness_StoreID] ON [RatingCommentHelpfulness](StoreID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RatingCommentHelpfulness]') AND name = N'IX_RatingCommentHelpfulness_VotingCustomerID') CREATE INDEX [IX_RatingCommentHelpfulness_VotingCustomerID] ON [RatingCommentHelpfulness](VotingCustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RatingCommentHelpfulness]') AND name = N'IX_RatingCommentHelpfulness_ProductID') CREATE INDEX [IX_RatingCommentHelpfulness_ProductID] ON [RatingCommentHelpfulness](ProductID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RatingCommentHelpfulness]') AND name = N'IX_RatingCommentHelpfulness_RatingCustomerID') CREATE INDEX [IX_RatingCommentHelpfulness_RatingCustomerID] ON [RatingCommentHelpfulness](RatingCustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RatingCommentHelpfulness]') AND name = N'IX_RatingCommentHelpfulness_Helpful') CREATE INDEX [IX_RatingCommentHelpfulness_Helpful] ON [RatingCommentHelpfulness](Helpful);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SalesPrompt]') AND name = N'UIX_SalesPrompt_SalesPromptGUID') CREATE UNIQUE INDEX [UIX_SalesPrompt_SalesPromptGUID] ON [SalesPrompt](SalesPromptGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SalesPrompt]') AND name = N'IX_SalesPrompt_Deleted') CREATE INDEX [IX_SalesPrompt_Deleted] ON [SalesPrompt](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SalesPrompt]') AND name = N'IX_SalesPrompt_Name') CREATE INDEX [IX_SalesPrompt_Name] ON [SalesPrompt](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Section]') AND name = N'UIX_Section_SectionGUID') CREATE UNIQUE INDEX [UIX_Section_SectionGUID] ON [Section](SectionGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Section]') AND name = N'IX_Section_ParentSectionID') CREATE INDEX [IX_Section_ParentSectionID] ON [Section](ParentSectionID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Section]') AND name = N'IX_Section_DisplayOrder') CREATE INDEX [IX_Section_DisplayOrder] ON [Section](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Section]') AND name = N'IX_Section_Name') CREATE INDEX [IX_Section_Name] ON [Section](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Section]') AND name = N'IX_Section_DisplayOrder_Name') CREATE INDEX [IX_Section_DisplayOrder_Name] ON [Section](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Section]') AND name = N'IX_Section_Published') CREATE INDEX [IX_Section_Published] ON [Section](Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Section]') AND name = N'IX_Section_Wholesale') CREATE INDEX [IX_Section_Wholesale] ON [Section](Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Section]') AND name = N'IX_Section_Deleted') CREATE INDEX [IX_Section_Deleted] ON [Section](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Section]') AND name = N'IX_Section_Deleted_Published') CREATE INDEX [IX_Section_Deleted_Published] ON [Section](Deleted, Published);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Section]') AND name = N'IX_Section_Deleted_Wholesale') CREATE INDEX [IX_Section_Deleted_Wholesale] ON [Section](Deleted, Wholesale);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingByProduct]') AND name = N'UIX_ShippingByProduct_ShippingByProductGUID') CREATE UNIQUE INDEX [UIX_ShippingByProduct_ShippingByProductGUID] ON [ShippingByProduct](ShippingByProductGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingByTotal]') AND name = N'IX_ShippingByTotal_ShippingMethodID_LowValue_HighValue') CREATE INDEX [IX_ShippingByTotal_ShippingMethodID_LowValue_HighValue] ON [ShippingByTotal](ShippingMethodID, LowValue, HighValue);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingByTotal]') AND name = N'IX_ShippingByTotal_RowGUID') CREATE INDEX [IX_ShippingByTotal_RowGUID] ON [ShippingByTotal](RowGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingByTotalByPercent]') AND name = N'IX_ShippingByTotalByPercent_ShippingMethodID_LowValue_HighValue') CREATE INDEX [IX_ShippingByTotalByPercent_ShippingMethodID_LowValue_HighValue] ON [ShippingByTotalByPercent](ShippingMethodID, LowValue, HighValue);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingByTotalByPercent]') AND name = N'IX_ShippingByTotalByPercent_RowGUID') CREATE INDEX [IX_ShippingByTotalByPercent_RowGUID] ON [ShippingByTotalByPercent](RowGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingByWeight]') AND name = N'IX_ShippingByWeight_ShippingMethodID_LowValue_HighValue') CREATE INDEX [IX_ShippingByWeight_ShippingMethodID_LowValue_HighValue] ON [ShippingByWeight](ShippingMethodID, LowValue, HighValue);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingByWeight]') AND name = N'IX_ShippingByWeight_RowGUID') CREATE INDEX [IX_ShippingByWeight_RowGUID] ON [ShippingByWeight](RowGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingCalculation]') AND name = N'UIX_ShippingCalculation_ShippingCalculationID') CREATE UNIQUE INDEX [UIX_ShippingCalculation_ShippingCalculationID] ON [ShippingCalculation](ShippingCalculationGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingCalculation]') AND name = N'IX_ShippingCalculation_DisplayOrder') CREATE INDEX [IX_ShippingCalculation_DisplayOrder] ON [ShippingCalculation](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingCalculation]') AND name = N'IX_ShippingCalculation_Name') CREATE INDEX [IX_ShippingCalculation_Name] ON [ShippingCalculation](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingCalculation]') AND name = N'IX_ShippingCalculation_DisplayOrder_Name') CREATE INDEX [IX_ShippingCalculation_DisplayOrder_Name] ON [ShippingCalculation](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingMethod]') AND name = N'UIX_ShippingMethod_ShippingMethodGUID') CREATE UNIQUE INDEX [UIX_ShippingMethod_ShippingMethodGUID] ON [ShippingMethod](ShippingMethodGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingMethod]') AND name = N'IX_ShippingMethod_IsRTShipping') CREATE INDEX [IX_ShippingMethod_IsRTShipping] ON [ShippingMethod](IsRTShipping);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingMethod]') AND name = N'IX_ShippingMethod_DisplayOrder') CREATE INDEX [IX_ShippingMethod_DisplayOrder] ON [ShippingMethod](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingTotalByZone]') AND name = N'IX_ShippingTotalByZone_RowGUID') CREATE INDEX [IX_ShippingTotalByZone_RowGUID] ON [ShippingTotalByZone](RowGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingTotalByZone]') AND name = N'IX_ShippingTotalByZone_ShippingZoneID_LowValue_HighValue') CREATE INDEX [IX_ShippingTotalByZone_ShippingZoneID_LowValue_HighValue] ON [ShippingTotalByZone](ShippingZoneID, LowValue, HighValue);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingWeightByZone]') AND name = N'IX_ShippingWeightByZone_RowGUID') CREATE INDEX [IX_ShippingWeightByZone_RowGUID] ON [ShippingWeightByZone](RowGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingWeightByZone]') AND name = N'IX_ShippingWeightByZone_ShippingZoneID_LowValue_HighValue') CREATE INDEX [IX_ShippingWeightByZone_ShippingZoneID_LowValue_HighValue] ON [ShippingWeightByZone](ShippingZoneID, LowValue, HighValue);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingZone]') AND name = N'UIX_ShippingZone_ShippingZoneGUID') CREATE UNIQUE INDEX [UIX_ShippingZone_ShippingZoneGUID] ON [ShippingZone](ShippingZoneGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingZone]') AND name = N'IX_ShippingZone_DisplayOrder') CREATE INDEX [IX_ShippingZone_DisplayOrder] ON [ShippingZone](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShippingZone]') AND name = N'IX_ShippingZone_Deleted') CREATE INDEX [IX_ShippingZone_Deleted] ON [ShippingZone](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'UIX_ShoppingCart_ShoppingCartRecGUID') CREATE UNIQUE INDEX [UIX_ShoppingCart_ShoppingCartRecGUID] ON [ShoppingCart](ShoppingCartRecGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'IX_ShoppingCart_CustomerID') CREATE INDEX [IX_ShoppingCart_CustomerID] ON [ShoppingCart](CustomerID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'IX_ShoppingCart_CustomerID_CartType') CREATE INDEX [IX_ShoppingCart_CustomerID_CartType] ON [ShoppingCart](CustomerID, CartType);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'IX_ShoppingCart_ProductID') CREATE INDEX [IX_ShoppingCart_ProductID] ON [ShoppingCart](ProductID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'IX_ShoppingCart_VariantID') CREATE INDEX [IX_ShoppingCart_VariantID] ON [ShoppingCart](VariantID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'IX_ShoppingCart_ProductID_VariantID_ChosenColor_ChosenSize') CREATE INDEX [IX_ShoppingCart_ProductID_VariantID_ChosenColor_ChosenSize] ON [ShoppingCart](ProductID, VariantID, ChosenColor, ChosenSize);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'IX_ShoppingCart_CreatedOn') CREATE INDEX [IX_ShoppingCart_CreatedOn] ON [ShoppingCart](CreatedOn);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'IX_ShoppingCart_CartType') CREATE INDEX [IX_ShoppingCart_CartType] ON [ShoppingCart](CartType);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'IX_ShoppingCart_CartType_RecurringSubscriptionID') CREATE INDEX [IX_ShoppingCart_CartType_RecurringSubscriptionID] ON [ShoppingCart](CartType, RecurringSubscriptionID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'IX_ShoppingCart_NextRecurringShipDate') CREATE INDEX [IX_ShoppingCart_NextRecurringShipDate] ON [ShoppingCart](NextRecurringShipDate);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ShoppingCart]') AND name = N'IX_ShoppingCart_RecurringIndex') CREATE INDEX [IX_ShoppingCart_RecurringIndex] ON [ShoppingCart](RecurringIndex);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[State]') AND name = N'UIX_State_StateGUID') CREATE UNIQUE INDEX [UIX_State_StateGUID] ON [State](StateGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[State]') AND name = N'UIX_State_Country_Abbrv') CREATE UNIQUE INDEX [UIX_State_Country_Abbrv] ON [State](CountryID, Abbreviation);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[State]') AND name = N'IX_State_DisplayOrder') CREATE INDEX [IX_State_DisplayOrder] ON [State](DisplayOrder);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[State]') AND name = N'IX_State_Name') CREATE INDEX [IX_State_Name] ON [State](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[State]') AND name = N'IX_State_DisplayOrder_Name') CREATE INDEX [IX_State_DisplayOrder_Name] ON [State](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[State]') AND name = N'IX_State_CountryID') CREATE INDEX [IX_State_CountryID] ON [State](CountryID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StateTaxRate]') AND name = N'UIX_StateTaxRate_StateID_TaxClassID') CREATE UNIQUE INDEX [UIX_StateTaxRate_StateID_TaxClassID] ON [StateTaxRate](StateID, TaxClassID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StringResource]') AND name = N'UIX_StringResource_Name_LocaleSetting_StoreId') CREATE UNIQUE INDEX [UIX_StringResource_Name_LocaleSetting_StoreId] ON [StringResource](Name, LocaleSetting, StoreID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Topic]') AND name = N'UIX_Topic_TopicGUID') CREATE UNIQUE INDEX [UIX_Topic_TopicGUID] ON [Topic](TopicGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Topic]') AND name = N'IX_Topic_Deleted') CREATE INDEX [IX_Topic_Deleted] ON [Topic](Deleted);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Topic]') AND name = N'IX_Topic_ShowInSiteMap') CREATE INDEX [IX_Topic_ShowInSiteMap] ON [Topic](ShowInSiteMap);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Vector]') AND name = N'UIX_Vector_VectorGUID') CREATE UNIQUE INDEX [UIX_Vector_VectorGUID] ON [Vector](VectorGUID);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Vector]') AND name = N'IX_Vector_Name') CREATE INDEX [IX_Vector_Name] ON [Vector](Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Vector]') AND name = N'IX_Vector_DisplayOrder_Name') CREATE INDEX [IX_Vector_DisplayOrder_Name] ON [Vector](DisplayOrder, Name);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ZipTaxRate]') AND name = N'UIX_ZipTaxRate_ZipCode_TaxClassID_CountryID') CREATE UNIQUE INDEX [UIX_ZipTaxRate_ZipCode_TaxClassID_CountryID] ON [ZipTaxRate](ZipCode, TaxClassID, CountryID);

END
GO
PRINT N'Creating [dbo].[aspdnsf_UpdateStatistics]...';

GO

CREATE PROCEDURE [dbo].[aspdnsf_UpdateStatistics]
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @cmd NVARCHAR(MAX), @tableName VARCHAR(128)
	CREATE TABLE #TableNames(
		Name VARCHAR(128))

	INSERT INTO #TableNames
	SELECT o.name
	FROM sys.sysobjects o
	WHERE xtype = 'U'
	ORDER BY o.name

	DECLARE statCursor CURSOR
		FOR SELECT Name FROM #TableNames
	OPEN statCursor
	FETCH NEXT FROM statCursor
		INTO @tableName
	WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @cmd = 'UPDATE STATISTICS ' + @tableName
			EXEC (@cmd)

		FETCH NEXT FROM statCursor
			INTO @tableName
		END
	CLOSE statCursor
	DEALLOCATE statCursor
END
GO
PRINT N'Creating [dbo].[aspdnsf_UpdateZipTaxRateCountry]...';

GO


create proc [dbo].[aspdnsf_UpdateZipTaxRateCountry]
    @ZipTaxID int,
	@ZipCode nvarchar (20),
    @TaxRate money,
	@CountryID int,
	@OriginalCountryID int

AS
SET NOCOUNT ON


UPDATE dbo.ZipTaxRate
SET
    TaxRate = COALESCE(@TaxRate, TaxRate), CountryID = (COALESCE(@CountryID, CountryID)), ZipCode = (COALESCE(@ZipCode, ZipCode))
WHERE ZipTaxID = @ZipTaxID AND CountryID = @OriginalCountryID
GO
PRINT N'Creating [dbo].[aspdnsf_updBadWord]...';

GO


create proc [dbo].[aspdnsf_updBadWord]
    @BadWordID int,
    @LocaleSetting nvarchar(10)      = null,
    @Word nvarchar(100)              = null

AS
UPDATE [dbo].[BadWord]
   SET [LocaleSetting]               = COALESCE(@LocaleSetting,[LocaleSetting]),
       [Word]                        = COALESCE(@Word,[Word])
 WHERE BadWordID = @BadWordID
GO
PRINT N'Creating [dbo].[aspdnsf_updCountryTaxRate]...';

GO


create proc [dbo].[aspdnsf_updCountryTaxRate]
    @CountryTaxID int,
    @TaxRate money

AS
SET NOCOUNT ON


UPDATE dbo.CountryTaxRate
SET
    TaxRate = COALESCE(@TaxRate, TaxRate)
WHERE CountryTaxID = @CountryTaxID
GO
PRINT N'Creating [dbo].[aspdnsf_updCustomer]...';

GO
CREATE proc [dbo].[aspdnsf_updCustomer]
	@CustomerID int,
	@CustomerLevelID int = null,
	@Email nvarchar(100) = null,
	@Password nvarchar(250) = null,
	@SaltKey int = null,
	@Gender nvarchar(1) = null,
	@FirstName nvarchar(100) = null,
	@LastName nvarchar(100) = null,
	@Notes nvarchar(max) = null,
	@SkinID int = null,
	@Phone nvarchar(25) = null,
	@AffiliateID int = null,
	@Referrer nvarchar(max) = null,
	@CouponCode nvarchar(50) = null,
	@OkToEmail tinyint = null,
	@IsAdmin tinyint = null,
	@BillingEqualsShipping tinyint = null,
	@LastIPAddress varchar(40) = null,
	@OrderNotes nvarchar(max) = null,
	@RTShipRequest nvarchar(max) = null,
	@RTShipResponse nvarchar(max) = null,
	@OrderOptions nvarchar(max) = null,
	@LocaleSetting nvarchar(10) = null,
	@MicroPayBalance money = null,
	@RecurringShippingMethodID int = null,
	@RecurringShippingMethod nvarchar(100) = null,
	@BillingAddressID int = null,
	@ShippingAddressID int = null,
	@ExtensionData nvarchar(max) = null,
	@FinalizationData nvarchar(max) = null,
	@Deleted tinyint = null,
	@Over13Checked tinyint = null,
	@CurrencySetting nvarchar(10) = null,
	@VATSetting int = null,
	@VATRegistrationID nvarchar(100) = null,
	@StoreCCInDB tinyint = null,
	@IsRegistered tinyint = null,
	@LockedUntil datetime = null,
	@AdminCanViewCC tinyint = null,
	@BadLogin smallint = 0, --only pass -1 = null, 0 = null, or 1: -1 clears the field = null, 0 does nothing = null, 1 increments the field by one
	@Active tinyint = null,
	@PwdChangeRequired tinyint = null,
	@RegisterDate datetime = null,
	@RequestedPaymentMethod  nvarchar(100) = null,
	@ClearSavedCCNumbers bit = 0,
	@StoreID	int = null
AS
SET NOCOUNT ON

DECLARE @OldPwd nvarchar(100), @OldSaltKey int
SELECT @OldPwd = Password, @OldSaltKey = SaltKey FROM dbo.Customer WHERE CustomerID = @CustomerID

UPDATE dbo.Customer
SET
	CustomerLevelID = COALESCE(@CustomerLevelID, CustomerLevelID),
	RegisterDate = COALESCE(@RegisterDate, RegisterDate),
	Email = COALESCE(@Email, Email),
	Password = COALESCE(@Password, Password),
	SaltKey = COALESCE(@SaltKey, SaltKey),
	Gender = COALESCE(@Gender, Gender),
	FirstName = COALESCE(@FirstName, FirstName),
	LastName = COALESCE(@LastName, LastName),
	Notes = COALESCE(@Notes, Notes),
	SkinID = COALESCE(@SkinID, SkinID),
	Phone = COALESCE(@Phone, Phone),
	AffiliateID = COALESCE(@AffiliateID, AffiliateID),
	Referrer = COALESCE(@Referrer, Referrer),
	CouponCode = COALESCE(@CouponCode, CouponCode),
	OkToEmail = COALESCE(@OkToEmail, OkToEmail),
	IsAdmin = COALESCE(@IsAdmin, IsAdmin),
	BillingEqualsShipping = COALESCE(@BillingEqualsShipping, BillingEqualsShipping),
	LastIPAddress = COALESCE(@LastIPAddress, LastIPAddress),
	OrderNotes = COALESCE(@OrderNotes, OrderNotes),
	RTShipRequest = COALESCE(@RTShipRequest, RTShipRequest),
	RTShipResponse = COALESCE(@RTShipResponse, RTShipResponse),
	OrderOptions = COALESCE(@OrderOptions, OrderOptions),
	LocaleSetting = COALESCE(@LocaleSetting, LocaleSetting),
	MicroPayBalance = COALESCE(@MicroPayBalance, MicroPayBalance),
	RecurringShippingMethodID = COALESCE(@RecurringShippingMethodID, RecurringShippingMethodID),
	RecurringShippingMethod = COALESCE(@RecurringShippingMethod, RecurringShippingMethod),
	BillingAddressID = COALESCE(@BillingAddressID, BillingAddressID),
	ShippingAddressID = COALESCE(@ShippingAddressID, ShippingAddressID),
	ExtensionData = COALESCE(@ExtensionData, ExtensionData),
	FinalizationData = COALESCE(@FinalizationData, FinalizationData),
	Deleted = COALESCE(@Deleted, Deleted),
	Over13Checked = COALESCE(@Over13Checked, Over13Checked),
	CurrencySetting = COALESCE(@CurrencySetting, CurrencySetting),
	VATSetting = COALESCE(@VATSetting, VATSetting),
	VATRegistrationID = COALESCE(@VATRegistrationID, VATRegistrationID),
	StoreCCInDB = COALESCE(@StoreCCInDB, StoreCCInDB),
	IsRegistered = COALESCE(@IsRegistered, IsRegistered),
	LockedUntil = COALESCE(@LockedUntil, LockedUntil),
	AdminCanViewCC = COALESCE(@AdminCanViewCC, AdminCanViewCC),
	PwdChanged = CASE
		WHEN @OldPwd <> @Password AND @Password IS NOT NULL THEN getdate()
		ELSE PwdChanged END,
	BadLoginCount = CASE @BadLogin
		WHEN -1 THEN 0
		ELSE BadLoginCount + isnull(@BadLogin, 0) END,
	LastBadLogin = CASE @BadLogin
		WHEN -1 THEN NULL
		WHEN 1 THEN getdate()
		ELSE LastBadLogin END,
	Active = COALESCE(@Active, Active),
	PwdChangeRequired = COALESCE(@PwdChangeRequired, PwdChangeRequired),
	RequestedPaymentMethod = COALESCE(@RequestedPaymentMethod, RequestedPaymentMethod),
	StoreID = COALESCE(@StoreID, StoreID)
WHERE
	CustomerID = @CustomerID
	-- Only update the row if any fields will actually change
	AND (
		@CustomerLevelID is not null and (CustomerLevelID is null or CustomerLevelID != @CustomerLevelID)
		OR @RegisterDate is not null and (RegisterDate is null or RegisterDate != @RegisterDate)
		OR @Email is not null and (Email is null or Email != @Email)
		OR @Password is not null and ([Password] is null or [Password] != @Password)
		OR @SaltKey is not null and (SaltKey is null or SaltKey != @SaltKey)
		OR @Gender is not null and (Gender is null or Gender != @Gender)
		OR @FirstName is not null and (FirstName is null or FirstName != @FirstName)
		OR @LastName is not null and (LastName is null or LastName != @LastName)
		OR @Notes is not null and (Notes is null or Notes != @Notes)
		OR @SkinID is not null and (SkinID is null or SkinID != @SkinID)
		OR @Phone is not null and (Phone is null or Phone != @Phone)
		OR @AffiliateID is not null and (AffiliateID is null or AffiliateID != @AffiliateID)
		OR @Referrer is not null and (Referrer is null or Referrer != @Referrer)
		OR @CouponCode is not null and (CouponCode is null or CouponCode != @CouponCode)
		OR @OkToEmail is not null and (OkToEmail is null or OkToEmail != @OkToEmail)
		OR @IsAdmin is not null and (IsAdmin is null or IsAdmin != @IsAdmin)
		OR @BillingEqualsShipping is not null and (BillingEqualsShipping is null or BillingEqualsShipping != @BillingEqualsShipping)
		OR @LastIPAddress is not null and (LastIPAddress is null or LastIPAddress != @LastIPAddress)
		OR @OrderNotes is not null and (OrderNotes is null or OrderNotes != @OrderNotes)
		OR @RTShipRequest is not null and (RTShipRequest is null or RTShipRequest != @RTShipRequest)
		OR @RTShipResponse is not null and (RTShipResponse is null or RTShipResponse != @RTShipResponse)
		OR @OrderOptions is not null and (OrderOptions is null or OrderOptions != @OrderOptions)
		OR @LocaleSetting is not null and (LocaleSetting is null or LocaleSetting != @LocaleSetting)
		OR @MicroPayBalance is not null and (MicroPayBalance is null or MicroPayBalance != @MicroPayBalance)
		OR @RecurringShippingMethodID is not null and (RecurringShippingMethodID is null or RecurringShippingMethodID != @RecurringShippingMethodID)
		OR @RecurringShippingMethod is not null and (RecurringShippingMethod is null or RecurringShippingMethod != @RecurringShippingMethod)
		OR @BillingAddressID is not null and (BillingAddressID is null or BillingAddressID != @BillingAddressID)
		OR @ShippingAddressID is not null and (ShippingAddressID is null or ShippingAddressID != @ShippingAddressID)
		OR @ExtensionData is not null and (ExtensionData is null or ExtensionData != @ExtensionData)
		OR @FinalizationData is not null and (FinalizationData is null or FinalizationData != @FinalizationData)
		OR @Deleted is not null and (Deleted is null or Deleted != @Deleted)
		OR @Over13Checked is not null and (Over13Checked is null or Over13Checked != @Over13Checked)
		OR @CurrencySetting is not null and (CurrencySetting is null or CurrencySetting != @CurrencySetting)
		OR @VATSetting is not null and (VATSetting is null or VATSetting != @VATSetting)
		OR @VATRegistrationID is not null and (VATRegistrationID is null or VATRegistrationID != @VATRegistrationID)
		OR @StoreCCInDB is not null and (StoreCCInDB is null or StoreCCInDB != @StoreCCInDB)
		OR @IsRegistered is not null and (IsRegistered is null or IsRegistered != @IsRegistered)
		OR @LockedUntil is not null and (LockedUntil is null or LockedUntil != @LockedUntil)
		OR @AdminCanViewCC is not null and (AdminCanViewCC is null or AdminCanViewCC != @AdminCanViewCC)
		OR @Password is not null and (@Password != @OldPwd)
		OR @BadLogin != 0
		OR @PwdChangeRequired is not null and (PwdChangeRequired is null or PwdChangeRequired != @PwdChangeRequired)
		OR @RequestedPaymentMethod is not null and (RequestedPaymentMethod is null or RequestedPaymentMethod != @RequestedPaymentMethod)
		OR @StoreID is not null and (StoreID is null or StoreID != @StoreID)
	)

IF @OldPwd <> @Password and @OldSaltKey <> 0
	INSERT dbo.PasswordLog (CustomerID, OldPwd, SaltKey, ChangeDt)
	VALUES (@CustomerID, @OldPwd, @OldSaltKey, getdate())

IF NULLIF(@ClearSavedCCNumbers, 0) = 1
BEGIN
	UPDATE Address
	SET	CardNumber = NULL,
		CardExpirationMonth = NULL,
		CardExpirationYear = NULL,
		CardStartDate = NULL,
		CardIssueNumber = NULL
	WHERE CustomerID = @CustomerID

	UPDATE Orders
	SET	CardNumber = NULL,
		CardExpirationMonth = NULL,
		CardExpirationYear = NULL,
		CardStartDate = NULL,
		CardIssueNumber = NULL
	WHERE CustomerID = @CustomerID
END
GO
PRINT N'Creating [dbo].[aspdnsf_updCustomerByEmail]...';

GO
CREATE proc [dbo].[aspdnsf_updCustomerByEmail]
    @Email nvarchar(100),
    @CustomerLevelID int = null,
    @Password nvarchar(250) = null,
    @SaltKey int = null,
    @Gender nvarchar(1) = null,
    @FirstName nvarchar(100) = null,
    @LastName nvarchar(100) = null,
    @Notes nvarchar(max) = null,
    @SkinID int = null,
    @Phone nvarchar(25) = null,
    @AffiliateID int = null,
    @Referrer nvarchar(max) = null,
    @CouponCode nvarchar(50) = null,
    @OkToEmail tinyint = null,
    @IsAdmin tinyint = null,
    @BillingEqualsShipping tinyint = null,
    @LastIPAddress varchar(40) = null,
    @OrderNotes nvarchar(max) = null,
    @RTShipRequest nvarchar(max) = null,
    @RTShipResponse nvarchar(max) = null,
    @OrderOptions nvarchar(max) = null,
    @LocaleSetting nvarchar(10) = null,
    @MicroPayBalance money = null,
    @RecurringShippingMethodID int = null,
    @RecurringShippingMethod nvarchar(100) = null,
    @BillingAddressID int = null,
    @ShippingAddressID int = null,
    @ExtensionData nvarchar(max) = null,
    @FinalizationData nvarchar(max) = null,
    @Deleted tinyint = null,
    @Over13Checked tinyint = null,
    @CurrencySetting nvarchar(10) = null,
    @VATSetting int = null,
    @VATRegistrationID nvarchar(100) = null,
    @StoreCCInDB tinyint = null,
    @IsRegistered tinyint = null,
    @LockedUntil datetime = null,
    @AdminCanViewCC tinyint = null,
    @BadLogin smallint = 0 , --only pass -1 = null, 0 = null, or 1: -1 clears the field = null, 0 does nothing = null, 1 increments the field by one
    @Active tinyint = null,
    @PwdChangeRequired tinyint = null,
    @RequestedPaymentMethod  nvarchar(100) = null

AS
SET NOCOUNT ON

DECLARE @CustomerID int, @OldPwd nvarchar(100), @IsAdminCust tinyint, @OldSaltKey int

SELECT @CustomerID = CustomerID , @OldPwd = Password, @IsAdminCust = IsAdmin, @OldSaltKey = Saltkey FROM dbo.Customer WHERE Email = @Email


UPDATE dbo.Customer
SET
    CustomerLevelID = COALESCE(@CustomerLevelID, CustomerLevelID),
    Email = COALESCE(@Email, Email),
    Password = COALESCE(@Password, Password),
    SaltKey = COALESCE(@SaltKey, SaltKey),
    Gender = COALESCE(@Gender, Gender),
    FirstName = COALESCE(@FirstName, FirstName),
    LastName = COALESCE(@LastName, LastName),
    Notes = COALESCE(@Notes, Notes),
    SkinID = COALESCE(@SkinID, SkinID),
    Phone = COALESCE(@Phone, Phone),
    AffiliateID = COALESCE(@AffiliateID, AffiliateID),
    Referrer = COALESCE(@Referrer, Referrer),
    CouponCode = COALESCE(@CouponCode, CouponCode),
    OkToEmail = COALESCE(@OkToEmail, OkToEmail),
    IsAdmin = COALESCE(@IsAdmin, IsAdmin),
    BillingEqualsShipping = COALESCE(@BillingEqualsShipping, BillingEqualsShipping),
    LastIPAddress = COALESCE(@LastIPAddress, LastIPAddress),
    OrderNotes = COALESCE(@OrderNotes, OrderNotes),
    RTShipRequest = COALESCE(@RTShipRequest, RTShipRequest),
    RTShipResponse = COALESCE(@RTShipResponse, RTShipResponse),
    OrderOptions = COALESCE(@OrderOptions, OrderOptions),
    LocaleSetting = COALESCE(@LocaleSetting, LocaleSetting),
    MicroPayBalance = COALESCE(@MicroPayBalance, MicroPayBalance),
    RecurringShippingMethodID = COALESCE(@RecurringShippingMethodID, RecurringShippingMethodID),
    RecurringShippingMethod = COALESCE(@RecurringShippingMethod, RecurringShippingMethod),
    BillingAddressID = COALESCE(@BillingAddressID, BillingAddressID),
    ShippingAddressID = COALESCE(@ShippingAddressID, ShippingAddressID),
    ExtensionData = COALESCE(@ExtensionData, ExtensionData),
    FinalizationData = COALESCE(@FinalizationData, FinalizationData),
    Deleted = COALESCE(@Deleted, Deleted),
    Over13Checked = COALESCE(@Over13Checked, Over13Checked),
    CurrencySetting = COALESCE(@CurrencySetting, CurrencySetting),
    VATSetting = COALESCE(@VATSetting, VATSetting),
    VATRegistrationID = COALESCE(@VATRegistrationID, VATRegistrationID),
    StoreCCInDB = COALESCE(@StoreCCInDB, StoreCCInDB),
    IsRegistered = COALESCE(@IsRegistered, IsRegistered),
    LockedUntil = COALESCE(@LockedUntil, LockedUntil),
    AdminCanViewCC = COALESCE(@AdminCanViewCC, AdminCanViewCC),
    PwdChanged = case when @OldPwd <> @Password and @Password is not null then getdate() else PwdChanged end,
    BadLoginCount = case @BadLogin when -1 then 0 else BadLoginCount + @BadLogin end,
    LastBadLogin = case @BadLogin when -1 then null when 1 then getdate() else LastBadLogin end,
    Active = COALESCE(@Active, Active),
    PwdChangeRequired = COALESCE(@PwdChangeRequired, PwdChangeRequired),
    RequestedPaymentMethod = COALESCE(@RequestedPaymentMethod, RequestedPaymentMethod)
WHERE Email = @Email

IF @OldPwd <> @Password and @OldSaltKey <> 0
    INSERT dbo.PasswordLog (CustomerID, OldPwd, SaltKey, ChangeDt)
    VALUES (@CustomerID, @OldPwd, @OldSaltKey, getdate())
GO
PRINT N'Creating [dbo].[aspdnsf_updEventHandler]...';

GO


create proc [dbo].[aspdnsf_updEventHandler]
    @EventID int,
    @EventName nvarchar(20) = null,
    @CalloutURL varchar(200) = null,
    @XmlPackage varchar(100) = null,
    @Active bit = null,
    @Debug bit =null

AS
SET NOCOUNT ON


    UPDATE dbo.EventHandler
    SET
        EventName = COALESCE(@EventName, EventName),
        CalloutURL = COALESCE(@CalloutURL, CalloutURL),
        XmlPackage = COALESCE(@XmlPackage, XmlPackage),
        Active = COALESCE(@Active, Active),
        Debug = COALESCE(@Debug, Debug)
    WHERE EventID = @EventID
GO
PRINT N'Creating [dbo].[aspdnsf_UpdFeed]...';

GO

create proc [dbo].[aspdnsf_UpdFeed]
    @FeedID int,
    @StoreID int,
    @Name nvarchar(100),
    @DisplayOrder int,
    @XmlPackage nvarchar(100),
    @CanAutoFTP tinyint,
    @FTPUsername nvarchar(100),
    @FTPPassword nvarchar(100),
    @FTPServer nvarchar(100),
    @FTPPort int,
    @FTPFilename nvarchar(100),
    @ExtensionData nvarchar(max)

AS
SET NOCOUNT ON


IF isnull(@XmlPackage, '') = '' BEGIN
    RAISERROR('XmlPAckage is required', 16, 1)
    RETURN
END

IF @CanAutoFTP > 1
    SET @CanAutoFTP = 1

UPDATE dbo.Feed
SET
    StoreID = COALESCE(@StoreID, StoreID),
    Name = COALESCE(@Name, Name),
    DisplayOrder = COALESCE(@DisplayOrder, DisplayOrder),
    XmlPackage = COALESCE(@XmlPackage, XmlPackage),
    CanAutoFTP = COALESCE(@CanAutoFTP, CanAutoFTP),
    FTPUsername = COALESCE(@FTPUsername, FTPUsername),
    FTPPassword = COALESCE(@FTPPassword, FTPPassword),
    FTPServer = COALESCE(@FTPServer, FTPServer),
    FTPPort = COALESCE(@FTPPort, FTPPort),
    FTPFilename = COALESCE(@FTPFilename, FTPFilename),
    ExtensionData = COALESCE(@ExtensionData, ExtensionData)
WHERE FeedID = @FeedID
GO
PRINT N'Creating [dbo].[aspdnsf_updGiftCard]...';

GO


create proc [dbo].[aspdnsf_updGiftCard]
    @GiftCardID int,
    @SerialNumber nvarchar(100),
    @OrderNumber int,
    @InitialAmount money,
    @Balance money,
    @ExpirationDate datetime,
    @EMailName nvarchar(100),
    @EMailTo nvarchar(100),
    @EMailMessage nvarchar(max),
    @ValidForCustomers nvarchar(max),
    @ValidForProducts nvarchar(max),
    @ValidForManufacturers nvarchar(max),
    @ValidForCategories nvarchar(max),
    @ValidForSections nvarchar(max),
    @DisabledByAdministrator tinyint,
    @ExtensionData nvarchar(max)

AS
SET NOCOUNT ON


UPDATE dbo.GiftCard
SET
    SerialNumber = COALESCE(@SerialNumber, SerialNumber),
    OrderNumber = COALESCE(@OrderNumber, OrderNumber),
    InitialAmount = COALESCE(@InitialAmount, InitialAmount),
    Balance = COALESCE(@Balance, Balance),
    ExpirationDate = COALESCE(@ExpirationDate, ExpirationDate),
    EMailName = COALESCE(@EMailName, EMailName),
    EMailTo = COALESCE(@EMailTo, EMailTo),
    EMailMessage = COALESCE(@EMailMessage, EMailMessage),
    ValidForCustomers = COALESCE(@ValidForCustomers, ValidForCustomers),
    ValidForProducts = COALESCE(@ValidForProducts, ValidForProducts),
    ValidForManufacturers = COALESCE(@ValidForManufacturers, ValidForManufacturers),
    ValidForCategories = COALESCE(@ValidForCategories, ValidForCategories),
    ValidForSections = COALESCE(@ValidForSections, ValidForSections),
    DisabledByAdministrator = COALESCE(@DisabledByAdministrator, DisabledByAdministrator),
    ExtensionData = COALESCE(@ExtensionData, ExtensionData)
WHERE GiftCardID = @GiftCardID
GO
PRINT N'Creating [dbo].[aspdnsf_updGiftCardUsage]...';

GO


create proc [dbo].[aspdnsf_updGiftCardUsage]
    @GiftCardUsageID int,
    @UsageTypeID int,
    @UsedByCustomerID int,
    @OrderNumber int,
    @Amount money,
    @ExtensionData nvarchar(max)

AS
SET NOCOUNT ON


UPDATE dbo.GiftCardUsage
SET
    UsageTypeID = COALESCE(@UsageTypeID, UsageTypeID),
    UsedByCustomerID = COALESCE(@UsedByCustomerID, UsedByCustomerID),
    OrderNumber = COALESCE(@OrderNumber, OrderNumber),
    Amount = COALESCE(@Amount, Amount),
    ExtensionData = COALESCE(@ExtensionData, ExtensionData)
WHERE GiftCardUsageID = @GiftCardUsageID
GO
PRINT N'Creating [dbo].[aspdnsf_updGridProductVariant]...';

GO

CREATE PROCEDURE [dbo].[aspdnsf_updGridProductVariant]
(
	@variantID int,
	@name nvarchar(255) = NULL,
	@description nvarchar(max),
	@skuSuffix nvarchar(50) = NULL,
	@Price money = NULL,
	@SalePrice money = NULL,
	@Inventory int = NULL,
	@deleted tinyint = 0,
	@published tinyint = 1
)
AS
BEGIN
SET NOCOUNT ON

UPDATE [ProductVariant] SET
	[Name] = COALESCE(@name, [Name]),
	[Description] = COALESCE(@description, [Description]),
	[SKUSuffix] = COALESCE(@skuSuffix, [skuSuffix]),
	[Price] = COALESCE(@Price, [Price]),
	[SalePrice] = COALESCE(@SalePrice, [SalePrice]),
	[Inventory] = COALESCE(@Inventory,[Inventory]),
	[Deleted] = @deleted,
	[Published] = @published
WHERE [VariantID] = @VariantID

END
GO
PRINT N'Creating [dbo].[aspdnsf_updOrderItemQuantityDiscount]...';

GO


CREATE PROC [dbo].[aspdnsf_updOrderItemQuantityDiscount]
    @OrderNumber int


AS
SET NOCOUNT ON

UPDATE dbo.orders_ShoppingCart
SET OrderedProductQuantityDiscountID = dbo.GetQtyDiscountID(sc.ProductID),
    OrderedProductQuantityDiscountPercent = COALESCE(NULLIF(dbo.GetQtyDiscount(sc.ProductID, a.ProductQuantity, 0), 0), NULLIF(dbo.GetQtyDiscount(sc.ProductID, a.ProductQuantity, 1), 0), 0)
FROM orders_ShoppingCart sc
    join (select ProductID, sum(Quantity) ProductQuantity from dbo.orders_ShoppingCart with (nolock) where OrderNumber = @OrderNumber group by ProductID) a on sc.ProductID = a.ProductID
WHERE OrderNumber = @OrderNumber

UPDATE dbo.orders_ShoppingCart
SET OrderedProductQuantityDiscountName = qd.[name]
FROM dbo.orders_ShoppingCart sc join dbo.QuantityDiscount qd on sc.OrderedProductQuantityDiscountID = qd.QuantityDiscountID
WHERE OrderNumber = @OrderNumber
GO
PRINT N'Creating [dbo].[aspdnsf_updOrders]...';

GO
create proc dbo.aspdnsf_updOrders
    @OrderNumber int,
    @ParentOrderNumber int = null,
    @StoreVersion nvarchar(100) = null,
    @QuoteCheckout tinyint = null,
    @IsNew tinyint = null,
    @ShippedOn datetime = null,
    @CustomerID int = null,
    @CustomerGUID uniqueidentifier = null,
    @Referrer nvarchar(max) = null,
    @SkinID int = null,
    @LastName nvarchar(100) = null,
    @FirstName nvarchar(100) = null,
    @Email nvarchar(100) = null,
    @Notes nvarchar(max) = null,
    @BillingEqualsShipping tinyint = null,
    @BillingLastName nvarchar(100) = null,
    @BillingFirstName nvarchar(100) = null,
    @BillingCompany nvarchar(100) = null,
    @BillingAddress1 nvarchar(100) = null,
    @BillingAddress2 nvarchar(100) = null,
    @BillingSuite nvarchar(50) = null,
    @BillingCity nvarchar(100) = null,
    @BillingState nvarchar(100) = null,
    @BillingZip nvarchar(10) = null,
    @BillingCountry nvarchar(100) = null,
    @BillingPhone nvarchar(25) = null,
    @ShippingLastName nvarchar(100) = null,
    @ShippingFirstName nvarchar(100) = null,
    @ShippingCompany nvarchar(100) = null,
    @ShippingResidenceType int = null,
    @ShippingAddress1 nvarchar(100) = null,
    @ShippingAddress2 nvarchar(100) = null,
    @ShippingSuite nvarchar(50) = null,
    @ShippingCity nvarchar(100) = null,
    @ShippingState nvarchar(100) = null,
    @ShippingZip nvarchar(10) = null,
    @ShippingCountry nvarchar(100) = null,
    @ShippingMethodID int = null,
    @ShippingMethod nvarchar(max) = null,
    @ShippingPhone nvarchar(25) = null,
    @ShippingCalculationID int = null,
    @Phone nvarchar(20) = null,
    @RegisterDate datetime = null,
    @AffiliateID int = null,
    @CouponCode nvarchar(50) = null,
    @CouponType int = null,
    @CouponDescription nvarchar(max) = null,
    @CouponDiscountAmount money = null,
    @CouponDiscountPercent money = null,
    @CouponIncludesFreeShipping tinyint = null,
    @OkToEmail tinyint = null,
    @Deleted tinyint = null,
    @CardType nvarchar(20) = null,
    @CardName nvarchar(100) = null,
    @CardNumber nvarchar(max) = null,
    @CardExpirationMonth nvarchar(10) = null,
    @CardExpirationYear nvarchar(10) = null,
    @OrderSubtotal money = null,
    @OrderTax money = null,
    @OrderShippingCosts money = null,
    @OrderTotal money = null,
    @PaymentGateway nvarchar(50) = null,
    @AuthorizationCode nvarchar(100) = null,
    @AuthorizationResult nvarchar(max) = null,
    @AuthorizationPNREF nvarchar(max) = null,
    @TransactionCommand nvarchar(max) = null,
    @OrderDate datetime = null,
    @LevelID int = null,
    @LevelName nvarchar(100) = null,
    @LevelDiscountPercent money = null,
    @LevelDiscountAmount money = null,
    @LevelHasFreeShipping tinyint = null,
    @LevelAllowsQuantityDiscounts tinyint = null,
    @LevelHasNoTax tinyint = null,
    @LevelAllowsCoupons tinyint = null,
    @LevelDiscountsApplyToExtendedPrices tinyint = null,
    @LastIPAddress varchar(40) = null,
    @PaymentMethod nvarchar(100) = null,
    @OrderNotes nvarchar(max) = null,
    @PONumber nvarchar(50) = null,
    @DownloadEmailSentOn datetime = null,
    @ReceiptEmailSentOn datetime = null,
    @DistributorEmailSentOn datetime = null,
    @ShippingTrackingNumber nvarchar(100) = null,
    @ShippedVIA nvarchar(100) = null,
    @CustomerServiceNotes nvarchar(max) = null,
    @RTShipRequest nvarchar(max) = null,
    @RTShipResponse nvarchar(max) = null,
    @TransactionState nvarchar(20) = null,
    @AVSResult nvarchar(50) = null,
    @CaptureTXCommand nvarchar(max) = null,
    @CaptureTXResult nvarchar(max) = null,
    @VoidTXCommand nvarchar(max) = null,
    @VoidTXResult nvarchar(max) = null,
    @RefundTXCommand nvarchar(max) = null,
    @RefundTXResult nvarchar(max) = null,
    @CardinalLookupResult nvarchar(max) = null,
    @CardinalAuthenticateResult nvarchar(max) = null,
    @CardinalGatewayParms nvarchar(max) = null,
    @AffiliateCommissionRecorded tinyint = null,
    @OrderOptions nvarchar(max) = null,
    @OrderWeight money = null,
    @CarrierReportedRate nvarchar(max) = null,
    @CarrierReportedWeight nvarchar(max) = null,
    @LocaleSetting nvarchar(10) = null,
    @FinalizationData nvarchar(max) = null,
    @ExtensionData nvarchar(max) = null,
    @AlreadyConfirmed tinyint = null,
    @CartType int = null,
    @Last4 nvarchar(4) = null,
    @ReadyToShip tinyint = null,
    @IsPrinted tinyint = null,
    @AuthorizedOn datetime = null,
    @CapturedOn datetime = null,
    @RefundedOn datetime = null,
    @VoidedOn datetime = null,
    @InventoryWasReduced int = null,
    @MaxMindFraudScore decimal(5, 2) = null,
    @MaxMindDetails nvarchar(max) = null,
    @CardStartDate nvarchar(20) = null,
    @CardIssueNumber nvarchar(25) = null,
    @TransactionType int = null,
    @Crypt int = null,
    @VATRegistrationID nvarchar(max) = null,
    @FraudedOn tinyint = null,
    @RefundReason nvarchar(max) = null
as
set nocount on

update dbo.Orders
set
	ParentOrderNumber = COALESCE(@ParentOrderNumber, ParentOrderNumber),
	StoreVersion = COALESCE(@StoreVersion, StoreVersion),
	QuoteCheckout = COALESCE(@QuoteCheckout, QuoteCheckout),
	IsNew = COALESCE(@IsNew, IsNew),
	ShippedOn = COALESCE(@ShippedOn, ShippedOn),
	CustomerID = COALESCE(@CustomerID, CustomerID),
	CustomerGUID = COALESCE(@CustomerGUID, CustomerGUID),
	Referrer = COALESCE(@Referrer, Referrer),
	SkinID = COALESCE(@SkinID, SkinID),
	LastName = COALESCE(@LastName, LastName),
	FirstName = COALESCE(@FirstName, FirstName),
	Email = COALESCE(@Email, Email),
	Notes = COALESCE(@Notes, Notes),
	BillingEqualsShipping = COALESCE(@BillingEqualsShipping, BillingEqualsShipping),
	BillingLastName = COALESCE(@BillingLastName, BillingLastName),
	BillingFirstName = COALESCE(@BillingFirstName, BillingFirstName),
	BillingCompany = COALESCE(@BillingCompany, BillingCompany),
	BillingAddress1 = COALESCE(@BillingAddress1, BillingAddress1),
	BillingAddress2 = COALESCE(@BillingAddress2, BillingAddress2),
	BillingSuite = COALESCE(@BillingSuite, BillingSuite),
	BillingCity = COALESCE(@BillingCity, BillingCity),
	BillingState = COALESCE(@BillingState, BillingState),
	BillingZip = COALESCE(@BillingZip, BillingZip),
	BillingCountry = COALESCE(@BillingCountry, BillingCountry),
	BillingPhone = COALESCE(@BillingPhone, BillingPhone),
	ShippingLastName = COALESCE(@ShippingLastName, ShippingLastName),
	ShippingFirstName = COALESCE(@ShippingFirstName, ShippingFirstName),
	ShippingCompany = COALESCE(@ShippingCompany, ShippingCompany),
	ShippingResidenceType = COALESCE(@ShippingResidenceType, ShippingResidenceType),
	ShippingAddress1 = COALESCE(@ShippingAddress1, ShippingAddress1),
	ShippingAddress2 = COALESCE(@ShippingAddress2, ShippingAddress2),
	ShippingSuite = COALESCE(@ShippingSuite, ShippingSuite),
	ShippingCity = COALESCE(@ShippingCity, ShippingCity),
	ShippingState = COALESCE(@ShippingState, ShippingState),
	ShippingZip = COALESCE(@ShippingZip, ShippingZip),
	ShippingCountry = COALESCE(@ShippingCountry, ShippingCountry),
	ShippingMethodID = COALESCE(@ShippingMethodID, ShippingMethodID),
	ShippingMethod = COALESCE(@ShippingMethod, ShippingMethod),
	ShippingPhone = COALESCE(@ShippingPhone, ShippingPhone),
	ShippingCalculationID = COALESCE(@ShippingCalculationID, ShippingCalculationID),
	Phone = COALESCE(@Phone, Phone),
	RegisterDate = COALESCE(@RegisterDate, RegisterDate),
	AffiliateID = COALESCE(@AffiliateID, AffiliateID),
	CouponCode = COALESCE(@CouponCode, CouponCode),
	CouponType = COALESCE(@CouponType, CouponType),
	CouponDescription = COALESCE(@CouponDescription, CouponDescription),
	CouponDiscountAmount = COALESCE(@CouponDiscountAmount, CouponDiscountAmount),
	CouponDiscountPercent = COALESCE(@CouponDiscountPercent, CouponDiscountPercent),
	CouponIncludesFreeShipping = COALESCE(@CouponIncludesFreeShipping, CouponIncludesFreeShipping),
	OkToEmail = COALESCE(@OkToEmail, OkToEmail),
	Deleted = COALESCE(@Deleted, Deleted),
	CardType = COALESCE(@CardType, CardType),
	CardName = COALESCE(@CardName, CardName),
	CardNumber = COALESCE(@CardNumber, CardNumber),
	CardExpirationMonth = COALESCE(@CardExpirationMonth, CardExpirationMonth),
	CardExpirationYear = COALESCE(@CardExpirationYear, CardExpirationYear),
	OrderSubtotal = COALESCE(@OrderSubtotal, OrderSubtotal),
	OrderTax = COALESCE(@OrderTax, OrderTax),
	OrderShippingCosts = COALESCE(@OrderShippingCosts, OrderShippingCosts),
	OrderTotal = COALESCE(@OrderTotal, OrderTotal),
	PaymentGateway = COALESCE(@PaymentGateway, PaymentGateway),
	AuthorizationCode = COALESCE(@AuthorizationCode, AuthorizationCode),
	AuthorizationResult = COALESCE(@AuthorizationResult, AuthorizationResult),
	AuthorizationPNREF = COALESCE(@AuthorizationPNREF, AuthorizationPNREF),
	TransactionCommand = COALESCE(@TransactionCommand, TransactionCommand),
	OrderDate = COALESCE(@OrderDate, OrderDate),
	LevelID = COALESCE(@LevelID, LevelID),
	LevelName = COALESCE(@LevelName, LevelName),
	LevelDiscountPercent = COALESCE(@LevelDiscountPercent, LevelDiscountPercent),
	LevelDiscountAmount = COALESCE(@LevelDiscountAmount, LevelDiscountAmount),
	LevelHasFreeShipping = COALESCE(@LevelHasFreeShipping, LevelHasFreeShipping),
	LevelAllowsQuantityDiscounts = COALESCE(@LevelAllowsQuantityDiscounts, LevelAllowsQuantityDiscounts),
	LevelHasNoTax = COALESCE(@LevelHasNoTax, LevelHasNoTax),
	LevelAllowsCoupons = COALESCE(@LevelAllowsCoupons, LevelAllowsCoupons),
	LevelDiscountsApplyToExtendedPrices = COALESCE(@LevelDiscountsApplyToExtendedPrices, LevelDiscountsApplyToExtendedPrices),
	LastIPAddress = COALESCE(@LastIPAddress, LastIPAddress),
	PaymentMethod = COALESCE(@PaymentMethod, PaymentMethod),
	OrderNotes = COALESCE(@OrderNotes, OrderNotes),
	PONumber = COALESCE(@PONumber, PONumber),
	DownloadEmailSentOn = COALESCE(@DownloadEmailSentOn, DownloadEmailSentOn),
	ReceiptEmailSentOn = COALESCE(@ReceiptEmailSentOn, ReceiptEmailSentOn),
	DistributorEmailSentOn = COALESCE(@DistributorEmailSentOn, DistributorEmailSentOn),
	ShippingTrackingNumber = COALESCE(@ShippingTrackingNumber, ShippingTrackingNumber),
	ShippedVIA = COALESCE(@ShippedVIA, ShippedVIA),
	CustomerServiceNotes = COALESCE(@CustomerServiceNotes, CustomerServiceNotes),
	RTShipRequest = COALESCE(@RTShipRequest, RTShipRequest),
	RTShipResponse = COALESCE(@RTShipResponse, RTShipResponse),
	TransactionState = COALESCE(@TransactionState, TransactionState),
	AVSResult = COALESCE(@AVSResult, AVSResult),
	CaptureTXCommand = COALESCE(@CaptureTXCommand, CaptureTXCommand),
	CaptureTXResult = COALESCE(@CaptureTXResult, CaptureTXResult),
	VoidTXCommand = COALESCE(@VoidTXCommand, VoidTXCommand),
	VoidTXResult = COALESCE(@VoidTXResult, VoidTXResult),
	RefundTXCommand = COALESCE(@RefundTXCommand, RefundTXCommand),
	RefundTXResult = COALESCE(@RefundTXResult, RefundTXResult),
	CardinalLookupResult = COALESCE(@CardinalLookupResult, CardinalLookupResult),
	CardinalAuthenticateResult = COALESCE(@CardinalAuthenticateResult, CardinalAuthenticateResult),
	CardinalGatewayParms = COALESCE(@CardinalGatewayParms, CardinalGatewayParms),
	AffiliateCommissionRecorded = COALESCE(@AffiliateCommissionRecorded, AffiliateCommissionRecorded),
	OrderOptions = COALESCE(@OrderOptions, OrderOptions),
	OrderWeight = COALESCE(@OrderWeight, OrderWeight),
	CarrierReportedRate = COALESCE(@CarrierReportedRate, CarrierReportedRate),
	CarrierReportedWeight = COALESCE(@CarrierReportedWeight, CarrierReportedWeight),
	LocaleSetting = COALESCE(@LocaleSetting, LocaleSetting),
	FinalizationData = COALESCE(@FinalizationData, FinalizationData),
	ExtensionData = COALESCE(@ExtensionData, ExtensionData),
	AlreadyConfirmed = COALESCE(@AlreadyConfirmed, AlreadyConfirmed),
	CartType = COALESCE(@CartType, CartType),
	Last4 = COALESCE(@Last4, Last4),
	ReadyToShip = COALESCE(@ReadyToShip, ReadyToShip),
	IsPrinted = COALESCE(@IsPrinted, IsPrinted),
	AuthorizedOn = COALESCE(@AuthorizedOn, AuthorizedOn),
	CapturedOn = COALESCE(@CapturedOn, CapturedOn),
	RefundedOn = COALESCE(@RefundedOn, RefundedOn),
	VoidedOn = COALESCE(@VoidedOn, VoidedOn),
	InventoryWasReduced = COALESCE(@InventoryWasReduced, InventoryWasReduced),
	MaxMindFraudScore = COALESCE(@MaxMindFraudScore, MaxMindFraudScore),
	MaxMindDetails = COALESCE(@MaxMindDetails, MaxMindDetails),
	CardStartDate = COALESCE(@CardStartDate, CardStartDate),
	CardIssueNumber = COALESCE(@CardIssueNumber, CardIssueNumber),
	TransactionType = COALESCE(@TransactionType, TransactionType),
	Crypt = COALESCE(@Crypt, Crypt),
	VATRegistrationID = COALESCE(@VATRegistrationID, VATRegistrationID),
	FraudedOn = COALESCE(@FraudedOn, FraudedOn),
	RefundReason = COALESCE(@RefundReason, RefundReason)
where OrderNumber = @OrderNumber
GO
PRINT N'Creating [dbo].[aspdnsf_updProductRating]...';

GO


CREATE PROCEDURE [dbo].[aspdnsf_updProductRating]
	@RatingID	int,
	@Rating		int,
	@Comments	nvarchar(max),
	@IsFilthy	bit
AS
BEGIN
	SET NOCOUNT ON
	UPDATE [dbo].[Rating]
	SET	[Rating]	= @Rating,
		[Comments]	= @Comments,
		[IsFilthy]	= CAST(@IsFilthy AS tinyint)
	WHERE [RatingID] = @RatingID
END
GO
PRINT N'Creating [dbo].[aspdnsf_updProductView]...';

GO


CREATE PROC [dbo].[aspdnsf_updProductView]
	@OrgCustomerViewID nvarchar(50),
	@CustomerViewID nvarchar(50)


AS
SET NOCOUNT ON
BEGIN
	UPDATE dbo.ProductView SET CustomerViewID=@CustomerViewID WHERE CustomerViewID=@OrgCustomerViewID

	--Remove duplicate records.
	DELETE ProductView WHERE ViewID IN(SELECT MIN(ViewID) FROM ProductView WHERE CustomerViewID=@CustomerViewID GROUP BY ProductID HAVING COUNT(ProductID) >1)
END
GO
PRINT N'Creating [dbo].[aspdnsf_updStateTaxRate]...';

GO


create proc [dbo].[aspdnsf_updStateTaxRate]
    @StateTaxID int,
    @TaxRate money

AS
SET NOCOUNT ON


UPDATE dbo.StateTaxRate
SET
    TaxRate = COALESCE(@TaxRate, TaxRate)
WHERE StateTaxID = @StateTaxID
GO
PRINT N'Creating [dbo].[aspdnsf_updStringresource]...';

GO


create proc [dbo].[aspdnsf_updStringresource]
    @StringResourceID int,
	@StoreId int,
    @Name nvarchar(100),
    @LocaleSetting nvarchar(10),
    @ConfigValue nvarchar(2500)

AS
SET NOCOUNT ON


UPDATE dbo.Stringresource
SET
	StoreId = COALESCE(@StoreId, StoreId),
    Name = COALESCE(@Name, Name),
    LocaleSetting = COALESCE(@LocaleSetting, LocaleSetting),
    ConfigValue = COALESCE(@ConfigValue, ConfigValue),
    Modified = 1
WHERE StringResourceID = @StringResourceID
GO
PRINT N'Creating [dbo].[aspdnsf_updTaxclass]...';

GO


create proc [dbo].[aspdnsf_updTaxclass]
    @TaxClassID int,
    @TaxCode nvarchar(400),
    @DisplayOrder int

AS
SET NOCOUNT ON

UPDATE dbo.Taxclass
SET
    TaxCode = COALESCE(@TaxCode, TaxCode),
    DisplayOrder = COALESCE(@DisplayOrder, DisplayOrder)
WHERE TaxClassID = @TaxClassID
GO
PRINT N'Creating [dbo].[aspdnsf_updZipTaxRate]...';

GO


create proc [dbo].[aspdnsf_updZipTaxRate]
    @ZipTaxID int,
    @TaxRate money,
	@CountryID int

AS
SET NOCOUNT ON
UPDATE dbo.ZipTaxRate
SET
    TaxRate = COALESCE(@TaxRate, TaxRate)
WHERE ZipTaxID = @ZipTaxID AND CountryID = @CountryID
GO
PRINT N'Creating [dbo].[aspdnsf_WSIUpdateMappings]...';

GO


create proc dbo.aspdnsf_WSIUpdateMappings
    @xml nvarchar(max)

AS
SET NOCOUNT ON

    create table #tmp (id int not null, displayorder int)
    DECLARE @pid varchar(50), @pem varchar(50), @xpath varchar(8000), @counter int, @cmd varchar(8000)
    DECLARE @hdoc int, @retcode int, @AutoCleanup bit

    EXEC @retcode = sp_xml_preparedocument @hdoc OUTPUT, @xml

    SELECT @AutoCleanup = case AutoCleanup when 'true' then 1 else 0 end
    FROM OPENXML(@hdoc, '/Mappings', 0) WITH (AutoCleanup varchar(5))

    set @counter = 1
    select @xpath = '/Mappings/Product[' + convert(varchar(10), @counter) + ']'

    SELECT top 1 @pid = id, @pem = EntityName
    FROM OPENXML(@hdoc, @xpath, 0) WITH (id varchar(10), EntityName varchar(50))

    while @@rowcount > 0 begin
        if @pem in ('category', 'section', 'manufacturer', 'distributor', 'affiliate', 'vector', 'genre') and isnumeric(@pid) = 1 begin
            select @xpath = @xpath + '/Entity'

            truncate table #tmp
            insert #tmp
            SELECT *
            FROM OPENXML(@hdoc, @xpath, 0) WITH (id int, displayorder int)

            -- Update display order for existing mappings
            set @cmd = 'update dbo.product' + @pem + ' set displayorder = isnull(t.displayorder, pe.displayorder) from dbo.product' + @pem + ' pe with (nolock) join #tmp t on pe.Productid = ' + @pid + ' and pe.' + @pem + 'id = t.id'
            exec (@cmd)

            -- Insert new mappings
            set @cmd = 'insert dbo.product' + @pem + '(ProductID, ' + @pem + 'id, displayorder, createdon) select ' + @pid + ', id, displayorder, getdate() from #tmp where not exists (select * from dbo.product' + @pem + ' with (nolock) where ProductID = ' + @pid + ' and ' + @pem + 'id = #tmp.id)'
            exec (@cmd)

            -- if auto clenaup then remove mapping that are not in the imput xml document
            if @AutoCleanup = 1 begin
                set @cmd = 'delete dbo.product' + @pem + ' from dbo.product' + @pem + ' pe with (nolock) left join #tmp t on pe.productid = ' + @pid + ' and pe.categoryid = t.id where t.id is null'
                exec (@cmd)
            end

            set @counter = @counter + 1
            select @xpath = '/Mappings/Product[' + convert(varchar(10), @counter) + ']'

            SELECT top 1 @pid = id, @pem = EntityName
            FROM OPENXML(@hdoc, @xpath, 0) WITH (id varchar(10), EntityName varchar(50))
        end
    end

    exec sp_xml_removedocument @hdoc

    drop table #tmp
GO
PRINT N'Creating [dbo].[NukeStore]...';

GO


CREATE PROC [dbo].[NukeStore]
	@StoreID INT,
	@NukeNews BIT = 0,
	@NukeAffiliates BIT =0,
	@NukeTopics BIT = 0,
	@NukeProducts BIT = 0,
	@NukeCoupons BIT = 0,
	@NukePromotions BIT = 0,
	@NukeOrderOptions BIT = 0,
	@NukeGiftCards BIT = 0,
	@NukeCategories BIT = 0,
	@NukeSections BIT = 0,
	@NukeManufacturers BIT = 0,
	@NukeDistributors BIT = 0,
	@NukeGenres BIT = 0,
	@NukeVectors BIT = 0
	AS
	CREATE TABLE #tmpEntities(
	GUID UniqueIdentifier
	)
	INSERT INTO #tmpEntities (GUID) (
	SELECT GUID FROM MappedObjects WHERE StoreID = @StoreID AND GUID NOT IN(
	SELECT GUID FROM MappedObjects WHERE StoreID <> @StoreID)
	)

	IF (@NukeNews = 1)			DELETE FROM News WHERE NewsGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeAffiliates = 1)	DELETE FROM Affiliate WHERE AffiliateGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeTopics = 1)		DELETE FROM Topic WHERE TopicGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeProducts = 1)		DELETE FROM Product WHERE ProductGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeCoupons = 1)		DELETE FROM Coupon WHERE CouponGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukePromotions = 1)	DELETE FROM Promotions WHERE PromotionGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeOrderOptions = 1)	DELETE FROM OrderOption WHERE OrderOptionGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeGiftCards = 1)		DELETE FROM GiftCard WHERE GiftCardGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeCategories = 1)	DELETE FROM Category WHERE CategoryGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeSections = 1)		DELETE FROM Section WHERE SectionGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeManufacturers = 1)	DELETE FROM Manufacturer WHERE ManufacturerGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeDistributors = 1)	DELETE FROM Distributor WHERE DistributorGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeGenres = 1)		DELETE FROM Genre WHERE GenreGUID IN (SELECT [GUID] FROM #tmpEntities)
	IF (@NukeVectors = 1)		DELETE FROM Vector WHERE VectorGUID IN (SELECT [GUID] FROM #tmpEntities)

	DELETE FROM EntityStore WHERE StoreID = @StoreID
	DELETE FROM AffiliateStore WHERE StoreID = @StoreID
	DELETE FROM NewsStore WHERE StoreID = @StoreID
	DELETE FROM ProductStore WHERE StoreID = @StoreID
	DELETE FROM TopicStore WHERE StoreID = @StoreID
	DELETE FROM GiftCardStore WHERE StoreID = @StoreID
	DELETE FROM CouponStore WHERE StoreID = @StoreID
	DELETE FROM OrderOptionStore WHERE StoreID = @StoreID
	DELETE FROM Store WHERE StoreID = @StoreID

	DROP TABLE #tmpEntities
GO
PRINT N'Creating [dbo].[aspdnsf_CloneStore]...';

GO


CREATE PROC [dbo].[aspdnsf_CloneStore]
	@StoreID INT,
	@NewStoreName nvarchar(400) = NULL,
	@NewStoreID int output
AS
BEGIN
	INSERT INTO Store (ProductionURI, ProductionDirectoryPath, ProductionPort, StagingURI, StagingDirectoryPath, StagingPort, DevelopmentURI, DevelopmentDirectoryPath, DevelopmentPort, [Name], Description, SkinID)
	SELECT ProductionURI, ProductionDirectoryPath, ProductionPort, StagingURI, StagingDirectoryPath, StagingPort, DevelopmentURI, DevelopmentDirectoryPath, DevelopmentPort, ISNULL(@NewStoreName, [Name]), Description, SkinID
	FROM Store WHERE StoreID = @StoreID

	select @NewStoreID=Max(StoreID) FROM Store

	EXEC [aspdnsf_CloneStoreMappings] @StoreID, @NewStoreID

END
GO
PRINT N'Creating [dbo].[aspdnsf_NukeStore]...';

GO

create procedure [dbo].[aspdnsf_NukeStore]
	@StoreID int,
	@SummaryOnly bit = 0
as
begin
	/*
	 NOTE:
		this script doesn't protect against nuking a default store,
		it should be prompted first before calling out this sproc.
		Only certain entities can be nuked:
			News, Topic, ShippingMethod, OrderOption, Affiliate, Customer and Orders
		but mapping for all entities are removed as well
	*/

	declare @MAPPED_TO_THIS_STORE int
	set @MAPPED_TO_THIS_STORE = 1

	/* summary table used for reporting */
	declare @NukeSummary Table
	(
		[Row] [int] IDENTITY(1,1) NOT NULL,
		[EntityType] nvarchar(100),
		[EntityID] int,
		[EntityName] nvarchar(500)
	)

	/* generic entities */
	insert into @NukeSummary(EntityType, EntityID, EntityName)
	select ov.EntityType, ov.[ID], ov.[Name]
	from ObjectView ov
	where	ov.EntityType in ('News', 'Topic', 'ShippingMethod', 'OrderOption', 'Affiliate') and
			dbo.UniquelyMapped(@StoreID, ov.EntityType, ov.ID) = @MAPPED_TO_THIS_STORE

	if(@SummaryOnly = 0)
	begin
		/* news */
		delete n
		from News n
		inner join NewsStore ns on ns.NewsID = n.NewsID
		where dbo.UniquelyMapped(@StoreID, 'News', n.NewsID) = @MAPPED_TO_THIS_STORE

		/* Topic */
		delete t
		from Topic t
		inner join TopicStore ts on ts.TopicID = t.TopicID
		where dbo.UniquelyMapped(@StoreID, 'Topic', t.TopicID) = @MAPPED_TO_THIS_STORE

		/* Order Option */
		delete os
		from OrderOption os
		inner join OrderOptionStore oos on oos.OrderOptionID = os.OrderOptionID
		where dbo.UniquelyMapped(1, 'OrderOption', os.OrderOptionID) = @MAPPED_TO_THIS_STORE

		/* Shipping Method */
		delete sm
		from ShippingMethod sm
		inner join ShippingMethodStore sms on sms.ShippingMethodID = sm.ShippingMethodID
		where dbo.UniquelyMapped(@StoreID, 'ShippingMethod', sm.ShippingMethodID) = @MAPPED_TO_THIS_STORE

		/* next delete ALL mappings */
		exec aspdnsf_NukeStoreMappings @StoreID

		/* nuking these entities requires some relationships to be handled first, hence encapsulated into sproc */
		exec [aspdnsf_NukeStoreAffiliate] @StoreID
		exec [aspdnsf_NukeStoreCustomer] @StoreID
		exec [aspdnsf_NukeStoreOrder] @StoreID

		delete s
		from Store s
		where s.StoreID = @StoreID
	end


	select * from @NukeSummary

end
GO
PRINT N'Creating [dbo].[aspdnsf_DatabaseMaintenance]...';

GO
create proc [dbo].[aspdnsf_DatabaseMaintenance]
	@purgeAnonCustomers tinyint = 1,
	@cleanShoppingCartsOlderThan smallint = 30, -- set to 0 to disable erasing
	@cleanWishListsOlderThan smallint = 30, -- set to 0 to disable erasing
	@eraseCCFromAddresses tinyint = 1, -- except those used for recurring billing items!
	@clearProductViewsOrderThan smallint = 180,
	@eraseCCFromOrdersOlderThan smallint = 30, -- set to 0 to disable erasing
	@defragIndexes tinyint = 0,
	@updateStats tinyint = 0,
	@purgeDeletedRecords tinyint = 0,-- Purges records in all tables with a deleted flag set to 1
	@removeRTShippingDataOlderThan smallint = 30, -- set to 0 to disable erasing
	@clearSearchLogOlderThan smallint = 30,-- set to 0 to disable erasing
	@cleanOrphanedLocalizedNames tinyint = 0,
	@cleanupSecurityLog tinyint = 0,
	@clearProfilesOlderThan smallint = 0
	as
begin
	set nocount on

	-- Clear out failed transactions older than 2 months:
	delete from FailedTransaction where OrderDate < dateadd(mm,-2,getdate());

	-- Clear out old tx info, not longer needed:
	update orders set TransactionCommand=NULL, AuthorizationResult=NULL, VoidTXCommand=NULL, VoidTXResult=NULL, CaptureTXCommand=NULL, CaptureTXResult=NULL, RefundTXCommand=NULL, RefundTXResult=NULL 
	where orderdate < dateadd(mm,-2,getdate());
	
	update dbo.Orders_ShoppingCart set
	ShippingDetail = ''
	where CreatedOn < dateadd(mm,-2,getdate());

	-- Clean up Security Log entries that are more than 1 year old
	if @cleanupSecurityLog = 1
	begin
		delete from SecurityLog where ActionDate < dateadd(year,-1,getdate());
	end

	-- Clean up data in the LocalizedObjectName table for locales that no longer exist
	if @cleanOrphanedLocalizedNames = 1
	begin
		delete from LocalizedObjectName where LocaleId not in (select LocaleSettingID from LocaleSetting);
	end

	-- clean up all carts (don't touch recurring items or wishlist items however):
	if @cleanShoppingCartsOlderThan <> 0
	begin
		delete dbo.kitcart where (CartType=0 or CartType=101) and CreatedOn < dateadd(d,-@cleanShoppingCartsOlderThan,getdate());
		delete dbo.ShoppingCart where (CartType=0 or CartType=101) and CreatedOn < dateadd(d,-@cleanShoppingCartsOlderThan,getdate());
	end

	if @cleanWishListsOlderThan <> 0
	begin
		delete dbo.kitcart where CartType=1 and CreatedOn < dateadd(d,-@cleanWishListsOlderThan,getdate());
		delete dbo.ShoppingCart where CartType=1 and CreatedOn < dateadd(d,-@cleanWishListsOlderThan,getdate());
	end

	-- purge anon customers:
	if @purgeAnonCustomers = 1
	begin
		-- clean out CIM profiles for orders that were not completed
		delete dbo.CIM_AddressPaymentProfileMap where customerid not in (select customerid from dbo.customer with (NOLOCK) where IsRegistered=1)

		delete dbo.customer where
			IsRegistered=0 and IsAdmin = 0
			and customerid not in (select customerid from dbo.ShoppingCart with (NOLOCK))
			and customerid not in (select customerid from dbo.kitcart with (NOLOCK))
			and customerid not in (select customerid from dbo.orders with (NOLOCK))
			and customerid not in (select customerid from dbo.rating with (NOLOCK))
			and customerid not in (select ratingcustomerid from dbo.ratingcommenthelpfulness with (NOLOCK))
			and customerid not in (select votingcustomerid from dbo.ratingcommenthelpfulness with (NOLOCK))
	end

	-- clean addresses, except for those that have recurring orders
	if @eraseCCFromAddresses = 1
		update [dbo].address set
			CardNumber=NULL,
			CardStartDate=NULL,
			CardIssueNumber=NULL,
			CardExpirationMonth=NULL,
			CardExpirationYear=NULL
		where CustomerID not in (select CustomerID from ShoppingCart where CartType=2)

	-- erase credit cards from all orders older than N days:
	if @eraseCCFromOrdersOlderThan <> 0
		update [dbo].orders set CardNumber=NULL
		where
			OrderDate < dateadd(d,-@eraseCCFromOrdersOlderThan,getdate())

	-- erase product views both for dynamic
	if @clearProductViewsOrderThan <> 0
	begin
		delete dbo.ProductView where ViewDate < dateadd(d,-@clearProductViewsOrderThan,getdate())
	end

	-- Nuke deleted stores
	declare @storeId int
	select top 1 @storeId = StoreID from Store where Deleted = 1
	while @@rowcount > 0 begin
		exec aspdnsf_NukeStore @storeId, 0
		select top 1 @storeId = StoreID from Store where Deleted = 1
	end

	if @purgeDeletedRecords = 1 begin
		delete dbo.Address where deleted = 1
		delete dbo.Coupon where deleted = 1
		delete dbo.Customer where deleted = 1
		delete dbo.Document where deleted = 1
		delete dbo.News where deleted = 1
		delete dbo.Product where deleted = 1
		delete dbo.ProductVariant where deleted = 1 or not exists (select * from dbo.Product where productid = ProductVariant.productid)
		delete dbo.SalesPrompt where deleted = 1
		delete dbo.ShippingZone where deleted = 1
		delete dbo.Topic where deleted = 1
		delete dbo.Affiliate where deleted = 1
		delete dbo.Category where deleted = 1
		delete dbo.CustomerLevel where deleted = 1
		delete dbo.Distributor where deleted = 1
		delete dbo.Genre where deleted = 1
		delete dbo.Library where deleted = 1
		delete dbo.Manufacturer where deleted = 1
		delete dbo.Section where deleted = 1
		delete dbo.Vector where deleted = 1
		delete dbo.ProductVector where not exists (select * from dbo.product where productid = ProductVector.productid) or not exists (select * from dbo.vector where vectorid = ProductVector.vectorid)
		delete dbo.ProductAffiliate where not exists (select * from dbo.product where productid = ProductAffiliate.productid) or not exists (select * from dbo.Affiliate where Affiliateid = ProductAffiliate.Affiliateid)
		delete dbo.ProductCategory where not exists (select * from dbo.product where productid = ProductCategory.productid) or not exists (select * from dbo.Category where Categoryid = ProductCategory.Categoryid)
		delete dbo.ProductCustomerLevel where not exists (select * from dbo.product where productid = ProductCustomerLevel.productid) or not exists (select * from dbo.CustomerLevel where CustomerLevelid = ProductCustomerLevel.CustomerLevelid)
		delete dbo.ProductDistributor where not exists (select * from dbo.product where productid = ProductDistributor.productid) or not exists (select * from dbo.Distributor where Distributorid = ProductDistributor.Distributorid)
		delete dbo.ProductGenre where not exists (select * from dbo.product where productid = ProductGenre.productid) or not exists (select * from dbo.Genre where Genreid = ProductGenre.Genreid)
		delete dbo.ProductLocaleSetting where not exists (select * from dbo.product where productid = ProductLocaleSetting.productid) or not exists (select * from dbo.LocaleSetting where LocaleSettingid = ProductLocaleSetting.LocaleSettingid)
		delete dbo.ProductManufacturer where not exists (select * from dbo.product where productid = ProductManufacturer.productid) or not exists (select * from dbo.Manufacturer where Manufacturerid = ProductManufacturer.Manufacturerid)
		delete dbo.ProductSection where not exists (select * from dbo.product where productid = ProductSection.productid) or not exists (select * from dbo.Section where Sectionid = ProductSection.Sectionid)
	end

	-- Clear out all customer sessions
	truncate table CustomerSession

	-- Clean up abandon records tied to customers that no longer exist
	delete from dbo.ShoppingCart where CustomerID not in (select distinct CustomerID from Customer);
	delete from dbo.KitCart where ShoppingCartRecID not in (select distinct ShoppingCartRecID from ShoppingCart);
	delete from dbo.CustomerSession where CustomerID not in (select distinct CustomerID from Customer);
	delete from dbo.RatingCommentHelpfulness where RatingCustomerID not in (select distinct CustomerID from Customer);
	delete from dbo.RatingCommentHelpfulness where VotingCustomerID not in (select distinct CustomerID from Customer);
	delete from dbo.PromotionUsage where CustomerID not in (select distinct CustomerID from Customer);
	delete from dbo.Address where CustomerID not in (select distinct CustomerID from Customer);
	delete from dbo.Rating where CustomerID not in (select distinct CustomerID from Customer);

	-- Remove old rtshipping requests and responses
	if @removeRTShippingDataOlderThan <> 0
	begin
		update dbo.Customer set RTShipRequest = '', RTShipResponse = ''
		where CreatedOn < dateadd(d,-@removeRTShippingDataOlderThan,getdate())

		update dbo.Orders set RTShipRequest = '', RTShipResponse = ''
		where OrderDate < dateadd(d,-@removeRTShippingDataOlderThan,getdate())
	end

	-- Search log
	if @clearSearchLogOlderThan <> 0
	begin
		delete from dbo.SearchLog where CreatedOn < dateadd(d,-@clearSearchLogOlderThan,getdate())
	end

	-- Profile table
	if @clearProfilesOlderThan != -1
	begin
		if @clearProfilesOlderThan = 0
		begin
			truncate table [dbo].[profile]
		end
		else
		begin
			delete from [dbo].[Profile] where UpdatedOn < dateadd(d,-@clearProfilesOlderThan,getdate());
		end
	end

	-- Defrag indexes
	DECLARE @indexesUpdated BIT = 0
	IF @defragIndexes = 1
	BEGIN
		DECLARE @cmd NVARCHAR(MAX), @tableName VARCHAR(128), @indexName VARCHAR(128)
		CREATE TABLE #INDEXESTOUPDATE(
			TableName VARCHAR(128),
			IndexName VARCHAR(128))

		INSERT INTO #IndexesToUpdate
		SELECT  o.name AS TableName, i.name AS IndexName
		FROM sys.dm_db_index_physical_stats(DB_ID(), NULL, NULL, NULL, NULL) s
			JOIN sys.sysobjects o ON s.object_id = o.id
			LEFT JOIN sys.indexes i ON s.index_id = i.index_id AND o.id = i.object_id
		WHERE s.index_id != 0
			AND s.avg_fragmentation_in_percent > 10
			AND s.page_count > 500
		ORDER BY o.name

		DECLARE indexCursor CURSOR
			FOR SELECT TableName, IndexName FROM #IndexesToUpdate
		OPEN indexCursor
		FETCH NEXT FROM indexCursor
			INTO @tableName, @indexName
		WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @cmd = 'ALTER INDEX [' + @indexName + '] ON [' + @tableName  + '] REBUILD'
				EXEC (@cmd)

			FETCH NEXT FROM indexCursor
				INTO @tableName, @indexName
			END
		CLOSE indexCursor
		DEALLOCATE indexCursor

		-- ALTER INDEX doesn't update statistics, have to trigger it manually
		EXEC [dbo].[aspdnsf_UpdateStatistics]
		SET @indexesUpdated = 1
	END

	--Update statistics, including ones that updating indexes misses
	IF @updateStats = 1 AND @indexesUpdated = 0 --This may have already been done above
	BEGIN
		EXEC [dbo].[aspdnsf_UpdateStatistics]
	END
end
go

PRINT 'Schema creation complete'
GO

-- ================================================================================================================================================================================================================================================

PRINT 'Beginning data population'
SET NOCOUNT ON
GO

SET NUMERIC_ROUNDABORT OFF
SET XACT_ABORT, ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO

BEGIN TRANSACTION
ALTER TABLE [dbo].[PromotionLineItem] DROP CONSTRAINT [FK_PromotionLineItem_PromotionUsageId]
ALTER TABLE [dbo].[PromotionStore] DROP CONSTRAINT [FK_PromotionStore_PromotionId]
ALTER TABLE [dbo].[PromotionStore] DROP CONSTRAINT [FK_PromotionStore_StoreID]
ALTER TABLE [dbo].[PromotionUsage] DROP CONSTRAINT [FK_PromotionUsage_PromotionId]

print N'Inserting into [dbo].[Topic]'
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'copyright', N'Copyright Notice', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "Copyright" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'about', N'About Us', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "About" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'faq', N'Frequently Asked Questions', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "FAQ" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'security', N'Security Policy', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "Security" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'returns', N'Return Policy', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "Returns" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'ReceiptHeader', N'Extra Info At Top of Receipt, If Desired', N'', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'ReceiptFooter', N'Extra Info At Bottom of Receipt, If Desired', N'', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'service', N'Customer Service', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "Service" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'shipping', N'Shipping Information', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "Shipping" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'checkouttermsandconditions', N'Terms and Conditions', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "CheckoutTermsAndConditions" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Productnotfound', N'Product Not Found', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "ProductNotFound" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'mailfooter', N'Footer on all e-mails', N'<p>----------------------------------------------------------------------------<br/>THIS IS NOT SPAM. You are receiving this e-mail because you are a registered customer and you have indicated that you want to receive e-mail notices and updates from us. If you do not want to receive any further mailings, <a href="%REMOVEURL%">click here to remove yourself</a>, or you can reply to this e-mail with the subject REMOVE.</p>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'codinstructions', N'Instructions for Payment By C.O.D.', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "CODInstructions" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'helpbox', N'HelpBox For Left Column', N'Place the links you want to appear here by editing the "HelpBox" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'EmptyCategoryText', N'EmptyCategoryText', N'<b>This category is currently empty</b>.<br/>Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "EmptyCategoryText" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'EmptyManufacturerText', N'EmtpyManufacturerText', N'<b>We currently do not have any products for this manufacturer.</b><br/> Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "EmptyManufacturerText" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'EmptyLibraryText', N'EmtpyLibraryText', N'<b>This library is currently empty.</b><br/>Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "EmptyLibraryText" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'EmptyDistributorText', N'EmtpyDistributorText', N'<b>We currently do not have any products for this distributor.</b><br/>Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "EmptyDistributorText" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'EmptyCartText', N'Text to display if cart is empty', N'Your shopping cart is currently empty.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'EmptyWishListText', N'Text to display if wish list is empty', N'Your wish list is currently empty.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'CartPageFooter', N'Text for bottom of download cart page, if any', N'', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'SecureAttachment.EMailBody', N'SecureAttachment.EMailBody', N'Thank you for your purchase...please specify more information here so the customer will know what to do with the secure attachment download e-mail...', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'CheckOutCardAuth', N'CheckOutCardAuth', N'<script LANGUAGE="JavaScript">function popUp(url) {   popupWin=window.open(url,"win",''toolbar=0,location=0,directories=0,status=1,menubar=1,scrollbars=1,width=570,height=400'');    self.Name = "mainWin"; }</script><table>  <tr>    <td><font face="verdana,arial,helvetica" color="#bb0000" size="2">Your card may be eligible or enrolled in Verified by Visa or MasterCard&tm; SecureCode&tm; payer authentication programs. After clicking the ''Submit Order'' button, your Card Issuer may prompt you for your payer authentication password to complete your purchase.</font></td>    <td vAlign="center"><a href="javascript:popUp("http://www.mastercardbusiness.com/mcbiz/index.jsp?template=/orphans&content=securecodepopup")"><img src="images/securecode_logo_learn_more.gif" border="0" width="120" height="65"/></a></td>    <td vAlign="center"><a href="javascript:popUp("vbv_learn_more.htm")"><img src="images/vbv_logo_learn_more.gif" border="0" width="100" height="88"/></a></td></table>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'GoogleTrackingCode', N'GoogleTrackingCode', N'<!-- Google Conversion Code --><script type="text/javascript"> google_conversion_id = YOURIDHERE; google_conversion_language = "en_US"; google_conversion_format = "2"; google_conversion_color = "666666"; if (Total_Cost) { google_conversion_value = Total_Cost; } google_conversion_label = "Purchase"; </script> <script type="text/javascript" src="https://www.googleadservices.com/pagead/conversion.js"> </script> <noscript> <img height="1" width="1" border="0" src="https://www.googleadservices.com/pagead/conversion/YOURIDHERE/?value=Total_Cost&label=Purchase&script=0"/> </noscript>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 0, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'CheckoutAnonTeaser', N'CheckoutAnonTeaser', N'', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'SiteDisclaimer', N'SiteDisclaimer', N'If you need a site disclaimer, which the site visitor must acknowledge before entering the main site pages, put that topic here...And then set the "SiteDisclaimerRequired" AppConfig to True', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'EMailError', N'EMailError', N'This page could not be shown, if you are using a personal firewall, it may be interfering with the internal security checks of AspDotNetStorefront to prevent attacks. This should not occur on the production site, when properly configured.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'PhoneOrderTimeout', N'PhoneOrderTimeout', N'Your phone order session has timed out. Please restart your phone order session by using the buttons above...', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'EmptyGenreText', N'EmtpyGenreText', N'<b>We currently do not have any products for this Genre.</b><br/><br/>Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "EmptyGenreText" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'EmptyVectorText', N'EmtpyVectorText', N'<b>We currently do not have any products for this Vector.</b><br/><br/>Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "affiliate_faq" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'privacy', N'Privacy Policy', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "Privacy" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'ContactEmail', N'ContactEmail', N'<table style="width: 400px;"><tbody><tr><td align="right" style="width: 150px;">Customer Name: </td><td align="left">%NAME%</td></tr><tr><td align="right" style="width: 150px;">Customer Email: </td><td align="left">%EMAIL%</td></tr><tr><td align="right" style="width: 150px;">Customer Phone:</td><td align="left">%PHONE%</td></tr><tr><td colspan="2"> </td></tr><tr><td colspan="2"><b>%SUBJECT%</b></td></tr><tr><td colspan="2" style="padding-top: 3px;">%MESSAGE%</td></tr></tbody></table>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'PageNotFound', N'PageNotFound', N'<font color=#ff0000 size=2>  <p><br><font size=4>The requested page could not be found.</font></p></font>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Download.Information', N'Download.Information', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "Download.Information" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Download.EmailHeader', N'Download.EmailHeader', N'', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Download.EmailFooter', N'Download.EmailFooter', N'', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Download.MobilePageContent', N'Download.MobilePageContent', N'Please visit the Downloads page on a non-mobile device to access your downloads.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'SessionExpired', N'SessionExpired', N'<div class="session-warning-top-line">
																														We want to keep you safe!
																														</div>
																														<div class="session-warning-middle-line">
																														Just in case you walked away and left your screen turned on, we have expired this session.
																														</div>
																														<div class="session-warning-bottom-line">
																														Just click OK to continue.
																														</div>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'SessionExpiring', N'SessionExpiring', N'<div class="session-warning-top-line">
																														We want to keep you safe!
																														</div>
																														<div class="session-warning-middle-line">
																														Due to inactivity, your session will soon expire.
																														</div>
																														<div class="session-warning-bottom-line">
																														Just click OK to continue.
																														</div>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'SubscriptionToken.Subscribe', N'SubscriptionToken.Subscribe', N'', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Script.Google.Remarketing', N'Script.Google.Remarketing', N'', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'recurringpayments', N'recurringpayments', N'Add the information about your recurring products that you want to appear on this page by editing the "recurringpayments" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Script.Google.TagManager', N'Script.Google.TagManager', N'', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Template.MaintenancePage', N'Down for Maintenance', N'
			<h1>Site is temporarily unavailable.</h1>
			<p>We are currently performing scheduled maintenance. Site will be back soon.</p>
			<p>We apologize for any inconvenience.</p>
			<p><a href="(!Url ActionName=''index'' ControllerName = ''Home''!)">Click here to refresh the page</a></p>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES ( N'RequestCatalogSuccessful', N'Catalog Request Submitted', N'Your request has been received! Thank you for your interest in our products.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES ( N'ContactUsSuccessful', N'Contact Form Submitted', N'Your email has sent and we should receive it shortly.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES ( N'HomeTopIntro', N'Home Page Contents', N'
	(!TOPIC Name="HomePage.HomeImage"!)
	<div class="row">
		<div class="col-md-4">
			<div class="home-image">
				<img src="(!SkinPath!)/images/home1.jpg" alt="Giftcards" class="img-responsive center-block" />
			</div>
		</div>
		<div class="col-md-4">
			<div class="home-image">
				<img src="(!SkinPath!)/images/home2.jpg" alt="Storefronts" class="img-responsive center-block" />
			</div>
		</div>
		<div class="col-md-4">
			<div class="home-image">
				<img src="(!SkinPath!)/images/home3.jpg" alt="Documents" class="img-responsive center-block" />
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-md-6">
			<p>Your AspDotNetStorefront store is a thing of beauty right out of the box, but it''s almost certain that you''re going to want to stamp your own brand identity onto the ''skin''.</p>
			<h2 class="group-header">Three ways to personalize your store design</h2>
			<div class="row">
				<div class="col-md-4">
					<a href="http://www.aspdotnetstorefront.com/linkmanager.aspx?topic=10000skin&amp;type=adminskinning" class="thumbnail" target="_blank">
						<span class="thumbnail-items text-center">
							<img alt="Computer depicting that it can be used when editing the admin wizard" src="(!SkinPath!)/images/box1.jpg" class="img-responsive center-block" />
						</span>
						<span class="thumbnail-items text-center">
							Use the provided admin wizard
						</span>
					</a>
				</div>
				<div class="col-md-4">
					<a href="http://www.aspdotnetstorefront.com/linkmanager.aspx?topic=10000skin&amp;type=learntoskin" class="thumbnail" target="_blank">
						<span class="thumbnail-items text-center">
							<img alt="Book depicting instructions on learning how to skin a store" src="(!SkinPath!)/images/box2.jpg" class="img-responsive center-block" />
						</span>
						<span class="thumbnail-items text-center">
							Learn how to ''skin'' a store
						</span>
					</a>
				</div>
				<div class="col-md-4">
					<a href="http://www.aspdotnetstorefront.com/linkmanager.aspx?topic=10000skin&amp;type=expertskinning" class="thumbnail" target="_blank">
						<span class="thumbnail-items text-center">
							<img alt="Multiple people depicting a customer can hire the experts to help" src="(!SkinPath!)/images/box3.jpg" class="img-responsive center-block" />
						</span>
						<span class="thumbnail-items text-center">
							Hire the experts to help
						</span>
					</a>
				</div>
			</div>			
		</div>
		<div class="col-md-6">
			<div class="home-image">
				<img src="(!SkinPath!)/images/home4.jpg" alt="Welcome" class="img-responsive center-block" />
			</div>
		</div>
	</div>
	', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'HomePage.HomeImage', N'The main home page image area', N'
	<div class="home-image home-main-image">
		<h1>
			<img src="(!SkinPath!)/images/home.jpg" alt="Home Page" class="img-responsive center-block" />
		</h1>
	</div>
	', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'ordernotfound', N'Order Not Found', N'<p align=center><br/><br/><br/><B><FONT color=red>The specified order is no longer valid or is empty!</FONT></B> <br/><br/><br/>If this is an error, please <a href="(!Url ActionName=''Index'' ControllerName=''ContactUs''!)">contact us</a><B> </p></B>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'checkinstructions', N'Instructions for Mailing Check', N'Please mail a check as shown below. When your check is received and cleared, we will send you an e-mail order confirmation and receipt. <br/><br/>Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "CheckInstructions" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'EmptySectionText', N'EmptySectionText', N'<b>This department is currently empty.</b><br/>Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "EmptySectionText" topic within the Admin Console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Template.Logo', N'Template.Logo', N'
	<a id="logo" class="logo" href="(!Url ActionName=''Index'' ControllerName=''Home''!)" title="This image size is 250px x 87px">
        <img src="(!SKINPATH!)/images/logo.jpg" alt="Home" />
    </a>
	', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Template.Footer', N'The footer section of the template', N'
	<div class="row">
		<div class="col-sm-12 col-md-3">
			<div class="list-wrapper">
				<h3 class="footer-heading">Location &amp; Hours</h3>
				<div class="footer-list">
					<div>1234 Main St.</div>
					<div>Ashland, OR 97520</div>
					<div>Phone: 541-867-5309</div>
					<div>M-F 9am - 5pm</div>
					<div>
						<a href="(!Url ActionName=''Index'' ControllerName=''ContactUs''!)">Contact Us</a>
					</div>
				</div>
			</div>
		</div>
		<div class="col-sm-12 col-md-3">
			<div class="list-wrapper">
				<h3 class="footer-heading">Store Policies</h3>
				<div class="footer-list">
					<div>
						<a href="(!TopicLink name=''security''!)">Security</a>
					</div>
					<div>
						<a href="(!TopicLink name=''privacy''!)">Privacy Policy</a>
					</div>
					<div>
						<a href="(!TopicLink name=''returns''!)">Return Policy</a>
					</div>
					<div>
						<a href="(!TopicLink name=''service''!)">Customer Service</a>
					</div>
				</div>
			</div>
		</div>
		<div class="col-sm-12 col-md-3">
			<div class="list-wrapper">
				<h3 class="footer-heading">Store Information</h3>
				<div class="footer-list">
					<div>
						<a href="(!Url ActionName=''Index'' ControllerName=''Account''!)">Account</a>
					</div>
					<div>
						<a href="(!Url ActionName=''Index'' ControllerName=''Account''!)#OrderHistory">Order Tracking</a>
					</div>
					<div>
						<a href="(!Url ActionName=''Index'' ControllerName=''SiteMap''!)">Site Map</a>
					</div>
				</div>
			</div>
		</div>
		<div class="col-sm-12 col-md-3">
			<div class="footer-list">
				<div>
					<div class="social-links">
						<a aria-label="facebook" target="_blank" href="http://www.aspdotnetstorefront.com/linkmanager.aspx?topic=10000skin&amp;type=facebook">
							<em class="icon fa fa-facebook">
								<span class="hidden">Facebook</span>
							</em>
						</a>
						<a aria-label="instagram" target="_blank" href="http://www.aspdotnetstorefront.com/linkmanager.aspx?topic=10000skin&amp;type=instagram">
							<em class="icon fa fa-instagram">
								<span class="hidden">Instagram</span>
							</em>
						</a>
						<a aria-label="pinterest" target="_blank" href="http://www.aspdotnetstorefront.com/linkmanager.aspx?topic=10000skin&amp;type=pinterest">
							<em class="icon fa fa-pinterest">
								<span class="hidden">Pinterest</span>
							</em>
						</a>
						<a aria-label="twitter" target="_blank" href="http://www.aspdotnetstorefront.com/linkmanager.aspx?topic=10000skin&amp;type=twitter">
							<em class="icon fa fa-twitter">
								<span class="hidden">Twitter</span>
							</em>
						</a>
						<a aria-label="youtube" target="_blank" href="http://www.aspdotnetstorefront.com/linkmanager.aspx?topic=10000skin&amp;type=youtube">
							<em class="icon fa fa-youtube">
								<span class="hidden">YouTube</span>
							</em>
						</a>
					</div>
				</div>
				<div>
					<div class="seal-marker">
						<img alt="Powered by AspDotNetStorefront" src="(!SkinPath!)/images/seal.png" />
					</div>
				</div>
			</div>
		</div>
	</div>
	', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'Template.SubFooter', N'Template.SubFooter', N'
	&copy; YourCompany.com (!CopyrightYears!). All Rights Reserved. Powered by <a href="http://www.aspdotnetstorefront.com" target="_blank">AspDotNetStorefront</a>
	', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'CardinalExplanation', N'CardinalExplanation', N'<b>Verified By Visa<br/>MasterCard Secure<br/>Validation Step</b><br/><br/>You will now be shown a form from your credit card issuing bank. This form is entirely private between you and your bank and the form is secure. The information you enter here is <b>not</b> shared with us. This is to provide additional buyer protection on your credit card. Do not close this window or click the Back button.</b><br/><br/>Payment authentication is in progress. Please wait until the authentication screen has loaded, then enter your information and click Submit.<br/><br/>If you want to cancel your checkout, please <a href="(!Url ActionName=''Index'' ControllerName=''Checkout''!)">click here</a>.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'3DSecureExplanation', N'3DSecureExplanation', N'<b>Verified By Visa<br/>MasterCard Secure<br/>Validation Step</b><br/><br/>You will now be shown a form from your credit card issuing bank. This form is entirely private between you and your bank and the form is secure. The information you enter here is <b>not</b> shared with us. This is to provide additional buyer protection on your credit card. Do not close this window or click the Back button.</b><br/><br/>Payment authentication is in progress. Please wait until the authentication screen has loaded, then enter your information and click Submit.<br/><br/>If you want to cancel your checkout, please <a href="(!Url ActionName=''Index'' ControllerName=''Checkout''!)">click here</a>.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'InvalidRequest', N'Invalid Request', N'<b>Unable to Process Request</b><p>We were unable to process your request.  Please try again.  If you continue to receive this message, contact our customer service department by clicking <a href="(!Url ActionName=''Index'' ControllerName=''ContactUs''!)">here</a>.  We apologize for the inconvenience.</p>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'contact', N'Contact Us', N'This is the topic named "contact". You can edit this in the admin console.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) 
VALUES (N'CheckoutSecuritySeal', N'Checkout Security Seal', N'<div style="text-align:center;">
<em class="fa fa-shield" style="font-size:32px;vertical-align:top;" aria-hidden="true"></em>
<span style="vertical-align: middle; font-size: 18px;">Secured with SSL</span></div>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES(N'AcceptJsCCFormInfo', N'AcceptJsCCFormInfo', N'Clicking the button below will open a payment form for you to securely add your credit card details.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1);
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES(N'AcceptJsECheckFormInfo', N'AcceptJsECheckFormInfo', N'	Please enter your eCheck details.  Please note that shipping may be delayed for eCheck processing.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1);
INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES(N'AcceptJsECheckFormAuthorizationText', N'AcceptJsECheckFormAuthorizationText', N'By clicking the button below, I authorize (!AppConfig Name=''storename''!) to charge this account for the checkout amount.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1);

INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES(N'removeaccountconfirmation', N'Remove Account Confirmation', N'Thank you for letting us know that you would like your personally identifiable information to be removed from our records. As long as no other law prevails, we will do so at once.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1);

INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES(N'removeaccount', N'Remove Account', N'If you wish your personally identifiable information (name; street address; email address; phone number) to be removed from our records, please let us know. Note, however, that other legal frameworks might prevent us from removing your data as quickly as you would choose. Your data is protected at all times and we will only ever keep it as long as the law requires. Beyond that time, we will remove it immediately upon your request.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1);

INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES(N'removeaccountemail', N'Remove Account Email', N'Thank you for letting us know that you would like your personally identifiable information to be removed from our records. We have really appreciated your business and we are proud to say that we have always kept your data safe. As long as no other law prevails, we will now remove it at once.', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1);

INSERT INTO [dbo].[Topic] ([Name], [Title], [Description], [SETitle], [SEDescription], [SEKeywords], [Password], [RequiresDisclaimer], [XmlPackage], [ExtensionData], [ShowInSiteMap], [SkinID], [HTMLOk], [Deleted], [StoreID], [DisplayOrder], [CreatedOn], [Published], [UpdatedOn], [IsFrequent]) VALUES (N'dataretentionpolicy', N'Data Retention Policy', N'Note to <a href="http://www.aspdotnetstorefront.com/">AspDotNetStorefront</a> Administrators:<br/><br/>You can edit this placeholder text by editing the "Data Retention Policy" topic within the Admin Console.

<h2>Your personal data is important to us</h2>
<h3>What we need to collect</h3>
<div>
We only collect basic personal data about you which does not include any special types of information or location based information. This does however include name, address, email etc. We collect only the data that is necessary for us to contract with you, when you purchase goods or services from us. Our company will be what''s known as the ''Controller'' of the personal data you provide to us. 
</div>
<h3>Why we need it</h3>
<div>We need to collect data that is required to process an online payment or deliver your purchased product. In such cases, we don''t need to get your consent (since we can''t fulfill our contract without the data) but we still want you to know how carefully we manage the protection of that data. We will not collect any personal data from you that we do not need in order to provide and oversee this service to you.</div>
<h3>What we do with it</h3>
<div>All the personal data we process is processed by our staff, and, for the purposes of IT hosting and maintenance this information is located on servers beyond our own building. No third-parties have access to your personal data unless the law allows them to do so. We have a Data Protection regime in place to oversee the effective and secure processing of your personal data. Our online store allows our administrators to anonymize and delete your personal data in a timely and responsible manner and also allows you to request the immediate deletion of your data once the transaction is full and final. You will find an option to delete the data on your account page.
</div>
<h3>How long we keep it</h3>
<div>We have a formal retention period which requires us to keep your basic personal data (name, address, contact details) for 6 months, beyond which time it will be ''anonymized''. The term ''anonymized'' means that we will maintain a record of your transactions, but that it cannot be tracked to you as an individual.
</div>
<h3>What we would also like to do with it</h3>
<div>We would however like to use your name and email address to inform you of our future offers and similar products. This information is not shared with third purposes and you can unsubscribe at any time via phone, email or our website.
</div>
<h3>What are your rights?</h3>
<div>
If at any point you believe the information we process on you is incorrect you can request to see this information and even have it corrected or deleted. If you wish to raise a complaint on how we have handled your personal data, you can contact our Data Protection Officer who will investigate the matter.
If you are not satisfied with our response or believe we are processing your personal data not in accordance with the law you can complain to the Information Commissioner''s Office (ICO).
</div>
<div style="padding-top:15px;">
Our Data Protection Officer can be contacted using our <a href="/contactus">online contact form</a>.
</div>', NULL, NULL, NULL, NULL, 0, NULL, NULL, 1, 0, 1, 0, 0, 1, GETDATE(), 1, GETDATE(), 1)

INSERT INTO TopicStore (TopicID, StoreID, CreatedOn) SELECT TopicID, 1, GETDATE() FROM Topic ORDER BY TopicID

print N'Inserting into [dbo].[EventHandler]'
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'ViewProductPage', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'ViewEntityPage', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'AddToCart', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'BeginCheckout', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'RemoveFromCart', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'CreateCustomer', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'UpdateCustomer', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'DeleteCustomer', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'NukeCustomer', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'CreateAccount', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'CheckoutShipping', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'CheckoutPayment', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'CheckoutReview', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'NewOrder', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'OrderDeleted', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'OrderVoided', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'OrderShipped', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[EventHandler] ([EventName], [CalloutURL], [XmlPackage], [Debug], [Active], [UpdatedOn], [CreatedOn]) VALUES (N'OrderRefunded', N'', N'event.default.xml.config', 0, 0, GETDATE(), GETDATE())

SET IDENTITY_INSERT [dbo].[TaxClass] ON
print N'Inserting into [dbo].[TaxClass]'
INSERT INTO [dbo].[TaxClass] ([TaxClassID], [Name], [TaxCode], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (1, N'Goods', N'', 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[TaxClass] ([TaxClassID], [Name], [TaxCode], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (2, N'Services', N'', 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[TaxClass] ([TaxClassID], [Name], [TaxCode], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (3, N'Shipping', N'', 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[TaxClass] ([TaxClassID], [Name], [TaxCode], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (4, N'Tobacco', N'', 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[TaxClass] ([TaxClassID], [Name], [TaxCode], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (5, N'Alcohol', N'', 1, GETDATE(), GETDATE())
SET IDENTITY_INSERT [dbo].[TaxClass] OFF

SET IDENTITY_INSERT [dbo].[ProductVariant] ON
print N'Inserting into [dbo].[ProductVariant]'
INSERT INTO [dbo].[ProductVariant] ([VariantID], [VariantGUID], [IsDefault], [Name], [Description], [SEKeywords], [SEDescription], [SEAltText], [Colors], [ColorSKUModifiers], [Sizes], [SizeSKUModifiers], [FroogleDescription], [ProductID], [SKUSuffix], [ManufacturerPartNumber], [Price], [SalePrice], [Weight], [MSRP], [Cost], [Points], [Dimensions], [Inventory], [DisplayOrder], [Notes], [IsTaxable], [IsShipSeparately], [IsDownload], [DownloadLocation], [DownloadValidDays], [FreeShipping], [Published], [Wholesale], [IsSecureAttachment], [IsRecurring], [RecurringInterval], [RecurringIntervalType], [RewardPoints], [SEName], [RestrictedQuantities], [MinimumQuantity], [ExtensionData], [ExtensionData2], [ExtensionData3], [ExtensionData4], [ExtensionData5], [ImageFilenameOverride], [IsImport], [Deleted], [CreatedOn], [CustomerEntersPrice], [CustomerEntersPricePrompt], [Condition], [GTIN], [UpdatedOn]) VALUES (1, newid(), 1, N'', N'', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, N'', NULL, 5.0000, NULL, NULL, NULL, NULL, 0, NULL, 100000, 1, NULL, 1, 0, 0, NULL, NULL, 1, 1, 0, 0, 0, 1, 3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, GETDATE(), 0, NULL, 0, NULL, GETDATE())
SET IDENTITY_INSERT [dbo].[ProductVariant] OFF

SET IDENTITY_INSERT [dbo].[Store] ON
print N'Inserting into [dbo].[Store]'
INSERT INTO [dbo].[Store] ([StoreID], [StoreGUID], [ProductionURI], [StagingURI], [DevelopmentURI], [Name], [Summary], [Description], [Published], [Deleted], [SkinID], [IsDefault], [CreatedOn], [UpdatedOn], [ProductionDirectoryPath], [StagingDirectoryPath], [DevelopmentDirectoryPath]) VALUES (1, newid(), N'samplesitename.com', N'', N'localhost', N'Default Store', N'', N'', 1, 0, 1, 1, GETDATE(), GETDATE(), NULL, NULL, NULL)
SET IDENTITY_INSERT [dbo].[Store] OFF

print N'Inserting into [dbo].[AppConfig]'
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Admin_DefaultInventory', N'The default inventory level applied to new products. Users may modify inventory levels at any time.', N'1000000', N'integer', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Admin_DefaultProductTypeID', N'The default Product type ID applied to a new products. Users may modify product type at any time.', N'8', N'integer', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Admin_DefaultTaxClassID', N'The default tax classification applied to new products. Users may create additional tax classes and override the default.', N'1', N'integer', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Admin_DefaultSalesPromptID', N'The default Sales Prompt ID applied to new products. Sales prompts are optionally shown when products are "on sale." Users may choose different sales prompts at any time.', N'1', N'integer', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AdminDir', N'The subfolder on which you have the administrative site.', N'admin', N'string', NULL, N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AgeCartDays', N'The number of days after which products are removed from customer carts. ', N'7', N'integer', NULL, N'GENERAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AllowShipToDifferentThanBillTo', N'If TRUE, the customer can specify a shipping address which is different than their billing address. If false, then ONLY the billing address can be entered, and the shipping address will be set to match it.', N'true', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_EMAIL', N'Required for AIM Wells Fargo SecureSource Merchants. Leave blank for non Wells Fargo SecureSource users', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_Login', N'The login to use if you are using AUTHORIZENET. Provided by Authorizenet.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_Tran_Key', N'Transaction key provided by AUTHORIZENET', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_DELIM_DATA', N'Do not change this value. This value is required by AspDotNetStorefront', N'TRUE', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_DELIM_CHAR', N'Do not change this value. This value is required by AspDotNetStorefront', N'|', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_ENCAP_CHAR', N'Do not change this value. This value is required by AspDotNetStorefront', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_RELAY_RESPONSE', N'Do not change this value. This value is required by AspDotNetStorefront', N'FALSE', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_EMAIL_CUSTOMER', N'Do not change this value. This value is required by AspDotNetStorefront. We generate our own receipts', N'FALSE', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_METHOD', N'Do not change this value. This value is required by AspDotNetStorefront. ', N'CC', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_RECURRING_BILLING', N'Do not change this value. This value is required by AspDotNetStorefront. ', N'FALSE', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_X_VERSION', N'Do not change this value. This value is required by AspDotNetStorefront. ', N'3.1', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_LIVE_SERVER', N'Authorize.net live site URL. Do not change this without Authorize.net support.', N'https://secure2.authorize.net/gateway/transact.dll', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_TEST_SERVER', N'Authorize.net test site URL. Do not change this without Authorize.net support.', N'https://test.authorize.net/gateway/transact.dll', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'BestSellersN', N'The number of products listed on the best sellers page', N'10', N'integer', NULL, N'BESTSELLERS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'BestSellersShowPics', N'If TRUE, product images will display on the best sellers page', N'false', N'boolean', NULL, N'BESTSELLERS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CacheDurationMinutes', N'Duration (in minutes) between menu cache updates. This should not be set to a value much lower than 60, or the cache will not have time to build up enough to be of any use. Has no effect unless CacheMenus is set to TRUE.', N'60', N'integer', NULL, N'SITEDISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CacheMenus', N'If TRUE, site menus and many, many other navigational and dataset elements on the store and admin panel are cached for performance reasons. If cached, these update every CacheDurationMinutes, so changes made on the admin site may not take effect until the cache expires. To force the store to reload cache, restart the site through IIS or by "touching" the web.config file in your root web folder. In production, CacheMenus should always be set to TRUE to improve performance.', N'false', N'boolean', NULL, N'SITEDISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardExtraCodeIsOptional', N'If FALSE, shoppers MUST enter their 3 or 4 digit card verification code (CVV). If TRUE, shoppers may enter the CVV, but it is not required by the javascript form validation routines.  Note that this controls on-site validation only, your payment gateway may require the CVV value regardless of this setting.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.Enabled', N'Set TRUE to engage the Cardinal Commerce Centinel EasyConnect pre-payment fraud prevention system. Please refer to the cardinalcommerce.com web site for details and to enroll. You must have an account with Cardinal Commerce before enabling this setting.', N'false', N'boolean', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.IsLive', N'If TRUE, AspDotNetStorefront will call Cardinal live servers; if FALSE, AspDotNetStorefront will call Cardinal''s test servers for use with site testing and development.', N'false', N'boolean', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.MerchantID', N'Your Cardinal Centinal Assigned Merchant ID. 100 is a test id', N'100', N'string', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.ProcessorID', N'Your Cardinal Centinal Assigned Processor ID. 800 is a test id', N'800', N'string', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.MsgType.Lookup', N'Cardinal-related setting. Change this value only under direction of Cardinal or AspDotNetStorefront support. ', N'cmpi_lookup', N'string', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.MsgType.Authenticate', N'Cardinal-related setting. Change this value only under direction of Cardinal or AspDotNetStorefront support. ', N'cmpi_authenticate', N'string', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.TransactionUrl.Test', N'URL for Cardinal Commerce test/development server', N'https://centineltest.cardinalcommerce.com/maps/txns.asp', N'string', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.TransactionUrl.Live', N'URL for Cardinal Commerce live/production server. Assigned to your account by Cardinal Commerce.', N'https://centinel800.cardinalcommerce.com/maps/txns.asp', N'string', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.MapsTimeout', N'Timeout, in milliseconds, for Cardinal Commerce API calls', N'10000', N'integer', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.NumRetries', N'Number of times the Cardinal Commerce authentication request will be attempted, if necessary', N'3', N'integer', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ClearCouponAfterOrdering', N'If TRUE, the shopper''s coupon code will be cleared in their customer record after each order. If FALSE, shopper''s coupon code will remain active in their customer record.  Generally best left set to TRUE.', N'true', N'boolean', NULL, N'GENERAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ClearOldCartOnSignin', N'If TRUE, shoppers'' old saved carts from previous sessions are cleared the next time the shopper logs in. Works in conjunction with the PreserveActiveCartOnSignin setting.', N'false', N'boolean', NULL, N'GENERAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CODHandlingExtraFee', N'If non-zero, the amount specified in this setting is added to all order totals using the C.O.D. payment method, for orders where the shipping total is already non zero. This cost is NOT added to orders where the shipping total computes to 0.00. This value should be a dollar amount, without leading $ or other currency character, e.g. 5.00', N'', N'decimal', NULL, N'SHIPPING', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultShippingCalculationID', N'The default type of shipping calculation the site uses, if no other value can be found.', N'2', N'integer', NULL, N'SHIPPING', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DelayedDropShipNotifications', N'If TRUE, distributor e-mails are NOT automatically sent and you will therefore need to send the order e-mail manually from within the order details page. Set FALSE to automatically e-mail orders to distributors.', N'false', N'boolean', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Dispatch_OrderThreshold', N'If blank, each order is dispatched via SMS as it is received. Specify a dollar value, e.g. 100.00, to dispatch messages only if the order total exceeds the value you set here. You can use this if you only want to be notified on larger orders', N'', N'decimal', NULL, N'DISPATCH', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Dispatch_ToPhoneNumber', N'The cell messaging number of your phone, in the EXACT format required by your carrier to receive a message, e.g. xxxxxxxxx@mmode.com, etc. Contact your cell carrier for more instructions on how to send SMS messages to your phone via e-mail.', N'', N'string', NULL, N'DISPATCH', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Dispatch_SiteName', N'The name of the store that appears in the SMS message. This MUST be short, e.g. fewer than 5 characters. ', N'', N'string', NULL, N'DISPATCH', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Dispatch_MAX_SMS_MSG_LENGTH', N'Internal use only. Do not modify.', N'160', N'integer', NULL, N'DISPATCH', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowNewsOnHomePage', N'If TRUE, news items appear on the home page. If FALSE, news items do not appear on the home page, even if news items exist.', N'true', N'boolean', NULL, N'SITEDISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FreeShippingThreshold', N'If set to a dollar amount (no $ or other currency symbol), orders equal to or greater than the amount specified here have free shipping. A value of 0.00 or blank disables this feature.', N'', N'decimal', NULL, N'SHIPPING', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GotOrderEMailFrom', N'The e-mail address *From* which new order notifications are e-mailed. For example, sallyjane@samplesitename.com. This is used to notify store owners of new orders.', N'', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GotOrderEMailFromName', N'The name *From* which new order notifications are e-mailed. For example, "Sally Jane" or "Orders". This optional value may also be the same as the GotOrderEMailFrom value. This is used to notify store owners of new orders. ', N'Sales', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GotOrderEMailTo', N'The e-mail address *To* which order notifications are e-mailed. Typically the e-mail address store administrators monitor. This is used to notify store owners of new orders. Separate multiple e-mail addresses with a comma or semicolon.', N'', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Inventory.LimitCartToQuantityOnHand', N'If TRUE, add-to-cart buttons display a warning if shoppers add a quantity greater than inventory on-hand. Further, the quantity value reverts to quantity on hand, making it impossible for shoppers to add a greater quantity than you may have on hand. Set FALSE to turn off these limitations, enabling shoppers to order greater quantities than you may have on hand.', N'false', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'LinkToProductPageInCart', N'If TRUE, the product name shown within the shopping cart will link directly to the appropriate product page. If FALSE, product names appear only as text.', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'LiveServer', N'The domain of the live site. This is usually just domain.com for your site (use your own domain name). If your store runs on a subdomain, this value should be subdomain.domain.com.', N'yourdomain.com', N'string', NULL, N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MailMe_FromAddress', N'The e-mail address from which you want your store e-mails sent. Note that customer receipt e-mails use the ReceiptEMailFrom setting.', N'sales@yourdomain.com', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MailMe_FromName', N'The name from which your store emails sent, for example, Sally Jane. Note that customer receipt e-mails use the ReceiptEMailFromName setting.', N'Sales', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MailMe_Pwd', N'The e-mail server login password (optional). Consult your e-mail server requirements to determine whether or not a password is required. ', N'', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MailMe_Port', N'Set this value to the TCP Port that your e-mail server uses.  The vast majority of SMTP servers use standard port 25. Modify this value only if you are certain that your e-mail server uses a port other than 25 for SMTP connections.', N'25', N'integer', NULL, N'EMAIL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MailMe_Server', N'DNS of your e-mail server, for example, mail.yourdomain.com.', N'', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MailMe_ToAddress', N'The e-mail address to which order notifications are sent, typically usually the same as MailMe_FromAddress. For example, sales@yourdomain.com', N'', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MailMe_ToName', N'The e-mail Name to which you want order notifications sent, e.g. Sales.', N'Sales', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MailMe_User', N'The e-mail server''s login userName (optional). Consult your e-mail server requirements to determine whether or not a username is required.', N'', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MailMe_UseSSL', N'Set TRUE if your e-mail server requires an SSL connection. Note that this setting is completely unrelated to SSL for your website. Also note that e-mail servers very rarely require SSL. ', N'false', N'boolean', NULL, N'EMAIL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MinCartItemsBeforeCheckout', N'Minimum number of items a shopper must have in their cart before they can checkout. Sum of item quantity must be greater than the value specified here in order to check out. ', N'1', N'integer', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxCartItemsBeforeCheckout', N'Maximum number of line items a shopper can have in their cart in order to check out. Quantities are not relevant; this setting considers only the number of separate items in the cart.', N'300', N'integer', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MinSearchStringLength', N'The minimum number of characters required in search boxes on the front-end of the site. Minimum value is 1.', N'3', N'integer', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PaymentGateway', N'This value specifies which credit card payment processing gateway to use. To set your active payment gateway, choose Payment Methods from the Configuration menu.', N'MANUAL', N'invoke', N'AspDotNetStorefrontGateways.GatewayLoader,AspDotNetStorefrontGateways,GetAvailableGatewayNames', N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PaymentMethods', N'One or more payment methods available to shoppers. To set payment methods, choose Payment Methods from the Configuration menu. ', N'Credit Card', N'multiselect', N'Credit Card,PayPalExpress,Request Quote,Purchase Order,Check By Mail,C.O.D.,MicroPay,PayPal Payments Advanced,AmazonPayments,eCheck', N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.LiveServer', N'URI to the live PayPal API. Do not change this value without consulting PayPal support.', N'https://www.paypal.com/cgi-bin/webscr', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.ForceCapture', N'If Yes, will force PayPal & PayPal Express Checkout payments to Capture, regardless of TransactionMode. If No, these payments will honor the TransactionMode setting.', N'false', N'boolean', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.API.Username', N'PayPal assigned API username. Consult PayPal documentation for more information. You get this from the PayPal site.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.API.Password', N'PayPal assigned API password. Consult PayPal documentation for more information. You get this from the PayPal site.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.API.MerchantEMailAddress', N'PayPal assigned API merchant e-mail address for your account. Consult PayPal documentation for more information. This is almost ALWAYS left blank!', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.API.TestURL', N'Test sandbox PayPal SOAP API URL. Do not change this value without consulting PayPal support. ', N'https://api-3t.sandbox.paypal.com/2.0/', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.API.LiveURL', N'Live server PayPal SOAP API URL. Do not change this value without consulting PayPal support.', N'https://api-3t.paypal.com/2.0/', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.RequireConfirmedAddress', N'To require shoppers to check out only with a confirmed PayPal shipping address, set this to Yes. To allow any address, set to No. Best practice recommend a Yes value.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.DefaultLocaleCode', N'Two character Locale Code for pages displayed by PayPal. Supported values: AU, DE, FR, IT, GB, ES, US', N'US', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.PayPalCreditButtonURL', N'URL for PayPal Credit  button. Do not change this value without consulting PayPal support.', N'https://www.paypalobjects.com/webstatic/en_US/i/buttons/ppcredit-logo-medium.png', NULL, NULL, N'GATEWAY', 1, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.ShowPayPalCreditButton', N'Show the PayPal Credit  button on the checkout page.', N'true', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.TestServer', N'PayPal Sandbox Site URL. Do not change this value without consulting PayPal support.', N'https://www.sandbox.paypal.com/cgi-bin/webscr', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.NotificationURL', N'Specifies the URL to the page which handles PayPal callback notifications. Do not change this value without consulting PayPal support.', N'paypalnotifications', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.LiveURL', N'PayPal Express In-Context Checkout Live Site URL. Do not change this value without consulting PayPal support.', N'https://www.paypal.com/checkoutnow', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.SandboxURL', N'PayPal Express In-Context Checkout Sandbox Site URL. Do not change this value without consulting PayPal support.', N'https://www.sandbox.paypal.com/checkoutnow', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.PageStyle', N'Sets the Custom Payment Page Style for payment pages associated with this button/link. PageStyle corresponds to the HTML variable page_style for customizing payment pages. The value is the same as the Page Style Name you chose when adding or editing the page style from the Profile subtab of the My Account tab of your PayPal account.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.HeaderImage', N'A URL for the image you want to appear at the top left of the PayPal payment page. The image has a maximum size of 750 pixels wide by 90 pixels high. PayPal recommends that you provide an image that is stored on a secure (https) server. Consult PayPal documentation for more information. ', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.HeaderBackColor', N'Sets the background color for the header of the PayPal payment page. Character length and limitation: Six character HTML hexadecimal color code in ASCII. Consult PayPal documentation for more information.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.HeaderBorderColor', N'Sets the border color around the header of the PayPal payment page. The border is a 2-pixel perimeter around the header space, which is 750 pixels wide by 90 pixels high. Character length and limitations: Six character HTML hexadecimal color code in ASCII. Consult PayPal documentation for more information.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.PayFlowColor', N'Sets the background color for the PayPal payment page. Character length and limitation: Six character HTML hexadecimal color code in ASCII. Consult PayPal documentation for more information. ', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.API.Signature', N'PayPal assigned API signature. Consult PayPal documentation for more information. You get this from the PayPal site.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.ButtonImageURL', N'URL for PayPal Express Checkout Button Image.', N'https://www.paypalobjects.com/webstatic/en_US/i/buttons/checkout-logo-medium.png', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayflowPro.Reporting.LiveURL', N'Payflow URL for reporting API interface for Live transactions.', N'https://payments-reports.paypal.com/reportingengine', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayflowPro.RecurringMaxFailPayments', N'Payflow recurring billing API maxfailpayments value to use for setting up new subscriptions.', N'1', N'integer', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayflowPro.Reporting.ReportName', N'Payflow report name to use for recurring subscription status.', N'RecurringBillingReport', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayflowPro.Reporting.TestURL', N'Payflow URL for reporting API interface for Test transactions.', N'https://payments-reports.paypal.com/test-reportingengine', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ProductPageOutOfStockRedirect', N'If TRUE, instead of showing an "Out of Stock" message, "hidden" product pages will redirect to a 404 "page not found" error pages. Be aware that search engines remove from their records such 404 pages, which will negatively affect search engine rankings. Set this = TRUE only for sites selling one-off or limited run products.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PreserveActiveCartOnSignin', N'If TRUE, shoppers'' anonymous cart contents will be moved into their cart when logging in or registering. Works in conjunction with the ClearOldCartOnSignin setting.', N'true', N'boolean', NULL, N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RatingsCommentFrameVisibility', N'Set to "visible" or "hidden". If visible, the ratings voting worker window appears; otherwise the worker window will be hidden. Useful for debugging purposes.', N'hidden', N'string', NULL, N'RATINGS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RatingsCanBeDoneByAnons', N'If TRUE, anonymous visitors may rate products; otherwise, only visitors who are logged in may rate products. ', N'false', N'boolean', NULL, N'RATINGS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RatingsEnabled', N'Set TRUE to display product ratings at the bottom of product pages; set FALSE to disable the feature and hide product ratings. ', N'false', N'boolean', NULL, N'RATINGS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RatingsPageSize', N'The number of rating comments shown on product pages, if RatingsEnabled is TRUE.', N'10', N'integer', NULL, N'RATINGS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ReceiptEMailFrom', N'The e-mail address from which customer receipts are e-mailed, for example orders@samplesitename.com.', N'', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ReceiptEMailFromName', N'The name from which customer receipts are e-mailed. For example Sales, or Customer Service. ', N'Sales', N'string', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RelatedProductsFormat', N'DEPRECATED - this setting remains for backward compatibility, but is no longer used and will be removed in a future release.', N'GRID', N'string', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RequireTermsAndConditionsAtCheckout', N'If TRUE, the CheckoutTermsAndConditions topic appears on the checkout page and the shopper must check a box to indicate their acceptance of the specified terms and conditions. This is usually only necessary in rare circumstances (selling dangerous goods, etc).', N'false', N'boolean', NULL, N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.ActiveCarrier', N'The shipping carrier you will be using, can be a comma separated list of: UPS, USPS, FEDEX, DHL', N'UPS', N'multiselect', N'UPS,UPS2,USPS,FEDEX,DHL,CANADAPOST,AUSPOST', N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DomesticCarriers', N'The shipping carrier you will be using for domestic shipments, can be a comma separated list of: UPS, UPS2, USPS, FEDEX, DHL, CANDAPOST, AUSPOST', N'', N'multiselect', N'UPS,UPS2,USPS,FEDEX,DHL,CANADAPOST,AUSPOST', N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.InternationalCarriers', N'The shipping carrier you will be using for international shipments, can be a comma separated list of: UPS, USPS, FEDEX, DHL', N'', N'multiselect', N'UPS,UPS2,USPS,FEDEX,DHL,CANADAPOST,AUSPOST', N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.Insured', N'TRUE if you want the shipment insured; otherwise, FALSE.', N'false', N'boolean', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DefaultItemWeight', N'If any Product variant does not have any weight specified in the Product variant, this default weight will be used (float number)', N'0.5', N'decimal', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.OriginAddress', N'Line 1 of the physical address from which you ship.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.OriginAddress2', N'Line 2 of the physical address from which you ship.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.OriginCity', N'The city from which you ship.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.OriginState', N'The state/province abbreviation from which you ship.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.OriginZip', N'The postal code from which you ship.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.OriginCountry', N'The 2-character country abbreviation from which you ship.', N'US', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.UserName', N'Your UPS-assigned account user name.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.Password', N'Your UPS-assigned account password.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.License', N'Your UPS Account License. May be referred to by the name XML Access Key. ', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.Server', N'The UPS live shipping rates server', N'https://onlinetools.ups.com/ups.app/xml/Rate', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.TestServer', N'The UPS test shipping rates server', N'https://wwwcie.ups.com/ups.app/xml/Rate', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.UPSPickupType', N'The type of UPS pickup used. Allowed values are: UPSDailyPickup, UPSCustomerCounter, UPSOneTimePickup, UPSOnCallAir, UPSSuggestedRetailRates, UPSLetterCenter, UPSAirServiceCenter.', N'UPSDailyPickup', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.AccountNumber', N'UPS2 Carrier Only. For accounts with negotiated rates, specify the 6-character UPS account.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.AddressTypeBehavior', N'UPS2 Carrier Only. Controls behavior of AddressType indicator in ShipTo addresses. Default is blank, which treats Unknown types as Residential. Legal values are ForceAllResidential, UnknownsAreCommercial, or ForceAllCommercial.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.DeliveryConfirmation', N'UPS2 Carrier Only. Legal values are DeliveryConfirmation, SignatureRequired, or AdultSignatureRequired.  Note that this will be ignored for international orders, as UPS does not provide Delivery Confirmation services on those types of orders.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.GetNegotiatedRates', N'UPS2 Carrier Only. When true, retrieves negotiated rates for the account specified in RTShipping.UPS.AccountNumber.', N'false', N'boolean', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.Services', N'UPS2 Carrier Only. A comma-separated list of UPS services, in the format CODE;DisplayName.', N'03;UPS Ground,12;UPS Three-Day Select,02;UPS Second Day Air,13;UPS Next Day Air Saver,01;UPS Next Day Air,14;UPS Next Day Air Early AM,07;UPS Worldwide Express,08;UPS Worldwide Expedited,11;UPS Standard,54;UPS Worldwide Express Plus,59;UPS Second Day Air AM,65;UPS Saver', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UPS.MaxWeight', N'The maximum weight allowed for a UPS shipment in the RTShipping.WeightUnits setting. If an order weight exceeds this value, then the CallForShippingPrompt appears as the shipping method, with a $0 price.', N'150', N'integer', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.USPS.UserName', N'Your USPS-assigned account user name.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.USPS.Server', N'The USPS live shipping rates server. Do not change without USPS support.', N'http://Production.ShippingAPIs.com/ShippingAPI.dll', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.USPS.TestServer', N'The USPS test shipping rates server. Do not change without USPS support.', N'http://testing.shippingapis.com/ShippingapiTest.dll', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.USPS.MaxWeight', N'The maximum weight allowed for a USPS shipment in the RTSHipping.WeightUnits setting. If an order weight exceeds this, then the CallForShippingPrompt setting is displayed as the shipping method, with a $0 price.', N'70', N'integer', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.USPS.Services', N'Contains a list of available USPS Services for domestic USPS rates requests. Valid services are: Express, Priority, Parcel, Library, Media', N'Express,Priority,Parcel,Library,Media', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.FedEx.AccountNumber', N'Your FedEx-assigned account number.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.FedEx.Meter', N'Your FedEx-assigned meter number, provided to you after registration.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.WeightUnits', N'Enter the value for RTShipping calls. See UPS/USPS/FEDEX/DHL requirements. See also the Localization.WeightUnits setting.', N'LBS', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.MarkupPercent', N'If you want to mark up the rates returned by the carrier, enter the mark-up percentage here. For example, 5.0 adds 5% to each returned rate.', N'', N'decimal', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DumpDebugXmlOnCheckout', N'If TRUE, real-time shipping request and real-time shipping response XML will be shown on bottom of checkout page. This is used only for debugging purposes. Appears only in the checkout process for administrative users. You can send non-admins to /checkout/DebugRealtimeShipping to see the output as well.', N'false', N'boolean', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.CallForShippingPrompt', N'If the order exceeds maximum shipping rate, the prompt specified here is shown as the shipping method with $0 price.', N'Call For Shipping Rates', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.FedEx.MaxWeight', N'The maximum allowed weight for a FedEx shipment, units of which are specified in the RTSHipping.WeightUnits setting. If an order weight exceeds the value specified here, then the CallForShippingPrompt setting is displayed as the shipping method, with a $0 price.', N'150', N'integer', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.ShowErrors', N'If TRUE, any errors returned from the real-time rate call will be displayed on the cart page. Very helpful for debugging real-time rate issues.', N'false', N'boolean', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHL.AccountNumber', N'Your DHL-assigned account number.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHL.APISystemID', N'Your DHL-assigned account API ID.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHL.APISystemPassword', N'Your DHL-assigned API account password.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHL.Server', N'The DHL live shipping rates server. Do not change without DHL support.', N'HTTPS://eCommerce.airborne.com/ApiLanding.asp', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHL.TestServer', N'The DHL test shipping rates server. Do not change without DHL  support.', N'HTTPS://eCommerce.airborne.com/ApiLandingTest.asp', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.ShippingMethodsToPrevent', N'A comma-separated list of real-time shipping methods which do not appear to the shopper. List must exactly match text description of the shipping methods, e.g. U. S. FedEx Same Day, FedEx Overnight, U.S. Postal Priority.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.PackageExtraWeight', N'Extra weight, in lbs, that will be added to each package. You can use this to account for the weight of packing materials if necessary.', N'0.0', N'decimal', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.UseTestRates', N'Used to determine if the real-time rates service contacts live servers or test servers', N'false', N'boolean', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.MultiDistributorCalculation', N'If you have multiple distributors, set this TRUE to allow real-time shipping rate calculations for products based on the distributor''s address. Currently only available for UPS.', N'false', N'boolean', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.CanadaPost.DefaultPackageSize', N'For items shipping CanadaPost and combined into one box, this is the default size of that box in cm.', N'25x20x15', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.CanadaPost.Language', N'Language code for CanadaPost. Valid values are en (English), fr (French), auto (default; selected based on customer locale).', N'auto', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.CanadaPost.MaxWeight', N'CanadaPost Sell Online maximum package weight in kg.', N'30', N'integer', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.CanadaPost.MerchantID', N'CanadaPost-assigned Sell Online Merchant ID.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.CanadaPost.Server', N'DNS of CanadaPost Sell Online ratings server. Do not change without CanadaPost support.', N'sellonline.canadapost.ca', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.CanadaPost.ServerPort', N'TCP port of CanadaPost Sell Online ratings server. Do not change without CanadaPost support.', N'30000', N'integer', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHL.ShipInDays', N'The number of days from today to calculate the DHL Ship-On date.', N'2', N'integer', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHLIntl.BillingAccountNbr', N'If the IntlBillingParty is someone other than S (Sender), enter the DHL account number to be billed.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHLIntl.BillingParty', N'DHL billing party. Valid codes are S (Sender, default), R (Receiver), and 3 (Third Party).', N'S', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHLIntl.Dutiable', N'DHL duty charge. Indicates whether or not the shipment is dutiable. Valid codes are Y (dutiable, default) or N (non-dutiable).', N'Y', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHLIntl.DutyPayment', N'DHL duty and tax charge payment type. Valid codes are S (Shipper, default), R (Receiver), or 3 (Third Party).', N'S', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHLIntl.DutyPaymentAccountNbr', N'If DHL duty payment type is someone other than Sender or Receiver, enter the DHL account number to be billed.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHLIntl.MaxWeight', N'DHL International maximum package weight.', N'550', N'integer', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHLIntl.Overrides', N'Valid codes include Z1 (override Postal Code not in State/Province error), Z2 (override PostalCode not in DHL database error), ES (generate Saturday quote on day other than Friday)', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHLIntl.Packaging', N'DHL packaging specifier. Valid codes are P (package, box or tube), or L (Letter, cannot exceed 0.5 lb)', N'P', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHLIntl.Services', N'DHL Service Level Code for the requested service levels. Valid codes are IE;DHL Worldwide Priority Express', N'IE;DHL Worldwide Priority Express', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.DHLIntl.ShippingKey', N'Your DHL Shipping Key for International Shipments', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.AusPost.DefaultPackageSize', N'For non-ShipSeparately items, the package dimensions to use, specified in cm. Australia Post only.', N'15x15x15', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.AusPost.DomesticServices', N'List of domestic shipping classes, separated by commas. Each entry consists of a CODE;Description pair, separated by a semi-colon.', N'STANDARD;Regular Parcel, EXPRESS;Express Post Parcel', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.AusPost.IntlServices', N'List of Australia Post international shipping classes, separated by commas. Each entry consists of a CODE;Description pair, separated by a semi-colon.', N'SEA;Sea Mail, AIR;Air Mail, ECI_M;Express Courier International, EPI;Express Post International', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.AusPost.MaxWeight', N'The maximum weight allowed for an Australia Post shipment, in kg. If an order weight exceeds this, then the CallForShippingPrompt setting is displayed as the shipping method, with a $0 price.', N'20', N'integer', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.SortByRate', N'Set TRUE to sort the real-time rate list by increasing rate; otherwise FALSE;', N'false', N'boolean', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UPS.MinimumPackageWeight', N'This is the minimum package weight in pounds that can be reported to UPS for a shipping quote.  Note: Setting this to a value less than 0.1 could cause UPS to return an error in their response.', N'0.1', N'decimal', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SE_MetaTitle', N'Default page titles, if nothing else is found.', N'Enter your site title here', N'string', NULL, N'SKINS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SE_MetaDescription', N'If a page doesn''t get a meta description from somewhere (e.g. a Product page), this is used by default.', N'enter your site description here', N'string', NULL, N'SKINS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SE_MetaKeywords', N'If a page doesn''t get a meta keyword list from somewhere (e.g. a Product page), this is used by default.', N'enter your site keywords here', N'string', NULL, N'SKINS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Search_LogSearches', N'If TRUE, customer searches will be logged in the SearchLog table.', N'false', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Search_ShowDistributorsInResults', N'If TRUE, distributor matches appear within the search results.', N'false', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Search_ShowManufacturersInResults', N'If TRUE, manufacturer matches appear within the search results.', N'false', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Search_ShowCategoriesInResults', N'If TRUE, category matches appear within the search results.', N'true', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Search_ShowSectionsInResults', N'If TRUE, section matches appear within the search results.', N'true', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Search_ShowProductsInResults', N'If TRUE, product matches appear within the search results.', N'true', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SearchAdv_ShowProductType', N'If TRUE, product type filter appears on the advanced search page.', N'true', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SearchAdv_ShowCategory', N'If TRUE, category filter appears on the advanced search page.', N'true', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SearchAdv_ShowSection', N'If TRUE, section filter appears on the advanced search page.', N'true', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SearchAdv_ShowManufacturer', N'If TRUE, manufacturer filter appears on the advanced search page.', N'true', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SearchAdv_ShowDistributor', N'If TRUE, distributor filter appears on the advanced search page.', N'true', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SearchAdv_ShowPriceRange', N'If TRUE, price range filter appears on the advanced search page.', N'true', N'boolean', NULL, N'SEARCH', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SessionTimeoutInMinutes', N'Shopper session data timeout value, in minutes. Default is 15 minutes.', N'15', N'integer', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AdminSessionTimeoutInMinutes', N'Admin session data timeout value, in minutes. Default is 15 minutes', N'15', N'integer', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SessionTimeoutLandingPage', N'When shopper sessions end due to idleness, this page on your site appears. A blank value sends shopper to the site''s home page.', N'', N'string', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SessionTimeoutWarning.Enabled', N'If TRUE, shoppers are warned before their sessions time out due to inactivity.', N'true', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingHandlingExtraFee', N'The extra fee added to all shipping totals, for orders where the shipping total is already non-zero. The value specified here is NOT added to orders where the shipping total computes to 0.00. This value should be a dollar amount, without leading $ or other currency symbol, e.g. 5.00. ', N'', N'decimal', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingMethodIDIfFreeShippingIsOn', N'A comma-separated list of shipping method IDs (one or more integers) which are marked as having free shipping. You can see the shipping method IDs for your site from with admin. Choose Configuration, Shipping Calculation within Admin, then click View Real-Time Shipping Methods or View Shipping Methods to view shipping methods and their IDs.', N'', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowBuyButtons', N'If TRUE, add-to-cart buttons appear on product pages. If FALSE, add-to-cart pages will not appear on product pages. Useful when you are running a catalogue, informational, or gallery item site).', N'true', N'boolean', NULL, N'SITEDISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowQuantityOnProductPage', N'If TRUE, a quantity box appears on Product pages, enabling shoppers to specify a quantity of the product added to the cart.', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowWishButtons', N'If TRUE, add-to-wishlist buttons appear on product pages; otherwise FALSE.', N'true', N'boolean', NULL, N'SITEDISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowCustomerServiceNotesInReceipts', N'If TRUE, customer service notes appear on shopper receipts and on order history pages.', N'true', N'boolean', NULL, N'SETUP', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowEMailProductToFriend', N'If TRUE, email-this-product-to-a-friend buttons appear on product pages; otherwise FALSE.', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowFullNameInRightBar', N'If TRUE, a product''s full name (product name + variant name) displays is always displayed in a right bar format. If FALSE (recommended) AspDotNetStorefront makes some decisions on what display is most appropriate.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowInventoryTable', N'If TRUE, inventory-in-stock table appears for the product. Applies only for Products using advanced inventory management.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowSubcatsInGrid', N'If a category has subcategories, subcategories appear in either list or grid format based on this flag, at the top of category pages.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'StoreCCInDB', N'If Yes (not recommended), customer credit card information is encrypted and stored in the database. If No, credit card information is not stored anywhere within AspDotNetStorefront. We highly recommend setting this value to No and not storing credit card information unless you have a specific reason to do so (e.g. recurring orders, and even then only under certain circumstances). Note that CCV codes are never stored anywhere within AspDotNetStorefront.', N'false', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'StoreName', N'The Name of your store', N'AspDotNetStorefront', N'string', NULL, N'SKINS', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'StoreVersion', N'Internal use only. Do not modify. Used for documentation purposes. All order records are tagged with the AspDotNetStorefront version with which they were created.', N'0.0.0.0', N'string', NULL, N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'TransactionMode', N'Specifies how the site handles credit cards in real-time when an order is entered. AUTH means that the card is ONLY authorized; you must use the admin console to later capture the amount, or process the card manually offline. AUTH CAPTURE means that the card is authorized AND captured in real-time.', N'AUTH CAPTURE', N'enum', N'AUTH, AUTH CAPTURE', N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UseLiveTransactions', N'If Yes, AspDotNetStorefront calls the merchant gateway when processing an order. If No, AspDotNetStorefront does not call the merchant gateway and an OK status is returned. No is acceptable for development and testing purposes. Must always must be set to Yes for a live store site.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UseSKUForProductImageName', N'If TRUE, product image file name is taken from the Product SKU.jpg, SKU.gif, or SKU.png. If FALSE (the default), product image file names will be ProductID.JPG, ProductID.GIF or ProductID.PNG', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UseSSL', N'If Yes, https links will be used for shoppingcart pages, account pages, receipt pages, etc. Only set this value Yes AFTER you have your Secure Certificate (SSL cert) installed on your live server. SSL also is ONLY invoked on the live server, not the development or staging servers, so make sure your LiveServer setting is also set to yourdomain.com.', N'false', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'3DSecure.CreditCardTypeIDs', N'Comma-separated list of CreditCardTypeIDs (integers) which 3-D Secure transactions are processed with the currently-active gateway. You can see a list of credit card type IDs by choosing Configuration, Credit Card Types from within admin. Note that this setting has no effect if your store is using Braintree. Configure Braintree in Configuration, Site Setup Wizard to add 3-D Secure features to Braintree.', N'', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ZoneIdForNoMatch', N'The shipping zone id to use if shipping by weight or total & zone is specified and the shopper postal code does not match any zone. This setting matches the Zone ID reported for the zone definition in the admin console.', N'0', N'integer', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Recurring.SendOrderEMailToCustomer', N'If TRUE, when a (normal, not recurring) order isCREATEd, an order receipt e-mail is sent to the customer. If FALSE, no order e-mail is sent.', N'true', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Recurring.SendShippedEMail', N'If TRUE, shoppers are e-mailed a "your order has shipped" e-mail when a recurring order is marked as shipped. If FALSE, "your order has shipped" e-mails are not sent.', N'true', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Recurring.LimitCustomerToOneOrder', N'When true, if a customer places a new Gateway Auto-Ship order any existing Auto-Ship orders are canceled with the gateway and are cleared from their cart. If a subscription is involved and SubscriptionExtensionOccursFromOrderDate=false then their remaining subscription period will be preserved.', N'false', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Recurring.UseGatewayInternalBilling', N'If TRUE, the gateway''s internal billing will be used instead of the built-in billing mechanism when processing recurring orders. This is ONLY allowed to be true if you are using the Authorize.net or PayPal PayFlow PRO gateways. If using these gateways, setting this flag to TRUE means that it is unnecessary to store credit card information in your database for recurring orders. Refer to Help for further instructions on how to process recurring order reports using each gateway.', N'true', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Recurring.ClearIsNewFlag', N'If TRUE, recurrences of Auto-Ship orders will have the IsNew flag cleared automatically.', N'false', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SendOrderEMailToCustomer', N'if true, when a (normal, not recurring) order isCREATEd, an order receipt e-mail will be sent to the customer. If false, then no order e-mail is sent', N'true', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SendShippedEMailToCustomer', N'If TRUE, an e-mail is sent to the shopper when an order is marked shipped within the admin console. The e-mail notifies the shopper that the order has shippped. Does not apply to recurring orders. ', N'true', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowSummaryInTableOrderFormat', N'If TRUE, the summary field in the Product will be used on category pages formatted in table order.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CustomerLevel0AllowsPOs', N'If TRUE, customer level 0 (all customers) may use purchase orders (assuming the purchase order payment method is enabled).', N'true', N'boolean', NULL, N'SITEDISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FilterProductsByAffiliate', N'If TRUE, products are filtered by the customer affiliate ID, and the Product to affiliate mappings are used in the ProductAffiliate table.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DisallowOrderNotes', N'If TRUE, the order notes field on the shopping cart page does not appear.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CartMinOrderAmount', N'The minimum order amount which can be ordered. Leave blank for no minimum. An example minimum is 100.00, with no $ or other currency symbol.', N'', N'decimal', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_EMAIL', N'Required for AIM Wells Fargo SecureSource Merchants', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_Login', N'The login to use if you are using eProcessingNetwork. Provided by eProcessingNetwork.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_Tran_Key', N'Transaction key provided by eProcessingNetwork', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_DELIM_DATA', N'Do not change this value. This value is required by AspDotNetStorefront', N'TRUE', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_DELIM_CHAR', N'Do not change this value. This value is required by AspDotNetStorefront', N'|', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_ENCAP_CHAR', N'Do not change this value. This value is required by AspDotNetStorefront', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_RELAY_RESPONSE', N'Do not change this value. This value is required by AspDotNetStorefront', N'FALSE', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_EMAIL_CUSTOMER', N'Do not change this value. This value is required by AspDotNetStorefront. AspDotNetStorefront generates its own receipts.', N'FALSE', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_METHOD', N'Do not change this value. This value is required by AspDotNetStorefront. ', N'CC', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_RECURRING_BILLING', N'Do not change this value. This value is required by AspDotNetStorefront. ', N'FALSE', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_X_VERSION', N'Do not change this value. This value is required by AspDotNetStorefront. ', N'3.1', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_LIVE_SERVER', N'Do not change this value without eProcessingNetwork support.', N'https://www.eProcessingNetwork.Com/cgi-bin/an/order.pl', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eProcessingNetwork_TEST_SERVER', N'Do not change this value without eProcessingNetwork support.', N'https://www.eProcessingNetwork.Com/cgi-bin/an/order.pl', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FilterProductsByCustomerLevel', N'If TRUE, products are filtered by the customer affiliate id, and the product-to-customer level mappings are used in the Productcustomerlevel table.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FilterByCustomerLevelIsAscending', N'If TRUE, and FilterProductsByCustomerLevel = TRUE, then HIGHER customer levels (numerically) can see Products from that level and all lower customer levels, e.g. Customer Level 3, see all products mapped to customer levels, 0, 1, 2, and 3. Note that Customer Level 0 is an anonymous user / regular site visitor.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Localization.StoreCurrency', N'The ISO 4217 Standard for the master store currency (i.e. the currency in which you do business). This defines the currency code sent to the payment gateway.', N'USD', N'string', NULL, N'SETUP', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Localization.StoreCurrencyNumericCode', N'The ISO 4217 Standard Numeric code for the master store currency (i.e. the currency in which you do business.) This defines the currency code sent to the payment gateway.', N'840', N'integer', NULL, N'SETUP', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Localization.WeightUnits', N'Enter the prompt you want to use for weights (e.g. lbs, kg, kilos, etc.)', N'LBS', N'string', NULL, N'SETUP', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Localization.DimensionUnits', N'Enter the prompt you want to use for dimensions (e.g. inches (IN) or centimeters (CM))', N'IN', N'string', NULL, N'SETUP', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AddToCartAction', N'If this is set to STAY then, following after an add-to-cart action, the shopper remains on the page and a message appears indicating the product has been added to the cart. If blank (the default), the shopper is redirected to the checkout page.', N'', N'string', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultAddToCartQuantity', N'The default quantity filled into the add-to-cart form quantity field. If blank, 1 will be used.', N'', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MinOrderWeight', N'The minimum order weight, in lbs. Generally most useful when you use real-time shipping calculations. ', N'1.0', N'decimal', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'2CHECKOUT_VendorID', N'2Checkout-provided vendor account number. Within the 2Checkout control panel, set "Direct Return" to disabled.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'2CHECKOUT_LIVE_SERVER', N'2Checkout live server. Do not change this value without 2Checkout support.', N'https://www.2checkout.com/2co/buyer/purchase', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'WriteFileInUTF8', N'If TRUE, text files are formatted using UTF-8. If FALSE (the default), files are formatted using ASCII.', N'false', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'IncludeGoogleTrackingCode', N'If TRUE, the Google tracking topic will be included on the order confirmation page.', N'false', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Admin.MultiGalleryImageWidth', N'Sets image widths within the multi-image product manager in the Admin Console. Set to 0 or blank to use built-in width. This setting does not affect images on your website.  This setting is merely a convenient way to help view the multi-image gallery in a smaller size when editing on the admin site.', N'', N'string', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ResizableLargeImagePopup', N'If TRUE, shoppers may resize the large image popup window.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMapFeed.EntityChangeFreq', N'Frequency tag used to build the Site Map feed (category, section, manufacturer, etc) URL nodes. Consult http://www.sitemaps.org/protocol.html documentation for a list of the values allowed here. AspDotNetStorefront support does not have information on allowed values.', N'weekly', N'string', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMapFeed.EntityPriority', N'Priority tag used to build the Site Map feed entity (category, section, manufacturer, etc) URL nodes. Consult http://www.sitemaps.org/protocol.html documentation for a list of values allowed here. AspDotNetStorefront support does not have information on allowed values.', N'0.7', N'string', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMapFeed.ObjectChangeFreq', N'Frequency tag used to build the Site Map feed product (object) URL nodes. Consult http://www.sitemaps.org/protocol.html documentation for a list of values allowed here. AspDotNetStorefront support does not have information on allowed values.', N'daily', N'string', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMapFeed.ObjectPriority', N'Priority tag used to build the Site Map feed product (object) URL nodes. Consult http://www.sitemaps.org/protocol.html documentation for a list of values allowed here. AspDotNetStorefront support does not have information on allowed values.', N'0.9', N'string', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMapFeed.TopicChangeFreq', N'Frequency tag used to build the Site Map feed topic URL nodes. Consult http://www.sitemaps.org/protocol.html documentation for a list of values allowed here. AspDotNetStorefront support does not have information on allowed values.', N'weekly', N'string', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMapFeed.TopicPriority', N'Priority tag used to build the Site Map feed topic URL nodes. Consult http://www.sitemaps.org/protocol.html documentation for allowed values. AspDotNetStorefront support does not have information on allowed values.', N'0.5', N'string', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Reorder.Enabled', N'If enabled, shoppers see a grid of previous orders on the account page, each with a link to place the same order again.', N'true', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Reorder.ClearCartBeforeAddingReorderItems', N'If TRUE, the shopping cart is cleared when the shopper clicks the reorder button on a prior order. If FALSE, the prior order contents will simply be added to the current cart. ', N'true', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Watermark.Enabled', N'If TRUE, watermarks appear on product images.', N'false', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Watermark.CopyrightText', N'Watermark text displayed on product images (all sizes). For example, Copyright YourStore.com.', N'', N'string', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Watermark.CopyrightImage.Icon', N'If you want to watermark your icon product images with an embedded image watermark, enter the relative image URL path here, e.g. /images/mywatermark.jpg', N'', N'string', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Watermark.CopyrightImage.Medium', N'If you want to watermark your medium product images with an embedded image watermark, enter the relative image URL path here, e.g. /images/mywatermark.jpg', N'', N'string', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Watermark.CopyrightImage.Large', N'If you want to watermark your large product images with an embedded image watermark, enter the relative image URL path here, e.g. /images/mywatermark.jpg', N'', N'string', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Watermark.OffsetFromBottomPercentage', N'Watermark text placement expressed as percentage from the bottom of product images. ', N'10', N'integer', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Watermark.Opacity', N'Opacity of watermark image, range is 0.0 = invisible watermark, 1.0 = fully visible watermark.', N'0.2', N'decimal', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMap.ShowProducts', N'If TRUE, product links are included in the sitemap.', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMap.ShowManufacturers', N'If TRUE, manufacturers are included in the sitemap.', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMap.ShowCategories', N'If TRUE, categories are included in the sitemap.', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMap.ShowSections', N'If TRUE, sections are included in the sitemap.', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMap.ShowTopics', N'If TRUE, topics are included in the sitemap.', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteMap.ShowCustomerService', N'If TRUE, customer service items are included in the sitemap. ', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AllowRecurringIntervalEditing', N'If TRUE, admin users may edit the next ship date applicable for recurring orders.', N'true', N'boolean', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ReplaceImageURLFromAssetMgr', N'If True, the store topic.cs class will replace ../images with images during HTML content retrieval (topics, descriptions, etc) from the database. This is to allow images you inserted via the built-in HTML editor with Asset Manager to resolve properly on the store site.', N'true', N'boolean', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowPicsInCart', N'If TRUE, product image icons display in the shopping cart.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowUpsellProductsOnCartPage', N'If TRUE, upsell products, for those products already in the cart, are shown beneath their current cart products as a suggestive sell feature.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UpsellProductsLimitNumberOnCart', N'If ShowUpsellProductsOnCartPage is TRUE, this sets the maximum number of products shown.', N'10', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UseParserOnEntityDescriptions', N'If TRUE, the parser will be invoked on product (or other object) descriptions. Do not set TRUE unless necessary, as doing so often adds significant processing overhead. ', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ContinueShoppingURL', N'This can be set to the relative path of a page on your site (i.e. c-1-myproducts.aspx, category/1/myproducts, etc). Customers who click Continue Shopping on the shopping cart page will be redirected to the page defined by this setting instead of back to the page from which they came.', N'', N'string', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteDisclaimerRequired', N'If TRUE, visitors must read and acknoweldge a site disclaimer topic before entering the main pages on the site. See the SiteDisclaimer topic for more information.', N'false', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteDisclaimerNotAgreedURL', N'If the visitor does not accept the site disclaimer, this is the URL to which the visitor is sent. This must be a FULLY qualified URL target, e.g. http://samplesitename.com/pagename', N'http://www.disneyland.com', N'string', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SiteDisclaimerAgreedPage', N'If the visitor accepts the site disclaimer, this is the name of the PAGE relative to your store where they are sent.', N'', N'string', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxMenuSize', N'The maximum number of items you want to allow in a top menu (e.g. manufacturers). If a menu is longer than this, it will display a "more" link. 0 will disable the limit altogether.', N'8', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SkipShippingOnCheckout', N'Set TRUE to bypass shipping pages during checkout (e.g. if your store does not at all need to consider shipping.)', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowQuantityDiscountTablesInline', N'Set TRUE to show quantity discount table as pop-up link on product pages. Set FALSE to show table inline, above the product description. ', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ForceSignoutOnOrderCompletion', N'If TRUE, shoppers are forcibly logged off upon order creation.', N'false', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'WholesaleOnlySite', N'Set TRUE to hide, for all customers in customer level (0), all prices on the entire site, and make it impossible to add products to cart. This can be useful for wholesale sites. ', N'false', N'boolean', NULL, N'DISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GoNonSecureAgain', N'If FALSE, the cart stays secure on ALL pages following any page which goes secure (account, cart, etc). If true, the cart will attempt to go non-secure again on other pages, after it has gone secure. FALSE is the recommended value.', N'false', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SkipPaymentEntryOnZeroDollarCheckout', N'Applies only to zero-dollar (0.00) orders. If set TRUE, all payment collection and related entry pages are bypassed during checkout. A zero-dollar order is created. If FALSE, payment collection and related pages appear even though no money is due.', N'true', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'HideKitQuantity', N'Set TRUE to hide the (N) quantity on kit items for kit products. ', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'HideKitPrice', N'Set TRUE to hide the base kit price on product pages.', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'reCAPTCHA.RequiredOnStoreLogin', N'If TRUE, reCAPTCHA appear on the login page.', N'false', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'reCAPTCHA.RequiredOnCreateAccount', N'If TRUE, reCAPTCHA appears on the create account page.', N'false', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'HideProductsWithLessThanThisInventoryLevel', N'Hides from all pages products whose inventory falls *below* the value you set here. For example, to hide all products with inventory of 5, set this value to 6. Set this value to -1 to show all products regardless of inventory level.', N'-1', N'integer', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FilterOutShippingMethodsThatHave0Cost', N'Set TRUE to filter out shipping methods which result in $0 costs to the customer; set FALSE to display all shipping methods regardless of customer cost. This setting should almost always be FALSE.', N'false', N'boolean', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AutoSelectFirstSizeColorOption', N'Set TRUE to auto-select the first size and/or color listed within add-to-cart pages (not recommended.) Set False to require shoppers to choose size and color items from the list (recommended).', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.DumpTransform', N'If TRUE, XmlPackages write debugging output .xml files in the /images directory', N'false', N'boolean', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.DefaultDistributorNotification', N'The name of the XmlPackage used to generate new-order e-mails sent to distributors.', N'notification.distributor.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.LostPassword', N'The name of the XmlPackage used to generate lost password messages sent to customers.', N'notification.lostpassword.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.OrderReceipt', N'The name of the XmlPackage used to generate order receipts sent to customers.', N'notification.receipt.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.OrderShipped', N'The name of the XmlPackage used to create the "your order has shipped" e-mail notifications sent to customers.', N'notification.shipped.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.NewOrderAdminNotification', N'The name of the XmlPackage used to generate new-order notification e-mails sent to the store administrator.', N'notification.adminneworder.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.NewOrderAdminSMSNotification', N'The name of the XmlPackage used to generate SMS messages sent to the store administrator when new orders are generated.', N'notification.smsneworder.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.OrderConfirmationPage', N'The name of the XmlPackage used on the order confirmation page upon successful order.', N'page.orderconfirmation.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RelatedProductsGridColWidth', N'Number of columns in related products grid-layout, if grid-layout is used. ', N'4', N'integer', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UpsellProductsGridColWidth', N'Number of columns in upsell products grid-layout. ', N'4', N'integer', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GiftCard.PhysicalProductTypeIDs', N'A comma-delimited list of the ProductTypeIDs which identify a Physical Gift Card. Physical gift card serial numbers are assigned when they are shipped to a customer.', N'100', N'string', NULL, N'GIFTCARD', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GiftCard.EmailProductTypeIDs', N'A comma-delimited list of the ProductTypeIDs which identify an e-mail gift card. E-mail gift card serial numbers are assigned automatically and e-mailed to the recipient.', N'101', N'string', NULL, N'GIFTCARD', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GiftCard.CertificateProductTypeIDs', N'A comma-delimited list of the ProductTypeIDs which identify a certificate gift card. Certificate gift cards are printed by the customer so they may be given by the customer to the recipient. Certificate gift card serial numbers are assigned automatically.', N'102', N'string', NULL, N'GIFTCARD', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RequireOver13Checked', N'If TRUE, shoppers creating accounts must check a box to indicate they are over 13 years old. This may be required to comply with Federal regulations.', N'true', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Localization.CurrencyFeedUrl', N'The fully-qualified URL you use to retrieve currency exchange rate data. Refer also to the Localization.CurrencyFeedXmlPackage setting.', N'http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml', N'string', NULL, N'LOCALIZATION', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Localization.CurrencyFeedXmlPackage', N'The XmlPackage used to provide the currency exchange rate data conversion. This package usually must work in conjunction with the currency exchange rate data provider to convert their rate data into our predefined XML format. Refer also to the Localization.CurrencyFeedUrl setting.', N'feed.exchangerates-eur.central.bank.xml.config', N'string', NULL, N'LOCALIZATION', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Localization.CurrencyFeedBaseRateCurrencyCode', N'You MUST set this value to match the BASE currency code that your currency feed is returning exchange rates relative to, e.g. USD, EUR, etc.', N'EUR', N'string', NULL, N'LOCALIZATION', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Localization.CurrencyCacheMinutes', N'The time, in minutes, which a currency rate table is cached. The site will call the live currencyserver specified in Localization.CurrencyFeedUrl setting each time this cache period expires.', N'60', N'integer', NULL, N'LOCALIZATION', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'QBMERCHANTSERVICES_ApplicationLogin', N'The application login you obtained from QuickBooks. Refer to Help for instructions.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'QBMERCHANTSERVICES_ApplicationID', N'The Application ID you obtained from QuickBooks. Refer to Help for instructions.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'QBMERCHANTSERVICES_ApplicationVersion', N'Do not change this value. Required by AspDotNetStorefront.', N'1.0', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'QBMERCHANTSERVICES_InstallID', N'', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'QBMERCHANTSERVICES_ConnectionTicket', N'Your connection ticket assigned by QuickBooks. See QuickBooks Merchant Services and the AspDotNetStorefront manual for instructions on how to obtain your connection ticket.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'QBMERCHANTSERVICES_Language', N'Your connection ticket assigned by QuickBooks. See Quick Books Merchant Services for instructions on how to obtain your connection ticket.', N'English', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_CategoryPageSize', N'The initial page size applied to new categories. Category page sizes may be modified within the Admin Console at any time.', N'20', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_ProductColWidth', N'The initial column width applied to new products. Product column widths may be modified within the Admin Console at any time.', N'4', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DisallowShippingToPOBoxes', N'If TRUE, AspDotNetStorefront attempts to prevent shoppers from entering PO Box numbers in shipping addresses. Not 100% reliable.', N'false', N'boolean', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.EmailGiftCardNotification', N'The name of the XmlPackage used to create the body of the e-mail sent when a shopper purchases an e-mail gift card.', N'notification.emailgiftcard.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Skipjack.LiveServer', N'Your SkipJack live production transaction server post URL.', N'https://www.skipjackic.com/scripts/evolvcc.dll?AuthorizeAPI', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Skipjack.TestServer', N'Your SkipJack test transaction server post URL.', N'https://developer.skipjackic.com/scripts/evolvcc.dll?AuthorizeAPI', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Skipjack.LiveSerialNumber', N'Your SkipJack assigned live account html serial number. You get this from SkipJack', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Skipjack.DeveloperSerialNumber', N'Your SkipJack assigned developer serial number. You get this from SkipJack', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Skipjack.LiveChangeURL', N'Your SkipJack live production change transaction server post URL.', N'https://www.skipjackic.com/scripts/evolvcc.dll?SJAPI_TransactionChangeStatusRequest', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Skipjack.TestChangeURL', N'Your SkipJack test change transaction server post URL.', N'https://developer.skipjackic.com/scripts/evolvcc.dll?SJAPI_TransactionChangeStatusRequest', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Skipjack.TestSerialNumber', N'Your SkipJack assigned test account html serial number. You get this from SkipJack', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Skipjack.ForceSettlement', N'Used for SkipJack transaction changes for SETTLE and CREDIT to include a ForceSettlement option. Typically this is False.', N'False', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxMind.Enabled', N'If Yes, the MaxMind fraud prevention score will be checked before a credit card is sent to the gateway. If the returned FraudScore exceeds AppLogic.MaxMind.FailScoreThreshold, the order will be failed. See MaxMind.com for more documentation. This feature uses MaxMind''s minFraud service version 1.3', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxMind.LicenseKey', N'Your MaxMind license key. Issued by MaxMind. Consult MaxMind.com for documentation', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxMind.FailScoreThreshold', N'Threshold over which to fail orders. 0.10 is lowest risk. 100.0 is highest risk. By default, this setting (of 100.0) will NOT FAIL any order. You will have to set this threshold to your own liking for your own business. Every store will probably use different thresholds due to the nature of their business. Consult MaxMind.com for documentation.', N'100', N'decimal', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxMind.DelayDownloadThreshold', N'Threshold over which to force delayed downloads on orders. 0.10 is lowest risk. 100.0 is highest risk. See also the MaxMind.ScoreThreshold setting.', N'100', N'decimal', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxMind.DelayDropShipThreshold', N'Threshold over which to force delayed dropship notifications on orders, regardless of the DelayedDropShipNotifications setting. 0.0 is lowest risk; 100.0 is highest risk. See also the MaxMind.ScoreThreshold setting.', N'100', N'decimal', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxMind.SOAPURL', N'SOAP MaxMind Web Service URL. Consult MaxMind.com for documentation', N'http://minfraud.maxmind.com/app/minfraud_soap', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SendWelcomeEmail', N'If TRUE, customers receive a welcome e-mail.  The content of the e-mail message is controlled by the XmlPackage specified in the XmlPackage.WelcomeEmail setting.  The e-mail subject is specfied in the StringResource named createaccount.aspx.79.', N'false', N'boolean', NULL, N'EMAIL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.WelcomeEmail', N'Used for the contents of the welcome email that newly registered customers receive.', N'notification.newmemberwelcome.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.RefundEmail', N'Used for the contents of the email sent to customers when their order has been refunded.', N'notification.orderrefund.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.OrderCanceledEmail', N'Used for the contents of the email sent to customers when their order has been voided.', N'notification.ordercanceled.xml.config', N'string', NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GatewayRetries', N'The number of retries to try to call the payment gateway, if it is not responding, times out, or has other connection error. Currently, we only do retries with authorize.net gateway. This value probably should never exceed 3. It should also rarely be needed. Most modern gateways are redundant and very reliable.', N'2', N'integer', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UseStrongPwd', N'Set TRUE to require customers to use strong passwords. When TRUE, the regular expression stored in the StrongPasswordValidator setting is used for validation.', N'false', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'StrongPasswordValidator', N'A Regular Expression that is used to validate passwords.  This enforces stronger passwords than PasswordValidator does. Test your expression thoroughly before changing this.', N'^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%\^&\*\(\)_\+\=\-\[\]\{\}\.,<>\?\/\\|~`:;"'']).*$', N'string', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowCardStartDateFields', N'If TRUE, credit card forms will show the Card Start Date, and Card Issue Number fields. Used for UK/EU storefronts.', N'false', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ValidateCreditCardNumbers', N'Enables on-page credit card number validation. ', N'true', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxBadLogins', N'The number of failed logins before the customer account is locked out', N'3', N'integer', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'BadLoginLockTimeOut', N'Number of minutes which an account will be locked out after the MaxBadLogins threshold has been exceeded.  Set to zero to disable lockout behavior.', N'30', N'integer', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AdminPwdChangeDays', N'The number of days between password resets for admin and superadmin users.', N'30', N'integer', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'TurnOffHtmlEditorInAdminSite', N'Set TRUE to disable the built-in HTML editor within admin and instead show all HTML enabled fields as simple text areas. Set FALSE to enable the built-in HTML editor.', N'false', N'boolean', NULL, N'GENERAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DistributorEMailCC', N'If you want a copy of distributor notification e-mails sent to another e-mail address (e.g. your e-mail address), enter that e-mail address here', N'', N'string', NULL, N'GENERAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AddressCCSaltField', N'The salt field to use for encrypting the credit card field in the Address table. Allowable values are AddressID or CustomerID. This setting is meaningful only if the StoreCCInDB setting is set TRUE. ', N'AddressID', N'string', NULL, N'ENCRYPTION', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'OrdersCCSaltField', N'The salt field to use for encrypting the credit cad field in the Orders table. Allowable values are OrderNumber, OrderGUID, CustomerID, CustomerGUID or Email. This setting is meaningul only if the StoreCCInDB setting is set TRUE. ', N'EMail', N'string', NULL, N'ENCRYPTION', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Web.Config.EncryptionProvider', N'The encryption provider used to encrypt the web.config file. The allowed values are DataProtectionConfigurationProvider and RsaProtectedConfigurationProvider. Use RsaProtectedConfigurationProvider if you are running on a web farm. You will need to create an RSA key container before implementing the RSA encryption provider.', N'DataProtectionConfigurationProvider', N'string', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AdminAlert.Message', N'If you have to present a message to all site visitors, enter it here. You must also then have an invocation of the skin.adminalert.xml.config XmlPackage in your skin file somewhere, or the message will not be displayed. The message is only displayed if not empty (blank).', N'', N'string', NULL, N'GENERAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VAT.Enabled', N'Set TRUE to enable the store to enable certain VAT-related functionality. ', N'false', N'boolean', NULL, N'TAX', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VAT.DefaultSetting', N'Sets the default behavior of the storefront for EU customers who need to show prices either VAT-inclusive or VAT-exclusive. Allowed values are 1 (VAT inclusive) or 2 (VAT exclusive).', N'1', N'integer', NULL, N'TAX', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VAT.AllowCustomerToChooseSetting', N'For EU VAT customers, this setting controls whether or not shoppers can on the site choose to view the site in VAT inclusive or VAT exclusive mode for all prices. If FALSE, shoppers will not be able to choose their preference, and the store will force your VAT.DefaultSetting value to be used.', N'true', N'boolean', NULL, N'TAX', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VAT.CountryID', N'This must be set to the CountryID. View the country IDs in your administrative site under Configuration, Manage Country Codes. This is used to set the default country for VAT calculations.', N'0', N'integer', NULL, N'TAX', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VAT.RoundPerItem', N'Turns on rounding of the VAT included price before multiplying by the quantity ordered', N'false', N'boolean', NULL, N'TAX', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTaxClassID', N'This must match the tax class id of your shipping class, this is sometimes necessary to set tax rates for shipping by country, state, or zip.', N'3', N'integer', NULL, N'TAX', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'IPAddress.MaxFailedTransactions', N'If an IP Address has had more than this number of failed transactions, it will be added to the restricted IP Address list (table) and orders from that IP address will not be allowed. They will not even be sent to the gateway. An "Order Declined, Please Contact Us" message will just be sent back to the user on the site.', N'5', N'integer', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'InitializationVector', N'Internal use. Must be exactly 16 characters in length.', N'834!#$5dle40m34A', N'string', NULL, N'ENCRYPTION', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'EncryptIterations', N'Number of encryption iterations. Enter a number from 1 to 4. 1 is less secure, but faster, 4 is more secure, but slower.', N'2', N'integer', NULL, N'ENCRYPTION', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'KeySize', N'Encryption key size. Must be 128, 192, or 256. Lower values are faster, and less secure. Higher values slower are more secure.', N'256', N'integer', NULL, N'ENCRYPTION', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'HashAlgorithm', N'Type of encryption hash algorithm used. Must be either MD5 or SHA1 (SHA1 is recommended).', N'SHA1', N'string', NULL, N'ENCRYPTION', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'NextKeyChange', N'Internal use. Do not modify. ', DATEADD(day, 90, GETDATE()), N'string', NULL, N'ENCRYPTION', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CYBERSOURCE.merchantID', N'Your CyberSource-assigned merchant ID (often the same as your Vendor ID). Contact CyberSource for more information.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CYBERSOURCE.keysDirectory', N'Should be full physical file path with ending backslash. Consult CyberSource documentation. ', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CYBERSOURCE.keyFilename', N'Full file name 1111111.p12 for example. Consult CyberSource documentation. ', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CYBERSOURCE.LiveURL', N'CyberSource Live URL. Do not modify without CyberSource support. ', N'https://ics2ws.ic3.com/commerce/1.x/transactionProcessor', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CYBERSOURCE.PITURL', N'CyberSource. Do not modify without CyberSource support. ', N'https://ics2wstest.ic3.com/commerce/1.x/transactionProcessor/', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CYBERSOURCE.paCountryCode', N'Usually this is blank because Cybersource will have the country code configured on your account. If Cybersource requests that you send a Country Code for Payer Authorization processing, enter the country code here.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CYBERSOURCE.paMerchantName', N'Usually this is blank because Cybersource will have the merchant name configured on your account. If Cybersource requests you to send a Merchant Name for Payer Authorization processing, enter that value here.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CYBERSOURCE.paMerchantURL', N'Usually this is blank because Cybersource will have the merchant URL configured on your account. If Cybersource requests you to send a Merchant URL for Payer Authorization processing, enter that value here.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CYBERSOURCE.UsePIT', N'For VBV PIT Testing. This will force the PITURL to be used for requests instead of the TestURL or LiveURL. This should always be false in production environments.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CYBERSOURCE.TestURL', N'Cybersource gateway test server', N'https://ics2wstest.ic3.com/commerce/1.x/transactionProcessor', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.store_id', N'ESelectPlus Store ID', N'', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.api_token', N'ESelectPlus API Token', N'', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.host', N'ESelectPlus Host', N'esplusqa.moneris.com', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.commcard_invoice', N'ESelectPlus CommCard Invoice', N'', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.commcard_tax_OrderTotal', N'ESelectPlus Tax Order Total', N'', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FedexShipManager.Enabled', N'If you are going to use FedEx shipping manager to process shipments, set this value to TRUE. NOTE: This setting is not for real-time rates, rather only for processing shipments via FedEx shipping manager.', N'false', N'boolean', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'NewPwdAllowedChars', N'Used when created new passwords via the request new password function on the sign-in page', N'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ23456789~!@#$%&*', N'string', NULL, N'SECURITY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'TemplateSwitching.Enabled', N'If you want to enable template file switching by entity, set this flag to true. You can then assign a custom layout file to entities (category, section, etc).', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'TurnOffStoreAdminEMailNotifications', N'If TRUE, "new order notification" e-mails are sent to administrators. If FALSE, store administrators receive a "new order notification" e-mail from the storefront. This setting does not influence receipt e-mails sent to customers.', N'false', N'boolean', NULL, N'EMAIL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VerifyAddressesProvider', N'Leave blank if you do not want AspDotNetStorefront to verify addresses. Otherwise set to "USPS" and ensure the VerifyAddressesProvider.USPS server and userid are properly set. USPS Address Verification should only be used with USPS shipments.', N'', N'string', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VerifyAddressesProvider.USPS.Server', N'USPS server URL for the Verify Address API', N'http://production.shippingapis.com/shippingapi.dll', N'string', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VerifyAddressesProvider.USPS.UserID', N'USPS userid for the Verify Address API. USPS Address Verification should only be used with USPS shipments.', N'', N'string', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowFullNewsArticle', N'If true the entire news article text will be displayed on the news list page, if false then only a link to the article is displayed and the user has to click the link to view the entire article', N'false', N'boolean', NULL, N'GENERAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'NewsTeaser', N'Text displayed at the top of the news page.', N'', N'string', NULL, N'GENERAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'BulkImportSendsShipmentNotifications', N'If TRUE, when bulk-importing shipments that are not voided, shipped notification e-mails are sent to customers of orders whose shipments were imported.', N'true', N'boolean', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultCustomerLevelID', N'The default customer level (integer) to be used on new customer records. Typically 0. ', N'0', N'integer', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'BreadcrumbSeparator', N'Separator character(s) used when building up breadcrumbs on entity and product pages.', N'&rarr;', N'string', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.Test.SourceKey', N'The test USA ePay source key', N'dgb8otyulg26vm2hYiF8b2q6P7091681', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.Test.Pin', N'The test USA ePay pin', N'ABA123', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.Live.SourceKey', N'Your live USA ePay source key, assigned to you by USA ePay', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.Live.Pin', N'Your live USA ePay pin, assigned to you by USA ePay', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.Description', N'Text value passed to USAePay to describe every transaction.', N'AspDotNetStorefront Order', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.Declined', N'Message to be used if the card is declined by the gateway', N'The Transaction Was Declined', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.TransactionError', N'Message to be used if there is an unknown transaction error from the USA ePay gateway', N'Unknown Error on USAePay Gateway', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.ConnectionError', N'Message to be used if we cannot get a connection to the USA ePay gateway', N'Could not connect to USAePay Gateway', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.UseSandBox', N'Allows customers to test against their USAepay sandbox environment.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUK.Vendor', N'Your Vendor name supplied by Sage Pay.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUKURL.Live.Abort', N'SagePay - do not modify.', N'https://live.sagepay.com/gateway/service/abort.vsp', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUKURL.Live.Callback', N'SagePay - do not modify.', N'https://live.sagepay.com/gateway/service/direct3dcallback.vsp', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUKURL.Live.Purchase', N'SagePay - do not modify.', N'https://live.sagepay.com/gateway/service/vspdirect-register.vsp', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUKURL.Live.Refund', N'SagePay - do not modify.', N'https://live.sagepay.com/gateway/service/refund.vsp', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUKURL.Live.Release', N'SagePay - do not modify.', N'https://live.sagepay.com/gateway/service/release.vsp', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUKURL.Test.Abort', N'SagePay - do not modify.', N'https://test.sagepay.com/gateway/service/abort.vsp', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUKURL.Test.Callback', N'SagePay - do not modify.', N'https://test.sagepay.com/gateway/service/direct3dcallback.vsp', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUKURL.Test.Purchase', N'SagePay - do not modify.', N'https://test.sagepay.com/gateway/service/vspdirect-register.vsp', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUKURL.Test.Refund', N'SagePay - do not modify.', N'https://test.sagepay.com/gateway/service/refund.vsp', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayUKURL.Test.Release', N'SagePay - do not modify.', N'https://test.sagepay.com/gateway/service/release.vsp', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Recurring.AUTHORIZENET_AUTOBILL_TEST_SERVER', N'Do not change this value unless instructed by Authorize.net.', N'https://apitest.authorize.net/xml/v1/request.api', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Recurring.AUTHORIZENET_AUTOBILL_LIVE_SERVER', N'Do not change this value unless instructed by Authorize.net.', N'https://api2.authorize.net/xml/v1/request.api', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ZipCodePrefixLength', N'Sets the length used to match zip code prefixes when matching shipping zones.', N'3', N'integer', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingCarriers', N'Comma delimited list of carriers which have tracking numbers that can be matched. These values must match up with corresponding ShippingTrackingURL and ShippingTrackingRegEx setting variables.', N'UPS,USPS,FedEx,DHL,AusPost,ParcelForce', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingRegEx.AusPost', N'Australia Post Tracking Number Match Regular Expression', N'^[0-9A-Z]{8}$', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingURL.AusPost', N'Australia Post URL for generating package tracking link. You must include the {0} placeholder at the location in the link that the tracking number should be inserted.', N'http://platinum.auspost.com.au/scripts/cgiip.exe/WService=wtsaae/ap_inquiryresults.w?inquirynumber={0}', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingRegEx.DHL', N'DHL Tracking Number Match Regular Expression', N'^\d{10,11}$', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingURL.DHL', N'DHL URL for generating package tracking link. You must include the {0} placeholder at the location in the link that the tracking number should be inserted.', N'http://track.dhl-usa.com/atrknav.asp?ShipmentNumber={0}', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingRegEx.FedEx', N'FedEx Tracking Number Match Regular Expression', N'^\d{12,19}$', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingURL.FedEx', N'FedEx URL for generating package tracking link. You must include the {0} placeholder at the location in the link that the tracking number should be inserted.', N'http://www.fedex.com/Tracking?tracknumbers={0}', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingRegEx.UPS', N'UPS Tracking Number Match Regular Expression', N'^(1Z)', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingURL.UPS', N'UPS URL for generating package tracking link. You must include the {0} placeholder at the location in the link that the tracking number should be inserted.', N'http://wwwapps.ups.com/WebTracking/processInputRequest?sort_by=status&tracknums_displayed=1&TypeOfInquiryNumber=T&loc=en_US&InquiryNumber1={0}&track.x=0&track.y=0', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingRegEx.USPS', N'USPS Tracking Number Match Regular Expression', N'^\d{22}|[0-9A-Z]{11}US$', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShippingTrackingURL.USPS', N'USPS URL for generating package tracking link. You must include the {0} placeholder at the location in the link that the tracking number should be inserted.', N'https://tools.usps.com/go/TrackConfirmAction_input?origTrackNum={0}', N'string', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayFlowPro.PARTNER', N'If using PayPal PayFlow PRO merchant gateway, this is the partner value assigned by the bank.', N'PayPal', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayFlowPro.Product', N'If using PayPal PayFlow PRO merchant gateway, this is the specific product that uses the PayFlowPro gateway.', N'', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayFlowPro.PWD', N'If using PayPal PayFlow PRO merchant gateway, this is the password value assigned by the bank.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayFlowPro.USER', N'If using PayPal PayFlow PRO merchant gateway, this is the username value assigned by the bank.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayFlowPro.VENDOR', N'If using PayPal PayFlow PRO merchant gateway, this is the vendor value assigned by the bank.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayFlowPro.LiveURL', N'PayPal PayFlow Pro Live URL. Do not change this without PayPal support.', N'https://payflowpro.paypal.com', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayFlowPro.TestURL', N'PayPal PayFlow Pro Test URL. Do not change this without PayPal support.', N'https://pilot-payflowpro.paypal.com', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UseImageResize', N'Determines whether image resizing will be used.  This can be overridden in any of the size settings through use of the attribute resize (i.e resize:false;).', N'true', N'boolean', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'LargeCreatesOthers', N'Determines whether an uploaded large image will create the icon and medium images.  This value can be over written in each of the size-related settings through use of the attribute largecreates (i.e. largecreates:false;).', N'true', N'boolean', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'LargeOverwritesOthers', N'Determines whether an uploaded large image will create AND overwrite existing icon and medium images.  This value can be over written in each of the size-related settings through use of the attribute largeoverwrites (i.e. largeoverwrites:false;).', N'true', N'boolean', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultCrop', N'TRUE or FALSE.  You can leave the crop attribute out of all size-related settings and cropping will be determined according to this value.  If you use the crop attribute in the other settings (i.e. crop:false;) it will take precedence over this value.  This value should NOT be left blank.', N'true', N'boolean', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultCropVertical', N'top, bottom, or middle.  The vertical anchor point when cropping will default to this unless otherwise specified in the size-configs (i.e cropv:top).', N'middle', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultCropHorizontal', N'left, right, or center.  The horizontal anchor point when cropping will default to this unless otherwise specified in the size-related settings (i.e croph:left).', N'center', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultFillColor', N'Default fill color to be used if fill attribute is left out of the other fill-related settings (i.e fill:#00FF00).', N'#FFFFFF', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultQuality', N'Default quality if quality attribute is not used in other image-related settings (i.e. quality:75).', N'100', N'integer', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultStretch', N'Default stretch value if stretch attribute is not specified in other size-size-related settings (i.e. stretch:false).  Stretch is the value that determines whether a smaller, uploaded image will stretch to fill a larger, resized destination image.', N'true', N'boolean', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MultiMakesMicros', N'If TRUE, AspDotNetStorefront creates micro images resized by the width and height specified in DefaultWidth_micro and DefaultHeight_micro and will save them in the images/product/micro folder whenever you are uploading multiple images in the medium multi-image manager.  If a product has multi-images and UseImagesForMultiNav is true then images will be shown instead of the number icons.', N'true', N'boolean', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UseImagesForMultiNav', N'If TRUE, micro images will be used instead of the number icons when multiple images exist in the multi-image manager.', N'false', N'boolean', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UseRolloverForMultiNav', N'If TRUE and UseImagesForMultiNav is TRUE, the medium image will change on mouse roll-over the micro images instead of when the shopper clicks on them.', N'false', N'boolean', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MultiImage.UseProductIconPics', N'Product pages enable shoppers to switch among product views on your site. If this setting is TRUE, shoppers choose among icon images. If FALSE, shoppers choose from a numbered list.', N'false', N'boolean', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Recurring.GatewayImportOffsetHours', N'Hours to offset the reporting date from midnight. If you want the report to run through 6:00 AM then set this value to 6. Pertains to gateway / recurring orders feature.', N'0', N'integer', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Recurring.GatewayLastImportedDate', N'Time stamp for last Gateway Import. This value is automatically updated.', N'', N'string', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FreeShippingAllowsRateSelection', N'Set to true to allow customers to select a shipping method other than the free method if they want to pay for faster delivery or a different shipping method when the order does not consist of all download items.  Leave false to force the free shipping method...the customer will not be able to choose a different method.', N'false', N'boolean', NULL, N'SHIPPING', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'TaxCalcMode', N'Determines if tax calculation is based on shipping address or billing address.  Allowed values are "shipping" and "billing"', N'shipping', N'string', NULL, N'TAX', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.country', N'eSelectPlus API country code. Either US or CA', N'US', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.URL.CA.Live', N'eSelectPlus XML API URL for Live mode CA', N'https://www3.moneris.com/gateway2/servlet/MpgRequest', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.URL.CA.LiveMPI', N'eSelectPlus MPI API URL for Live mode CA', N'https://www3.moneris.com/mpi/servlet/MpiServlet', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.URL.CA.Test', N'eSelectPlus XML API URL for Test mode CA', N'https://esqa.moneris.com/gateway2/servlet/MpgRequest', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.URL.CA.TestMPI', N'eSelectPlus MPI API URL for Test mode CA', N'https://esqa.moneris.com/mpi/servlet/MpiServlet', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.URL.US.Live', N'eSelectPlus XML API URL for Live mode US', N'https://esplus.moneris.com/gateway_us/servlet/MpgRequest', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.URL.US.LiveMPI', N'eSelectPlus MPI API URL for Live mode US', N'https://esplus.moneris.com/mpi/servlet/MpiServlet', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.URL.US.Test', N'eSelectPlus XML API URL for Test mode US', N'https://esplusqa.moneris.com/gateway_us/servlet/MpgRequest', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.URL.US.TestMPI', N'eSelectPlus MPI API URL for Test mode US', N'https://esplusqa.moneris.com/mpi/servlet/MpiServlet', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.api_token.Test', N'eSelectPlus API Token for Test mode', N'qatoken', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.store_id.Test', N'eSelectPlus Store ID for Test mode', N'monusqa002', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.api_token.Live', N'eSelectPlus API Token for Live mode', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.store_id.Live', N'eSelectPlus Store ID for Live mode', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.crypt', N'eSelectPlus Default Crypt Value', N'7', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eSelectPlus.includeAVS', N'eSelectPlus control of sending AVS data to gateway. True sends AVS, False does not send AVS.', N'true', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowEditButtonInCartForKitProducts', N'If TRUE, an edit button appears in the shopping cart next to kit products, allowing customers to edit/change such items in the cart.', N'true', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowEditButtonInCartForRegularProducts', N'If TRUE, an edit button appears in the shopping cart next to regular (non kit or pack) products, enabling shoppers to edit/change such items in the cart. ', N'false', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CardinalCommerce.Centinel.TransactionPwd', N'Your Cardinal Centinel Assigned Transaction Password.', N'', N'string', NULL, N'CARDINAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Google.AnalyticsAccount', N'The Google tracking account to be used with the Google analytics tracking javascript code (ga.js).  This does not apply to the urchin tracking javascript code (urchin.js).', N'', N'string', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Google.EcomOrderTrackingEnabled', N'Set TRUE to enable the Google e-commerce tracking code upon order confirmation. If disabled (FALSE) Google Analytics will still function, but order details will not be sent to Google.', N'false', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AuditLog.Enabled', N'Set TRUE to enable logging certain actions related to recurring orders. (If enabled, you can view the log from the customer history page.)', N'false', N'boolean', NULL, N'MISC', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'NumPreviouslyUsedPwds', N'Prevents admin users from reusing any of the specified number of previously-used passwords. PA-DSS requires 4.', N'4', N'integer', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowShippingEstimate', N'If TRUE, the Shipping Estimator appears on the checkout page.', N'true', N'boolean', NULL, N'SHIPPING', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DisallowAnonCustomerToCreateWishlist', N'If TRUE, customers must be logged in to add to the wishlist.', N'false', N'boolean', NULL, N'ADMIN', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'404.ComparisonDistance', N'This value filters the likeness of words. The higher the value, the wider the range of results the 404 page will return.   Suggested value .60 to .70.', N'.60', N'double', NULL, N'404', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'404.VisibleSuggestions', N'Specifies what type(s) of pages to suggest on the 404 page (blank by default).  Allowed values are product, category, manufacturer, section, topic.', N'', N'multiselect', N'product, category, manufacturer, section, topic', N'404', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Show404SuggestionLinks', N'If Show404SuggestionLinks is set to true, link suggestions will display whenever the site returns a 404 for a missing page.', N'true', N'boolean', NULL, N'404', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'404.NumberOfSuggestedLinks', N'The maximum number of suggested links that will appear on the 404 page. ', N'5', N'integer', NULL, N'404', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DisplayOutOfStockProducts', N'If True, "Out-of-Stock" or "In-stock" labels appear depending on product inventory levels. If the inventory is less than the OutOfStockThreshold value, "Out-of-Stock" labels appear; otherwise, "In-stock" labels will appear.', N'False', N'boolean', NULL, N'OUTOFSTOCK', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DisplayOutOfStockOnProductPages', N'If True, "Out-of-Stock" or "In-stock" labels appear on product detail pages. Has no affect if DisplayOutOfStockProducts = False.', N'False', N'boolean', NULL, N'OUTOFSTOCK', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DisplayOutOfStockOnEntityPages', N'If True, "Out-of-Stock" or "In-stock" labels appear on product listing pages (entities) such as category pages. Has no affect if DisplayOutOfStockProducts = False.', N'False', N'boolean', NULL, N'OUTOFSTOCK', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'OutOfStockThreshold', N'The quantity *below* which an item is considered out-of-stock. Has no affect if DisplayOutOfStockProducts is disabled.', N'0', N'integer', NULL, N'OUTOFSTOCK', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayments.MERCHANT_KEY', N'Transaction key provided by SagePayments', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayments.ServiceURLTEST', N'Your SagePayments assigned gateway test mode posting URL', N'https://www.sagepayments.net/web_services/vterm_extensions/transaction_processing.asmx?WSDL', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayments.ServiceURL', N'Your SagePayments assigned gateway URL', N'https://www.sagepayments.net/web_services/vterm_extensions/transaction_processing.asmx?WSDL', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayments.MERCHANT_ID', N'Your Merchant id, assigned by SagePayments.', N'', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DynamicRelatedProducts.Enabled', N'If TRUE, AspDotNetStorefront chooses which products to display, based on shopper orders. Search Help for Related Products for more information.', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.AllowLocalPickup', N'Set TRUE to display a store-pickup option when using real-time shipping rates.', N'false', N'boolean', NULL, N'RTSHIPPING', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.LocalPickupCost', N'If you want to charge a handling fee for local in-store pickups, you can enter the amount here (eg. 10.00).', N'0.00', N'decimal', NULL, N'RTSHIPPING', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.LocalPickupRestrictionType', N'If you want to limit the store-pickup option to only certain addresses or locations you can use this to determine how you are going to limit them. Unrestricted allows anyone to see and select the pickup option, state allows you to specify the states for which the pickup method is valid, zip allows you to specify a zip code or zip codes for which the pickup method is valid, and zone allows you to specify a zone or zones that are set up in the shipping zones section for which the pickup method is valid.', N'unrestricted', N'string', NULL, N'RTSHIPPING', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.LocalPickupRestrictionStates', N'State restrictions for the store-pickup option if the restriction type = State. This should be a comma-separated list of the 2-character state abbreviations found in Configuration, Manage State/Provinces within the admin panel.', N'', N'string', NULL, N'RTSHIPPING', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.LocalPickupRestrictionZips', N'Zip Code restrictions for the store-pickup option if the restriction type is zip.  This should be a comma-separated list of 5-digit zip codes.', N'', N'string', NULL, N'RTSHIPPING', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.LocalPickupRestrictionZones', N'Zone restrictions for the store-pickup option if the restriction type is zone. View a list of zone IDs by choosing Configuration, Shipping Calculation within the admin panel. Click View Shipping Zones near the bottom of the page.', N'', N'string', NULL, N'RTSHIPPING', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'System.LoggingEnabled', N'Determines whether or not errors are logged for troubleshooting later.', N'TRUE', N'boolean', NULL, N'SYSTEM', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'System.LoggingLocation', N'If error logging is enabled, specifies where the log will be stored.  It is recommended to store logs in the database, however troubleshooting my necessitate storing the error log file elsewhere such as the file system (images/errors directory) or the system event log.  Email error logging is not recommended', N'DATABASE', N'multiselect', N'Database,File,EventLog,Email', N'SYSTEM', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'System.MaxLogEntries', N'The maximum number of log entries to store.  If this value is exceeded, the oldest log entry will be deleted to make room for new entries.', N'250', N'integer', NULL, N'SYSTEM', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'System.MaxLogDays', N'The maximum number of days to store log entries.  Entries older than this will be deleted on application start', N'30', N'integer', NULL, N'SYSTEM', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PaymentGateway.PrimaryRetries', N'The number of times to try the primary payment gateway before switching to the backup.  Setting this value too high could cause the site to timeout for the user, or have an inordinate delay if the payment gateway does not respond.  It is recommended to set this value to 1 or 2.', N'2', N'integer', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PaymentGateway.BackupRetries', N'The number of times to try the backup gateway before failing the order.  Setting this value too high could cause the site to timeout for the user, or have an inordinate delay if the payment gateway does not respond.  Recommended setting = 1 or 2.', N'2', N'integer', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PaymentGatewayBackup', N'The payment gateway to use as a backup.  Leave this value blank if you do not have a backup payment gateway', N'', N'invoke', N'AspDotNetStorefrontGateways.GatewayLoader,AspDotNetStorefrontGateways,GetAvailableGatewayNames', N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_SectionPageSize', N'The default page size for a section, when it is first added to the database. After adding, you can edit it the admin panel.', N'20', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_LibraryPageSize', N'The default page size for a library, when it is first added to the database. After adding, you can edit it in the admin panel.', N'20', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_ManufacturerPageSize', N'The default page size for a manufacturer, when it is first added to the database. After adding, you can edit it in the admin panel.', N'20', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_DistributorPageSize', N'The default page size for a distributor, when it is first added to the database. After adding, you can edit it in the admin panel.', N'20', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_ProductPageSize', N'The default page size for a product page, when it is first added to the database. After adding, you can edit it in the admin panel.', N'20', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_CategoryColWidth', N'The default ColWidth for a category, when it is first added to the database. After adding, you can edit it in the admin panel.', N'4', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_SectionColWidth', N'The default ColWidth for a section, when it is first added to the database. After adding, you can edit it in the admin panel.', N'4', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_LibraryColWidth', N'The default ColWidth for a library, when it is first added to the database. After adding, you can edit it in the admin panel.', N'4', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_ManufacturerColWidth', N'The default ColWidth for a manufacturer, when it is first added to the database. After adding, you can edit it in the admin panel.', N'4', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_DistributorColWidth', N'The default ColWidth for a distributor, when it is first added to the database. After adding, you can edit it in the admin panel.', N'4', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_GenrePageSize', N'The default page size for a Genre, when it is first added to the database. After adding, you can edit it in the admin panel.', N'20', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Default_GenreColWidth', N'The default ColWidth for a Genre, when it is first added to the db. After adding, you can edit it in the admin panel.', N'4', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultWidth_icon', N'Default width of an icon image if no width attribute is specified in the other size-related settings (i.e. width:50).  This value should NOT be left blank.', N'150', N'integer', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultHeight_icon', N'Default height of an icon image if no width attribute is specified in the other size-related settings (i.e. height:50;).  This value should NOT be left blank.', N'150', N'integer', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultWidth_medium', N'Default width of a medium image if no width attribute is specified in the other size-related settings (i.e. width:50;).  This value should NOT be left blank.', N'250', N'integer', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultHeight_medium', N'Default height of a medium image if no width attribute is specified in the other size-related settings (i.e. width:50;).  This value should NOT be left blank.', N'250', N'integer', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultWidth_large', N'Default width of a large image if no width attribute is specified in the other size-related settings (i.e. width:50;).  This value should NOT be left blank.', N'500', N'integer', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultHeight_large', N'Default height of a large image if no width attribute is specified in the other size-related settings (i.e. height:50).  This value should NOT be left blank.', N'500', N'integer', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ProductImg_icon', N'Sets the specifications for the product icon image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:150;height:150;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ProductImg_medium', N'Sets the specifications for the product medium image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-configs.', N'width:250;height:250;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ProductImg_large', N'Sets the specifications for the product large image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), croph(left,right, or center), largecreates(true or false), and largeoverwrites(true or false).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:500;height:500;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VariantImg_icon', N'Sets the specifications for the variant icon image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:150;height:150;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VariantImg_medium', N'Sets the specifications for the variant medium image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:250;height:250;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VariantImg_large', N'Sets the specifications for the variant large image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center), largecreates(true or false), and largeoverwrites(true or false).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:500;height:500;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CategoryImg_icon', N'Sets the specifications for the category icon image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:150;height:150;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CategoryImg_medium', N'Sets the specifications for the category medium image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:250;height:250;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CategoryImg_large', N'Sets the specifications for the category large image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), croph(left,right, or center), largecreates(true or false), and largeoverwrites(true or false).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:500;height:500;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ManufacturerImg_icon', N'Sets the specifications for the manufacturer icon image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:150;height:150;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ManufacturerImg_medium', N'Sets the specifications for the manufacturer medium image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:250;height:250;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ManufacturerImg_large', N'Sets the specifications for the manufacturer large image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), croph(left,right, or center), largecreates(true or false), and largeoverwrites(true or false).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:500;height:500;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SectionImg_icon', N'Sets the specifications for the department icon image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:150;height:150;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SectionImg_medium', N'Sets the specifications for the department medium image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:250;height:250;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SectionImg_large', N'Sets the specifications for the department large image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), croph(left,right, or center), largecreates(true or false), and largeoverwrites(true or false).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:500;height:500;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DistributorImg_icon', N'Sets the specifications for the distributor icon image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:150;height:150;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DistributorImg_medium', N'Sets the specifications for the distributor medium image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), and croph(left,right, or center).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:250;height:250;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DistributorImg_large', N'Sets the specifications for the distributor large image.  Valid attributes are width(int), height(int), quality(int), stretch(true or false), fill(color string with #), crop(true or false), cropv(top,bottom, or middle), croph(left,right, or center), largecreates(true or false), and largeoverwrites(true or false).  All attributes are optional and if not specified will use the values from the default-settings.', N'width:500;height:500;', N'string', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Download.ShowRelatedProducts', N'If TRUE, the product downloads page displays related products.', N'true', N'boolean', NULL, N'DOWNLOAD', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Download.ReleaseOnAction', N'Valid settings include MANUAL, CAPTURE, and AUTO. Manual = requires admin users to manually release the download product. CAPTURE = download product is released upon payment capture status. AUTO = releases the download product without any requirements.', N'Manual', N'enum', N'Manual,Capture,Auto', N'DOWNLOAD', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Download.StreamFile', N'If TRUE (recommended), the download file will be streamed and delivered on button click instead of providing a URL to the file location.', N'true', N'boolean', NULL, N'DOWNLOAD', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Download.CopyFileForEachOrder', N'If TRUE (not recommended), the software will create a separate copy of each file that is purchased. This configuration is ignored if you are using files on another server for your downloads.', N'false', N'boolean', NULL, N'DOWNLOAD', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.API.AcceleratedBoardingEmailAddress', N'If you enter your e-mail address here, PayPal will allow you to start taking orders without yet having a PayPal account. You must then create a PayPal account within 30 days in order to retrieve your money from PayPal. After registering you should enter your API credentials into the appropriate settings.', N'', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultWidth_micro', N'Default width of a micro image if no width attribute is specified in the other size-related settings (i.e. width:50).  This value should NOT be left blank.', N'50', NULL, NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultLocale', N'The default locale. If empty this will default to the value in the web.config. Note that changes to this setting do not take full effect until the site is restarted.', NULL, N'string', NULL, N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Paging.ShowAllPageLinks', N'If true all pages will be shown in paging links.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Paging.PagesForward', N'The number of forward pages to show if Paging.ShowAllPageLinks is set to false.', N'3', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Paging.PagesBackward', N'The number of backwards pages to show if Paging.ShowAllPageLinks is set to false.', N'3', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTSHIPPING.FedEx.Key', N'FedEx account key given to you from FedEx.', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTSHIPPING.FedEx.Password', N'FedEx password given to you from FedEx. This is givent to you when you generate you key', N'', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.FedEx.Server', N'Your FedEx Server Assigned by FedEX. The Server URl is CaSE SeNSitIVe!!! Your URL may DIfFeR frOm THis One!', N'https://gateway.fedex.com:443/web-services', N'string', NULL, N'RTSHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'BuySafe.DisableAddToCartKicker', N'If TRUE, the buySafe "kicker" will not be shown on product pages.', N'false', N'boolean', NULL, N'BUYSAFE', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'BuySafe.KickerType', N'The value of the request to BuySafe that defines the type of kicker to show. Alternate types can be found here: http://www.buysafe.com/web/general/kickerpreview.aspx.', N'Kicker Guaranteed Ribbon 200x90', N'string', NULL, N'BUYSAFE', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'QuantityDiscount.PercentDecimalPlaces', N'Number of decimal places to show on percent quantity discounts.', N'0', N'integer', N'', N'DISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'VAT.VATCheckServiceURL', N'The fully-qualified URL endpoint for the VATCheck service.', N'http://ec.europa.eu/taxation_customs/vies/services/checkVatService', N'string', N'', N'TAX', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'reCAPTCHA.RequiredOnContactForm', N'Whether or not the contact us control protects against scripts with reCAPTCHA.', N'true', N'boolean', N'', N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AvalaraTax.Enabled', N'Set TRUE to use Avalara for tax calculations.<br /><a  href="AvalaraConnectionTest.aspx" class="lightboxLink">Click here to test your AvaTax connection</a><br /><a href="https://admin-avatax.avalara.net/" target="_blank">Click here for your AvaTax Admin Console</a>.', N'False', N'boolean', NULL, N'TAX', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AvalaraTax.Account', N'The account Avalara provided to you', N'', N'string', NULL, N'TAX', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AvalaraTax.License', N'The license Avalara provided to you', N'', N'string', NULL, N'TAX', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AvalaraTax.ServiceUrl', N'The service URL Avalara provided to you', N'', N'string', NULL, N'TAX', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AvalaraTax.CompanyCode', N'The company code Avalara provided to you', N'', N'string', NULL, N'TAX', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AvalaraTax.TaxRefunds', N'Set TRUE to charge tax on order refunds', N'False', N'boolean', NULL, N'TAX', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.FedEx.SmartPost.IndiciaWeights', N'The Indicia weight breaks for Smart Post Shipments.  Format: IndiciaWeightRangeLow-IndiciaWeightRangeHigh:IndiciaType', N'0-0.99:PRESORTED_STANDARD,1-69.99:PARCEL_SELECT', N'string', NULL, N'RTSHIPPING', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.FedEx.SmartPost.AncillaryEndorsementType', N'The Ancillary Endorsement Type for Smart Post Shipments.  Optional. 	Valid Values: "ADDRESS CORRECTION", "CARRIER LEAVE IF NO RESPONSE", "CHANGE SERVICE", "FORWARDING SERVICE", "RETURN SERVICE"', N'', N'string', NULL, N'RTSHIPPING', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.FedEx.SmartPost.HubId', N'The HubId for your Smart Post Shipments.  See your FedEx account manager.', N'5531', N'string', NULL, N'RTSHIPPING', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RTShipping.FedEx.SmartPost.Enabled', N'Enables the FedEx Smart Post service.  See your FedEx account manager for more information.', N'false', N'boolean', NULL, N'RTSHIPPING', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Signin.SkinMaster', N'Determines which SkinID is applied after the shopper signs in. Session = SkinID set based on current session. Default = SkinID set to the site''s default SkinID.', N'Default', N'enum', N'Session, Default', N'DISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'QuantityDiscount.CombineQuantityByProduct', N'This setting controls how quantity discounts are calculated at checkout. If TRUE, all line items with the same product ID are factored into the quantity discount calculation, even if they have different variant, size, or color options. If FALSE, quantity discounts are calculated per line item. ', N'false', N'boolean', N'', N'DISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_Cim_LiveServiceURL', N'Authorize.net CIM live Service URL. Do Not Change.', N'https://api2.authorize.net/soap/v1/Service.asmx', N'string', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_Cim_SandboxServiceURL', N'Authorize.net CIM sandbox Service URL. Do Not Change.', N'https://apitest.authorize.net/soap/v1/Service.asmx', N'string', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_Cim_UseSandbox', N'Set to Yes to use Authorize.net CIM in sandbox mode.', N'false', N'boolean', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AUTHORIZENET_Cim_Enabled', N'Set to Yes to enable Authorize.net CIM', N'true', N'boolean', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'NameImagesBySEName', N'If true, product images will be named by the product SEName.  If false, product ID is used.', N'true', N'boolean', N'', N'GENERAL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AvalaraTax.CommitTaxes', N'Set TRUE if AspDotNetStorefront should commit the tax document for orders. Set to FALSE if order taxes are committed in an external system.', N'true', N'boolean', NULL, N'TAX', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AvalaraTax.CommitRefunds', N'Set TRUE if AspDotNetStorefront should commit the tax document for refunds. Set to FALSE if refund taxes are committed in an external system.', N'true', N'boolean', NULL, N'TAX', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SendLowStockWarnings', N'If TRUE, store admins are sent an e-mail when purchases take product inventory levels below the value specified in the SendLowStockWarningsThreshold setting. ', N'false', N'boolean', NULL, N'OUTOFSTOCK', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SendLowStockWarningsThreshold', N'Sets the inventory threshold at which store administrators are notified that a product is running low on stock. Applies only in SendLowStockWarnings is set TRUE.', N'1', N'string', NULL, N'OUTOFSTOCK', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowAdminLowStockAudit', N'If TRUE, a table of products with inventory levels lower than SendLowStockWarningsThreshold is displayed on admin dashboard. NOTE: This may slow down the load time of the admin dashboard on sites with very large product sets.', N'false', N'boolean', NULL, N'OUTOFSTOCK', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Debug.DisplayOrderSummaryDiagnostics', N'If TRUE, displays diagnostic subtotals in the order summary.', N'false', N'boolean', NULL, N'DEBUG', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Promotions.ApplyDiscountsBeforePromoApplied', N'If TRUE, promotions will be applied *after* quantity discounts.', N'true', N'boolean', NULL, N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DefaultHeight_micro', N'Default height of a micro image if no height attribute is specified in the other size-related settings (i.e. height:50). This value should NOT be left blank.', N'50', N'NULL', NULL, N'IMAGERESIZE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Ads.TermsAndConditionsAgreement', N'I agree to the <a href="https://financing.paypal.com/ppfinportal/content/operatingAgmt" target="_blank">terms and conditions</a> for PayPal Banners.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Ads.PublisherId', N'Your PayPal Publisher Id from the PayPal Media Network (PMN)', N'', NULL, NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Ads.ShowOnProductPage', N'Show PayPal Credit  advertisements on product pages.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Ads.ProductPageDimensions', N'PayPal ad dimensions for product pages.', N'120x90', N'enum', N'120x90,150x100,170x100,190x100,234x60,120x240,250x250,468x60,728x90,800x66,120x600,234x400,280x280,300x250,336x280,540x200', N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Ads.ShowOnHomePage', N'Show PayPal Credit  advertisements on your home page.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Ads.HomePageDimensions', N'PayPal Credit  ad dimensions for the home page.', N'120x90', N'enum', N'120x90,150x100,170x100,190x100,234x60,120x240,250x250,468x60,728x90,800x66,120x600,234x400,280x280,300x250,336x280,540x200', N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Ads.ShowOnCartPage', N'Show PayPal Credit  ads on the Shopping Cart page.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Ads.CartPageDimensions', N'PayPal Credit  ad dimensions for the shopping cart page.', N'120x90', N'enum', N'120x90,150x100,170x100,190x100,234x60,120x240,250x250,468x60,728x90,800x66,120x600,234x400,280x280,300x250,336x280,540x200', N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Ads.ShowOnEntityPage', N'Show Credit  ads on entity pages.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Ads.EntityPageDimensions', N'PayPal Credit  ad dimensions for entity pages.', N'120x90', N'enum', N'120x90,150x100,170x100,190x100,234x60,120x240,250x250,468x60,728x90,800x66,120x600,234x400,280x280,300x250,336x280,540x200', N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowDistributorNotificationPriceInfo', N'Show prices and order total information on the distributor notification emails.', N'false', N'boolean', N'null', N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxMind.ServiceType', N'This can be set to either "standard" or "premium". By default, we use the highest level of service available for your account. If you have both the premium and standard minFraud service, you can choose to use the standard service to save on costs.', N'premium', N'enum', N'standard,premium', N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MaxMind.ExplanationLink', N'The URL where admins can find more information about the maxmind riskScore. Used on the order management screen.', N'http://www.maxmind.com/en/riskscore', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.EndpointLive', N'WSDL Endpoint for USAePay SOAP API Live Transactions. Do not change.', N'https://www.usaepay.com/soap/gate/2E58E844', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'USAePay.EndpointSandbox', N'WSDL Endpoint for USAePay SOAP API Sandbox Transactions. Do not change.', N'https://sandbox.usaepay.com/soap/gate/2E58E844', N'string', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RequireEmailConfirmation', N'If TRUE, customers are prompted to re-enter their e-mail address as confirmation when registering or updating accounts.', N'false', N'boolean', NULL, N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SearchDescriptionsByDefault', N'If TRUE, search results will include the description and summary fields by default. NOTE: This will put additional strain on your site''s resources and may not be advisable in some shared hosting environments.', N'true', N'boolean', NULL, N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Google.Remarketing.Enabled', N'Set TRUE to enable the Google Remarketing script on your site. This enables the contents of the Script.Google.Remarketing topic on every page of your site. You must make sure that the script.bodyclose XmlPackage is included in your template.', N'false', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Google.DynamicRemarketing.Enabled', N'Enable Google Dynamic Remarketing script on your site. Google Remarketing must also be installed.', N'false', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Google.DynamicRemarketing.ProductIdentifierFormat', N'This string allows you to specify the format of your google product identifiers. Valid tokens are {ProductID},{VariantID}, and {FullSKU}. These tokens are case sensitive.', N'{ProductID}-{VariantID}--', N'string', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AvalaraTax.PreventOrderIfAddressValidationFails', N'If TRUE, Avalara address validation errors will prevent checkout', N'False', N'boolean', NULL, N'TAX', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AllowRecurringFrequencyChangeInCart', N'If TRUE, customers will be able to switch among recurring variants on the shopping cart page.', N'true', N'boolean', NULL, N'CHECKOUT', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GiftCards.Enabled', N'Enables GiftCards to be used in the shopping cart', N'true', N'boolean', NULL, N'SITEDISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Promotions.Enabled', N'Enables Promotions to be used in the shopping cart', N'true', N'boolean', NULL, N'SITEDISPLAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Promotions.ExcludeStates', N'A comma-separated list of 2-digit state codes to exclude from shipping promotions.', N'', N'string', NULL, N'CHECKOUT', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PayPal.Express.AVSRequireConfirmedAddress', N'Require Confirmed Address. This is used to qualify for Seller Protection.  If set to true, shoppers who do not have an AVS Confirmed shipping address set in their PayPal account will not be able to check out with PayPal Express.', N'false', N'boolean', NULL, N'GATEWAY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.SearchPage', N'The XmlPackage used to display search results on the search page. "page.search.xml.config" is the default value.', N'page.search.xml.config', NULL, NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.SearchAdvPage', N'The XmlPackage used to display search results on the advanced search page. "page.searchadv.xml.config" is the default value.', N'page.searchadv.xml.config', NULL, NULL, N'XMLPACKAGE', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Search_NumberOfColumns', N'The number of columns on the search page grid. 4 is the default value.', N'4', NULL, NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Google.AnalyticsDisplayAdvertising.Enabled', N'Set TRUE to enable Google display advertising features within your Google Analytics tag. You may need to update your privacy policy if you turn on this feature. See Google''s display advertising policy requirements for more inforamtion.', N'false', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Watermark.Icons.Enabled', N'If TRUE and watermarks are enabled, icon-sized product images will also contain watermarks.', N'true', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Google.TagManager.Enabled', N'Set TRUE to enable the Google Tag Manager script on your site. This enables the contents of the Script.Google.TagManager topic on every page of your site. You must make sure that the script.bodyopen XmlPackage is included in your template.', N'false', N'boolean', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'XmlPackage.SiteMapPage', N'The XmlPackage used to generate the site map', N'', N'string', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DisplayMaintenancePage.Enable', N'Set TRUE to display maintenance.master page to non-Admin users. Administrators may still access the site.', N'false', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DotFeed.Connect.ApiUri', N'Internal use. Do not modify. ', N'https://api.dotfeed.com:7000/adnsfconnect/', N'String', NULL, N'DOTFEED', 1, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FeaturedProducts.NumberOfItems', N'The number of featured items that appear on the home page. Set this number to 0 to disable featured items functionality.', N'4', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FeaturedProducts.NumberOfColumns', N'The number of columns on the home page featured items.  Valid values are 1 - 6. 4 is the default value.', N'4', N'integer', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FeaturedProducts.ShowPrice', N'Whether or not to show the price on the home page featured products.', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'FeaturedProducts.ShowAddToCartForm', N'Whether or not to show the add-to-cart form for featured products on the home page. Only simple products may be added to the cart. Complex products display a "Details" button.', N'true', N'boolean', NULL, N'SITEDISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'KitInventory.ShowOutOfStockMessage', N'If True, "Out-of-Stock" or "In-stock" labels appear on product kit pages.', N'true', N'boolean', NULL, N'OUTOFSTOCK', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'KitInventory.AllowSaleOfOutOfStock', N'If True, AspDotNetStorefront allows shoppers to purchase a kit item even when the kit item is out of stock.', N'false', N'boolean', NULL, N'OUTOFSTOCK', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DotFeed.AccessKey', N'The key you provide to allow DotFeed to access your site data. Can be any combination of text and numbers.', N'', N'String', NULL, N'DOTFEED', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Shipping.Tracking.Fedex', N'URL for the Fedex tracking site.', N'http://www.fedex.com/Tracking?action=track&tracknumbers=', N'String', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Shipping.Tracking.Ups', N'URL for the UPS tracking site', N'http://wwwapps.ups.com/WebTracking/track?track=yes&trackNums=', N'String', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Shipping.Tracking.Usps', N'URL for the USPS tracking site', N'https://tools.usps.com/go/TrackConfirmAction_input?qtc_tLabels1=', N'String', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Checkout.ShowOkToEmailOnCheckout', N'If True, checkout page enables shoppers to opt out or in to email lists.', N'true', N'boolean', NULL, N'CHECKOUT', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Address.CollectCompany', N'If True, address forms include a Company Name field.', N'true', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Address.CollectNickName', N'If True, address forms include a nickname field.', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Address.CollectSuite', N'If true, address forms include the suite field.', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowShippingIcons', N'If True, carrier icons appear on the checkout page.', N'true', N'boolean', N'', N'CHECKOUT', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Braintree.MerchantId', N'The Merchant ID given to you by Braintree.  This is different than your ''Merchant Account ID''.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Braintree.PublicKey', N'The Public Key given to you by Braintree.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Braintree.PrivateKey', N'The Private Key given to you by Braintree.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Braintree.ScriptUrl', N'URL to the Braintree API. Do not modify.', N'https://js.braintreegateway.com/v2/braintree.js', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Braintree.3dSecureEnabled', N'If True, customers checking out with credit cards through Braintree will be shown the 3dSecure form.  3dSecure must be enabled on the Braintree account, which requires help from Braintree Support.', N'false', N'boolean', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ValueType], [AllowableValues], [ConfigValue], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AcceptJs.Live.ApiLoginId', 'Live Accept.js API login ID provided by A.Net', 'string', NULL, '', 'Gateway', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ValueType], [AllowableValues], [ConfigValue], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AcceptJs.Test.ApiLoginId', 'Test Accept.js API login ID provided by A.Net', 'string', NULL, '', 'Gateway', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ValueType], [AllowableValues], [ConfigValue], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AcceptJs.Live.TransactionKey', 'Live Accept.js transaction key provided by A.Net', 'string', NULL, '', 'Gateway', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ValueType], [AllowableValues], [ConfigValue], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AcceptJs.Test.TransactionKey', 'Test Accept.js transaction key provided by A.Net', 'string', NULL, '', 'Gateway', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ValueType], [AllowableValues], [ConfigValue], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AcceptJs.Live.ClientKey', 'Live Accept.js client key provided by A.Net', 'string', NULL, '', 'Gateway', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ValueType], [AllowableValues], [ConfigValue], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AcceptJs.Test.ClientKey', 'Test Accept.js client key provided by A.Net', 'string', NULL, '', 'Gateway', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ValueType], [AllowableValues], [ConfigValue], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AcceptJs.Form.Hosted.Live.Url', 'A.Net live Accept.js URL for A.Net hosted form.  Do not change this unless told to by support!', 'string', NULL, 'https://js.authorize.net/v3/AcceptUI.js', 'Gateway', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ValueType], [AllowableValues], [ConfigValue], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AcceptJs.Form.Hosted.Test.Url', 'A.Net test Accept.js URL for A.Net hosted form.  Do not change this unless told to by support!', 'string', NULL, 'https://jstest.authorize.net/v3/AcceptUI.js', 'Gateway', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ValueType], [AllowableValues], [ConfigValue], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AcceptJs.Form.Own.Live.Url', 'A.Net live Accept.js URL for using your own form instead of A.Net hosted form.  Do not change this unless told to by support!', 'string', NULL, 'https://js.authorize.net/v1/Accept.js', 'Gateway', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ValueType], [AllowableValues], [ConfigValue], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AcceptJs.Form.Own.Test.Url', 'A.Net test Accept.js URL for using your own form instead of A.Net hosted form.  Do not change this unless told to by support!', 'string', NULL, 'https://jstest.authorize.net/v1/Accept.js', 'Gateway', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Address.UsePostalCodeLookupService', N'Set to true to enable city/state lookup service based on postal code. USPS Postal Code lookup should only be used with USPS shipments.', N'true', N'boolean', NULL, N'CHECKOUT', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Address.PostalCodeLookupService.UspsServiceUrl', N'The service URL for USPS Web Tools.', N'http://production.shippingapis.com/ShippingAPI.dll', N'string', N'', N'CHECKOUT', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Address.PostalCodeLookupService.UspsUserId', N'Your user ID for USPS Web Tools. USPS Postal Code lookup should only be used with USPS shipments. This is provided by USPS when you register at https://www.usps.com/business/web-tools-apis/welcome.htm', N'', N'string', N'', N'CHECKOUT', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.MerchantId', N'Your Pay with Amazon merchant id.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.ClientId', N'Your Pay with Amazon client id.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.AccessKey', N'Your Pay with Amazon access key.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.SecretAccessKey', N'Your Pay with Amazon secret access key.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.SellerNote', N'The description of the order that is displayed in emails to the buyer.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.LiveServiceUrl', N'The endpoint used in live mode to make api calls.', N'https://mws.amazonservices.com/OffAmazonPayments/2013-01-01/', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.SandboxServiceUrl', N'The endpoint used in sandbox mode to make api calls.', N'https://mws.amazonservices.com/OffAmazonPayments_Sandbox/2013-01-01/', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.SandboxScriptUrl', N'The endpoint used in sandbox mode to render scripts.', N'https://static-na.payments-amazon.com/OffAmazonPayments/us/sandbox/js/Widgets.js', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.LiveScriptUrl', N'The endpoint used in sandbox mode to render scripts.', N'https://static-na.payments-amazon.com/OffAmazonPayments/us/js/Widgets.js', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.LiveProfileServiceUrl', N'The endpoint used in live mode to make profile api calls.', N'https://api.amazon.com/user/profile', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AmazonPayments.SandboxProfileServiceUrl', N'The endpoint used in sandbox mode to make profile api calls.', N'https://api.sandbox.amazon.com/user/profile', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Address.Country.Default', N'The two letter ISO country code to use as the default value for the country dropdown when customers create a new address.', N'US', N'string', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'BotUserAgentRegEx', N'Regular Expression for identifying search engine bots by user agent. This value can be as minimal or broad as you choose - it is used to identify search engine bots so they are not logged as "real" product views.', N'bot|spider', N'string', NULL, N'GENERAL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Minicart.Enabled', N'Enable the minicart on your site.', N'true', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Minicart.ShowImages', N'If TRUE, product picture icons appear within the minicart.', N'true', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Minicart.QuantityUpdate.Enabled', N'If TRUE, shoppers may modify cart item quantities within the minicart.', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Minicart.ShowSku', N'If TRUE, the product sku appears within the minicart.', N'false', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GuestCheckout', N'Use this setting to control guest checkout on your store. Disabled: Completely disables guest checkout and forces all shopper''s to login or create an account upon checkout. AllowUnregisteredCustomers (default): Enables guest checkout and makes collecting a shopper''s password during checkout optional. Once an email address is registered, that email can never be used for guest checkout again. AllowRegisteredCustomers: Enables guest checkout and gives the shopper the option to provide a password and login. A registered email will not stop the email address from being used in a future guest checkout, however, the email address cannot be registered again. PasswordNeverRequestedAtCheckout: Shoppers are not prompted to enter credentials or to create an account on the checkout page.', N'Disabled', N'enum', N'Disabled,AllowUnregisteredCustomers,AllowRegisteredCustomers,PasswordNeverRequestedAtCheckout', N'CHECKOUT', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PreserveActiveAddressOnSignin', N'If TRUE, addresses created by guest customers are moved to their new registered session when logging in or registering.', N'true', N'boolean', NULL, N'SETUP', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'NumberOfNewsArticlesToShow', N'Maximum number of news articles which appear, wherever on your site news articles appear.', N'100', N'int', NULL, N'GENERAL', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CacheShoppingCarts', N'If TRUE (default), shopping carts are cached in memory; otherwise shopping carts are not cached. Should only be set FALSE for troubleshooting purposes; otherwise performance suffers. ', N'True', N'boolean', N'', N'CACHING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'CacheShippingMethods', N'If TRUE, (default) shipping methods during checkout are cached in memory. Should only be set FALSE for troubleshooting purposes; otherwise performance suffers.', N'True', N'boolean', N'', N'CACHING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'IPAddress.RefuseRestrictedIPsFromSite', N'If false, IPs listed in the RestrictedIPs table in the DB (from being banned, marked as fraud, etc) aren''t blocked from the site.  This should usually be left true.', N'true', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AlwaysUseHTTPS', N'Set to true to always 301 redirect non-secure requests to HTTPS. Set to false to not take any special action on non-secure requests to non-secure pages. Note that this setting overrides the GoNonSecureAgain setting.', N'False', N'boolean', NULL, N'SECURITY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'HstsHeader', N'This adds the HSTS Strict-Transport-Security HSTS header to the site as long as the AlwaysUseHTTPS setting is enabled. To remove the header, set this value blank. To disable HSTS set the max-age to 0. To adjust the HSTS age set the HSTS max-age in seconds. For example, to direct browsers to always use https for 180 days, set this value to: max-age=15552000.', N'', N'string', NULL, N'SECURITY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'MicroPay.ShowAddToBalanceLink', N'If true, the account page will show a link to the MicroPay product so a user can add to their balance. Micropay must also be enabled.', N'true', N'boolean', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PasswordValidator', N'A Regular Expression that is used to validate passwords. Test your expression thoroughly before changing this.', N'^(?=.*[0-9])(?=.*[a-zA-Z]).{7,}$', N'string', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'reCAPTCHA.RequiredOnCheckout', N'If TRUE, the checkout process requires shoppers to verify they are not a robot to login or to create an account.', N'false', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ContentSecurityPolicy.Enabled', N'If true, page requests will recieve CSP related headers, disabling the site from being rendered in a browser.', N'true', N'boolean', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ContentSecurityPolicy.X-Frame-Options', N'If ContentSecurityPolicy.Enabled is set to true, this value will be used for the X-Frame-Options header.  Consult your developer before changing this value.', N'SAMEORIGIN', N'string', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ContentSecurityPolicy.Content-Security-Policy', N'If ContentSecurityPolicy.Enabled is set to true, this value will be used for the Content-Security-Policy header.  Consult your developer before changing this value.', N'frame-ancestors ''self''', N'string', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ContentSecurityPolicy.X-Content-Security-Policy', N'If ContentSecurityPolicy.Enabled is set to true, this value will be used for the X-Content-Security-Policy header.  Consult your developer before changing this value.', N'frame-ancestors ''self''', N'string', NULL, N'SECURITY', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'NumberOfShippingMethodsToDisplay', N'The number of shipping methods to display on checkout before a ''More Options'' link is shown. A value of zero will disable this feature.', N'0', N'integer', NULL, N'CHECKOUT', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'AddressPhoneRequired', N'If true, phone number is required for customer billing and shipping addresses.', N'true', N'boolean', NULL, N'SECURITY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'UseLegacySENameProvider', N'If true, the search engine name provider will work with ascii names only, otherwise, the new UTF-8 aware provider will be used.', N'false', N'boolean', NULL, N'GENERAL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ContinueShopping.Enabled', N'Show a continue shopping link on the checkout page.', N'true', N'boolean', NULL, N'CHECKOUT', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RecentAdditionsNumDays', N'The number of days back from the current date to pull products using the CreatedOn date for display on the recent additions page.', N'180', N'integer', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RecentAdditionsN', N'The maximum number of products to display on the recent additions page.', N'100', N'integer', NULL, N'MISC', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'NextMaintenanceDate', N'Internal use. Do not modify.', DATEADD(day, 30, GETDATE()), N'string', NULL, N'SYSTEM', 1, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ShowQuickStart', N'If TRUE, the Getting Started panel displays on the admin home page.', N'true', N'boolean', NULL, N'ADMIN', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'RelatedProducts.NumberDisplayed', N'The maximum number of related products displayed at the bottom of product pages.', N'4', N'integer', NULL, N'DISPLAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ClientResources.Script.DeferredRenderingEnabled', N'Set to true to defer rendering of opted-in scripts to the end of the HTML body tag.', N'false', N'boolean', NULL, N'CLIENT RESOURCES', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GoogleCustomerReviewsMerchantID', N'This is the ID from your Merchant Center Account. (If you have a Multi-Client Account, also know as an MCA, use the subaccount ID associated with Merchant Center Account that is connected to the domain of your store.)', N'', N'string', NULL, N'GOOGLE CUSTOMER REVIEWS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GoogleCustomerReviewsLanguage', N'This is the language code your badge and opt in survey will use. If the value is left blank, Google will use a language setting based on the user''s browser setting. Visit our manual to get a link to Google''s integration docs where supported language codes for Google Customer Reviews are listed - <a target="blank" style="text-decoration: underline;" href="http://help.aspdotnetstorefront.com/manual/1000/default.aspx#pageid=google_customer_reviews">AspDotNetStorefront Manual</a>.', N'en_US', N'string', null, N'GOOGLE CUSTOMER REVIEWS', 0, 0, GETDATE(), GETDATE());
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GoogleCustomerReviewsEnabled', N'If true, the Google Customer Reviews opt in survey JavaScript will be added to your order confirmation page.', N'false', N'boolean', null, N'GOOGLE CUSTOMER REVIEWS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GoogleCustomerReviewsBadgeEnabled', N'If true, the Google Customer Reviews JavaScript for the badge will be added to every page.', N'true', N'boolean', null, N'GOOGLE CUSTOMER REVIEWS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GoogleCustomerReviewsDeliveryLeadTime', N'The estimated average number of days before an order is delivered (whole numbers only).  Be as accurate as possible without shorting this value as this is used when calculating the estimated delivery date that is passed to Google.', N'', N'integer', null, N'GOOGLE CUSTOMER REVIEWS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GoogleCustomerReviewsBadgePosition', N'Where to place the Google Customer Reviews badge on your site - bottom right, or bottom left.', N'BOTTOM_RIGHT', N'enum', N'BOTTOM_RIGHT,BOTTOM_LEFT', N'GOOGLE CUSTOMER REVIEWS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'GoogleCustomerReviewsOptInSurveyPosition', N'Where to place the Google Customer Reviews survey that displays on the order confirmation page - center, bottom right, bottom left, bottom, top right or top left.', N'CENTER_DIALOG', N'enum', N'CENTER_DIALOG,BOTTOM_RIGHT_DIALOG,BOTTOM_LEFT_DIALOG,BOTTOM_TRAY,TOP_RIGHT_DIALOG,TOP_LEFT_DIALOG', N'GOOGLE CUSTOMER REVIEWS', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayPI.VendorName', N'The VendorName given to you by Sage Pay PI.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayPI.IntegrationKey', N'The Integration Key given to you by Sage Pay PI.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayPI.IntegrationPassword', N'The Integration Password given to you by Sage Pay PI.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayPI.3dSecureEnabled', N'If true, customers checking out with credit cards through Sage Pay PI will be shown the 3dSecure form if their card is enrolled. 3dSecure must be enabled on the Sage Pay PI account, which requires help from their Support department.', N'false', N'boolean', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayPI.LiveScriptUrl', N'URL to the live javascript file. Do not modify.', N'https://pi-live.sagepay.com/api/v1/js/sagepay.js', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayPI.TestScriptUrl', N'URL to the test javascript file. Do not modify.', N'https://pi-test.sagepay.com/api/v1/js/sagepay.js', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayPI.LiveUrl', N'URL to the Sage Pay PI live API. Do not modify.', N'https://pi-live.sagepay.com/api/v1/', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayPI.TestUrl', N'URL to the Sage Pay PI test API. Do not modify.', N'https://pi-test.sagepay.com/api/v1/', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayPI.3DSecureTermUrl', N'URL which points to a page on your site to which the bank will return the customer.', N'/threedsecure/sagepaypipares', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'SagePayPI.CustomerFriendlyErrors', N'If true, customer friendly errors will display to the user, otherwise more specific API errors will display which are useful for troubleshooting.', N'true', N'boolean', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'PhoneNumberMask.Enabled', N'If true, customer-entered phone numbers will be forced to adhere to a standard format, for example "(000) 000-0000".  Currently this only affects United States phone numbers.', N'true', N'boolean', NULL, N'CHECKOUT', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eWAY.APIKey', N'Your API key for eWAY which is in MYeWAY in My Account under API Key.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'eWAY.APIPassword', N'Your API password for eWAY which is in MYeWAY in My Account under API Key.  This is not your password for the eWAY Partner Portal.', N'', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ContactUsFromEmail', N'The e-mail address from which you want your store Contact Us e-mails sent.', '', N'string', NULL, N'EMAIL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ContactUsFromName', N'The name from which your Contact Us emails are sent, for example, Sally Jane.', '', N'string', NULL, N'EMAIL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ContactUsToEmail', N'The e-mail address to which you want your store Contact Us e-mails sent.', '', N'string', NULL, N'EMAIL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'ContactUsToName', N'The name to which your Contact Us emails are sent, for example, Sally Jane.', '', N'string', NULL, N'EMAIL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Signifyd.Enabled', N'If Yes, the Signifyd fraud protection service will be used before a credit card is captured by the gateway. See signifyd.com for more information.', 'false', N'boolean', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Signifyd.API.Url', N'The API endpoint address for Signifyd Fraud Protection.', 'https://api.signifyd.com/v2', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Signifyd.Console.Url', N'The API endpoint address for Signifyd Fraud Protection.', 'https://app.signifyd.com', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Signifyd.Team.Key', N'The API authentication key used by Signifyd API calls.', '', N'string', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Signifyd.DeclineAction.Void', 'If Yes, when Signifyd declines an order, then the order will be voided. Otherwise, do nothing and let the Admin manually change the order status.', 'true', N'boolean', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Signifyd.Log.Enabled', 'If Yes, then Signifyd activity is logged to the system log.', 'true', N'boolean', NULL, N'GATEWAY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Shipping.Hide.Options', 'If true, the shipping options section will collapse after a shipping method is selected.', 'true', N'boolean', NULL, N'SHIPPING', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'reCAPTCHA.SiteKey', 'The ''Site Key'' value from your Google reCAPTCHA account.', '', N'string', NULL, N'SECURITY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'reCAPTCHA.SecretKey', 'The ''Secret Key'' value from your Google reCAPTCHA account.', '', N'string', NULL, N'SECURITY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'reCAPTCHA.VerifyURL', 'Do not change this unless instructed to by support.', 'https://www.google.com/recaptcha/api/siteverify', N'string', NULL, N'SECURITY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'Customer.OkToEmail.Default', 'If true new customers default to OkayToEmail true.', 'false', N'boolean', NULL, N'EMAIL', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DataRetentionPolicies.Enabled', 'Enable data retention policies, including manual anonymization, and, when enabled with "DataRetentionPolicies.MonthsBeforeUserDataAnonymized", automatic anonymization of customer personally identifiable information.', 'false', N'boolean', NULL, N'SECURITY', 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[AppConfig] ([StoreID], [Name], [Description], [ConfigValue], [ValueType], [AllowableValues], [GroupName], [SuperOnly], [Hidden], [CreatedOn], [UpdatedOn]) VALUES (0, N'DataRetentionPolicies.MonthsBeforeUserDataAnonymized', 'When "DataRetentionPolicies.Enabled" is true, the number of months before customer personally identifiable information is automatically anonymized by database maintenance.', '0', N'integer', NULL, N'SECURITY', 0, 0, GETDATE(), GETDATE())

SET IDENTITY_INSERT [dbo].[Product] ON
print N'Inserting into [dbo].[Product]'
INSERT INTO [dbo].[Product] ([ProductID], [ProductGUID], [Name], [Summary], [Description], [SEKeywords], [SEDescription], [MiscText], [SwatchImageMap], [FroogleDescription], [SETitle], [SEAltText], [SizeOptionPrompt], [ColorOptionPrompt], [TextOptionPrompt], [ProductTypeID], [TaxClassID], [SKU], [ManufacturerPartNumber], [SalesPromptID], [IsFeatured], [XmlPackage], [ColWidth], [Published], [Wholesale], [RequiresRegistration], [Looks], [Notes], [QuantityDiscountID], [RelatedProducts], [UpsellProducts], [UpsellProductDiscountPercentage], [RelatedDocuments], [TrackInventoryBySizeAndColor], [TrackInventoryBySize], [TrackInventoryByColor], [IsAKit], [ShowInProductBrowser], [ShowBuyButton], [RequiresProducts], [HidePriceUntilCart], [IsCalltoOrder], [ExcludeFromPriceFeeds], [RequiresTextOption], [TextOptionMaxLength], [SEName], [ExtensionData], [ExtensionData2], [ExtensionData3], [ExtensionData4], [ExtensionData5], [ImageFilenameOverride], [IsImport], [IsSystem], [Deleted], [CreatedOn], [WarehouseLocation], [SkinID], [TemplateName], [UpdatedOn]) VALUES (1, newid(), N'Add $5 to my MicroPay account', NULL, N'Add $5 to my MicroPay account System Product, Do Not delete', NULL, NULL, NULL, NULL, NULL, N'MICROPAY', NULL, NULL, NULL, NULL, 1, 1, N'MICROPAY', N'MICROPAY', 1, 0, NULL, 4, 1, 0, 0, 0, NULL, NULL, NULL, NULL, 0.0000, NULL, 0, 1, 1, 0, 1, 1, NULL, 0, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 1, 0, GETDATE(), NULL, 0, N'', GETDATE())
SET IDENTITY_INSERT [dbo].[Product] OFF

SET IDENTITY_INSERT [dbo].[ProductType] ON
print N'Inserting into [dbo].[ProductType]'
INSERT INTO [dbo].[ProductType] ([ProductTypeID], [Name], [DisplayOrder], [TaxClassID], [CreatedOn], [UpdatedOn]) VALUES (1, N'Generic Product', 1, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ProductType] ([ProductTypeID], [Name], [DisplayOrder], [TaxClassID], [CreatedOn], [UpdatedOn]) VALUES (2, N'Kit Product', 1, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ProductType] ([ProductTypeID], [Name], [DisplayOrder], [TaxClassID], [CreatedOn], [UpdatedOn]) VALUES (100, N'Gift Card Physical', 1, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ProductType] ([ProductTypeID], [Name], [DisplayOrder], [TaxClassID], [CreatedOn], [UpdatedOn]) VALUES (101, N'Gift Card Email', 1, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ProductType] ([ProductTypeID], [Name], [DisplayOrder], [TaxClassID], [CreatedOn], [UpdatedOn]) VALUES (102, N'Gift Card Certificate', 1, 1, GETDATE(), GETDATE())
SET IDENTITY_INSERT [dbo].[ProductType] OFF

SET IDENTITY_INSERT [dbo].[Country] ON
print N'Inserting into [dbo].[Country]'
INSERT INTO [dbo].[Country] ([CountryID], [Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (1, N'United States', N'US', N'USA', N'840', 1, 1, NULL, GETDATE(), 1, N'^\d{5}(-\d{4})?$', N'12345-6789 or 12345', GETDATE())
INSERT INTO [dbo].[Country] ([CountryID], [Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (2, N'Canada', N'CA', N'CAN', N'124', 1, 2, NULL, GETDATE(), 1, N'^(?![dfioquDFIOQU])[a-zA-Z]\d(?![dfioquDFIOQU])[a-zA-Z]\s?\d(?![dfioquDFIOQU])[a-zA-Z]\d$', N'H1H 1H3', GETDATE())
SET IDENTITY_INSERT [dbo].[Country] OFF
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Afghanistan', N'AF', N'AFG', N'004', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Albania', N'AL', N'ALB', N'008', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Algeria', N'DZ', N'DZA', N'012', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'American Samoa', N'AS', N'ASM', N'016', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Andorra', N'AD', N'AND', N'020', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Angola', N'AO', N'AGO', N'024', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Anguilla', N'AI', N'AIA', N'660', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Antarctica', N'AQ', N'ATA', N'010', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Antigua and Barbuda', N'AG', N'ATG', N'028', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Argentina', N'AR', N'ARG', N'032', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Armenia', N'AM', N'ARM', N'051', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Aruba', N'AW', N'ABW', N'533', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Australia', N'AU', N'AUS', N'036', 1, 2, NULL, GETDATE(), 1, N'^\d{4}$', N'1234', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Austria', N'AT', N'AUT', N'040', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Azerbaijan', N'AZ', N'AZE', N'031', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Bahamas', N'BS', N'BHS', N'044', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Bahrain', N'BH', N'BHR', N'048', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Bangladesh', N'BD', N'BGD', N'050', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Barbados', N'BB', N'BRB', N'052', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Belarus', N'BY', N'BLR', N'112', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Belgium', N'BE', N'BEL', N'056', 1, 2, NULL, GETDATE(), 1, N'^\d{4}$', N'1234', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Belize', N'BZ', N'BLZ', N'084', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Benin', N'BJ', N'BEN', N'204', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Bermuda', N'BM', N'BMU', N'060', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Bhutan', N'BT', N'BTN', N'064', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Bolivia', N'BO', N'BOL', N'068', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Bosnia and Herzegowina', N'BA', N'BIH', N'070', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Botswana', N'BW', N'BWA', N'072', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Bouvet Island', N'BV', N'BVT', N'074', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Brazil', N'BR', N'BRA', N'076', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'British Indian Ocean Territory', N'IO', N'IOT', N'086', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Brunei Darussalam', N'BN', N'BRN', N'096', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Bulgaria', N'BG', N'BGR', N'100', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Burkina Faso', N'BF', N'BFA', N'854', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Burundi', N'BI', N'BDI', N'108', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Cambodia', N'KH', N'KHM', N'116', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Cape Verde', N'CV', N'CPV', N'13', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Cayman Islands', N'KY', N'CYM', N'136', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Central African Republic', N'CF', N'CAF', N'140', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Chad', N'TD', N'TCD', N'148', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Chile', N'CL', N'CHL', N'152', 1, 2, NULL, GETDATE(), 0, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'China', N'CN', N'CHN', N'156', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Christmas Island', N'CX', N'CXR', N'162', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Cocos (Keeling) Islands', N'CC', N'CCK', N'166', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Colombia', N'CO', N'COL', N'170', 1, 2, NULL, GETDATE(), 0, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Comoros', N'KM', N'COM', N'174', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Congo', N'CG', N'COG', N'178', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Congo, the Democratic Republic of the', N'CD', N'COD', N'180', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Cook Islands', N'CK', N'COK', N'184', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Costa Rica', N'CR', N'CRI', N'188', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Cote d''Ivoire', N'CI', N'CIV', N'384', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Croatia', N'HR', N'HRV', N'191', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Cuba', N'CU', N'CUB', N'192', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Cyprus', N'CY', N'CYP', N'196', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Czech Republic', N'CZ', N'CZE', N'203', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Denmark', N'DK', N'DNK', N'208', 1, 2, NULL, GETDATE(), 1, N'^([Dd]([Ee][Nn][Mm][Aa][Rr])?[Kk](\s|-))?\d{3,4}$', N'1000 or DK-9000 or 123', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Djibouti', N'DJ', N'DJI', N'262', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Dominica', N'DM', N'DMA', N'212', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Dominican Republic', N'DO', N'DOM', N'214', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'East Timor', N'TP', N'TMP', N'626', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Ecuador', N'EC', N'ECU', N'218', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Egypt', N'EG', N'EGY', N'818', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'El Salvador', N'SV', N'SLV', N'222', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Estonia', N'EE', N'EST', N'223', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Falkland Islands (Malvinas)', N'FK', N'FLK', N'238', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Faroe Islands', N'FO', N'FRO', N'234', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Fiji', N'FJ', N'FJI', N'242', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Finland', N'FI', N'FIN', N'246', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'France', N'FR', N'FRA', N'250', 1, 2, NULL, GETDATE(), 1, N'^\d{5}$', N'01234', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'France, Metropolitan', N'FX', N'FXX', N'249', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'French Guiana', N'GF', N'GUF', N'254', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'French Polynesia', N'PF', N'PYF', N'258', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'French Southern Territories', N'TF', N'ATF', N'260', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Gabon', N'GA', N'GAB', N'266', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Gambia', N'GM', N'GMB', N'270', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Georgia', N'GE', N'GEO', N'268', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Germany', N'DE', N'DEU', N'276', 1, 2, NULL, GETDATE(), 1, N'^\d{5}$', N'01234', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Ghana', N'GH', N'GHA', N'288', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Gibraltar', N'GI', N'GIB', N'292', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Greece', N'GR', N'GRC', N'300', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Greenland', N'GL', N'GRL', N'304', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Grenada', N'GD', N'GRD', N'308', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Guadeloupe', N'GP', N'GLP', N'312', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Guam', N'GU', N'GUM', N'316', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Guatemala', N'GT', N'GTM', N'320', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Guinea', N'GN', N'GIN', N'324', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Guinea-Bissau', N'GW', N'GNB', N'624', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Guyana', N'GY', N'GUY', N'328', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Haiti', N'HT', N'HTI', N'332', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Heard and Mc Donald Islands', N'HM', N'HMD', N'334', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Holy see (Vatican City State)', N'VA', N'TAX', N'336', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Honduras', N'HN', N'HND', N'340', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Hong Kong', N'HK', N'HKG', N'344', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Hungary', N'HU', N'HUN', N'348', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Iceland', N'IS', N'ISL', N'352', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'India', N'IN', N'IND', N'356', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Indonesia', N'ID', N'IDN', N'360', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Iran (Islamic Republic of)', N'IR', N'IRN', N'364', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Iraq', N'IQ', N'IRQ', N'368', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Ireland', N'IE', N'IRL', N'372', 1, 2, NULL, GETDATE(), 0, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Israel', N'IL', N'ISR', N'376', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Italy', N'IT', N'ITA', N'380', 1, 2, NULL, GETDATE(), 1, N'^\d{5}$', N'12345', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Jamaica', N'JM', N'JAM', N'388', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Japan', N'JP', N'JPN', N'392', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Jordan', N'JO', N'JOR', N'400', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Kazakhstan', N'KZ', N'KAZ', N'398', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Kenya', N'KE', N'KEN', N'404', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Kiribati', N'KI', N'KIR', N'296', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Korea, Democratic People''s Republic of', N'KP', N'PRK', N'408', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Korea, Republic of', N'KR', N'KOR', N'410', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Kuwait', N'KW', N'KWT', N'414', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Kyrgyzstan', N'KG', N'KGZ', N'417', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Lao People''s Democratic Republic', N'LA', N'LAO', N'418', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Latvia', N'LV', N'LVA', N'428', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Lebanon', N'LB', N'LBN', N'422', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Lesotho', N'LS', N'LSO', N'426', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Liberia', N'LR', N'LBR', N'430', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Libyan Arab Jamahiriya', N'LY', N'LBY', N'434', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Liechtenstein', N'LI', N'LIE', N'438', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Lithuania', N'LT', N'LTU', N'440', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Luxembourg', N'LU', N'LUX', N'442', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Macau', N'MO', N'MAC', N'446', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Macedonia, the former Yugoslav Republic of', N'MK', N'MKD', N'807', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Madagascar', N'MG', N'MDG', N'400', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Malawi', N'MW', N'MWI', N'454', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Malaysia', N'MY', N'MYS', N'458', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Maldives', N'MV', N'MDV', N'462', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Mali', N'ML', N'MLI', N'466', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Malta', N'MT', N'MLT', N'470', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Marshall Islands', N'MH', N'MHL', N'584', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Martinique', N'MQ', N'MTQ', N'474', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Mauritania', N'MR', N'MRT', N'478', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Mauritius', N'MU', N'MUS', N'480', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Mayotte', N'YT', N'MYT', N'175', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Mexico', N'MX', N'MEX', N'484', 1, 2, NULL, GETDATE(), 1, N'^\d{5}$', N'12345', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Micronesia, Federated States of', N'FM', N'FSM', N'583', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Moldova, Republic of', N'MD', N'MDA', N'498', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Monaco', N'MC', N'MCO', N'492', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Mongolia', N'MN', N'MNG', N'496', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Montserrat', N'MS', N'MSR', N'500', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Morocco', N'MA', N'MAR', N'504', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Mozambique', N'MZ', N'MOZ', N'508', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Myanmar', N'MM', N'MMR', N'104', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Namibia', N'NA', N'NAM', N'516', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Nauru', N'NR', N'NRU', N'520', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Nepal', N'NP', N'NPL', N'524', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Netherlands', N'NL', N'NLD', N'528', 1, 2, NULL, GETDATE(), 1, N'^\d{4}\s?[a-zA-Z]{2}$', N'2597 QQ', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Netherlands Antilles', N'AN', N'ANT', N'530', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'New Caledonia', N'NC', N'NCL', N'540', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'New Zealand', N'NZ', N'NZL', N'554', 1, 2, NULL, GETDATE(), 1, N'^\d{4}$', N'1234', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Nicaragua', N'NI', N'NIC', N'558', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Niger', N'NE', N'NER', N'562', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Nigeria', N'NG', N'NGA', N'566', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Niue', N'NU', N'NIU', N'570', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Norfolk Island', N'NF', N'NFK', N'574', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Northern Mariana Islands', N'MP', N'MNP', N'580', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Norway', N'NO', N'NOR', N'578', 1, 2, NULL, GETDATE(), 1, N'^\d{4}$', N'1122', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Oman', N'OM', N'OMN', N'512', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Pakistan', N'PK', N'PAK', N'586', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Palau', N'PW', N'PLW', N'585', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Palestinian Territory', N'PS', N'PSE', N'275', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Panama', N'PA', N'PAN', N'591', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Papua New Guinea', N'PG', N'PNG', N'598', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Paraguay', N'PY', N'PRY', N'600', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Peru', N'PE', N'PER', N'604', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Philippines', N'PH', N'PHL', N'608', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Pitcairn', N'PN', N'PCN', N'612', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Poland', N'PL', N'POL', N'616', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Portugal', N'PT', N'PRT', N'620', 1, 2, NULL, GETDATE(), 1, N'^[0-9]{4}(-[0-9]{3})?$', N'1200 or 1350-224', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Puerto Rico', N'PR', N'PRI', N'630', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Qatar', N'QA', N'QAT', N'634', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Reunion', N'RE', N'REU', N'638', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Romania', N'RO', N'ROM', N'642', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Russia', N'RU', N'RUS', N'643', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Rwanda', N'RW', N'RWA', N'646', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Saint Kitts and Nevis', N'KN', N'KNA', N'659', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Saint Lucia', N'LC', N'LCA', N'662', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Saint Vincent and the Grenadines', N'VC', N'VCT', N'670', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Samoa', N'WS', N'WSM', N'882', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'San Marino', N'SM', N'SMR', N'674', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Sao Tome and Principe', N'ST', N'STP', N'678', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Saudi Arabia', N'SA', N'SAU', N'682', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Senegal', N'SN', N'SEN', N'686', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Seychelles', N'SC', N'SYC', N'690', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Sierra Leone', N'SL', N'SLE', N'694', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Singapore', N'SG', N'SGP', N'702', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Slovakia (Slovak Republic)', N'SK', N'SVK', N'703', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Slovenia', N'SI', N'SVN', N'705', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Solomon Islands', N'SB', N'SLB', N'090', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Somalia', N'SO', N'SOM', N'706', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'South Africa', N'ZA', N'ZAF', N'710', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'South Georgia and the South Sandwich Islands', N'GS', N'SGS', N'239', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Spain', N'ES', N'ESP', N'724', 1, 2, NULL, GETDATE(), 1, N'^[0-5][1-2]\d{3}$', N'01123 or 52345', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Sri Lanka', N'LK', N'LKA', N'144', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'St. Helena', N'SH', N'SHN', N'654', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'St. Pierre and Miquelon', N'PM', N'SPM', N'666', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Sudan', N'SD', N'SDN', N'736', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'SuriName', N'SR', N'SUR', N'740', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Svalbard and Jan Mayen Islands', N'SJ', N'SJM', N'744', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Swaziland', N'SZ', N'SWZ', N'748', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Sweden', N'SE', N'SWE', N'752', 1, 2, NULL, GETDATE(), 1, N'^\d{3}\s?\d{2}$', N'12345 or 123 45', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Switzerland', N'CH', N'CHE', N'756', 1, 2, NULL, GETDATE(), 1, N'^\d{4}$', N'1234', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Syria', N'SY', N'SYR', N'760', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Taiwan', N'TW', N'TWN', N'158', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Tajikistan', N'TJ', N'TJK', N'762', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Tanzania, United Republic of', N'TZ', N'TZA', N'834', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Thailand', N'TH', N'THA', N'764', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Togo', N'TG', N'TGO', N'768', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Tokelau', N'TK', N'TKL', N'772', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Tonga', N'TO', N'TON', N'776', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Trinidad and Tobago', N'TT', N'TTO', N'780', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Tunisia', N'TN', N'TUN', N'788', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Turkey', N'TR', N'TUR', N'792', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Turkmenistan', N'TM', N'TKM', N'795', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Turks and Caicos Islands', N'TC', N'TCA', N'796', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Tuvalu', N'TV', N'TUV', N'798', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Uganda', N'UG', N'UGA', N'800', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Ukraine', N'UA', N'UKR', N'804', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'United Arab Emirates', N'AE', N'ARE', N'784', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'United Kingdom', N'GB', N'GBR', N'826', 1, 2, NULL, GETDATE(), 1, N'^([A-Za-z][A-Za-z0-9]{1,3} \d[A-Za-z0-9][A-Za-z])|([Aa][Ii]-2640)$', N'A9 9AA or A99 9AA or AA9 9AA or AA99 9AA', GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'United States minor outlying islands', N'UM', N'UMI', N'581', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Uruguay', N'UY', N'URY', N'858', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Uzbekistan', N'UZ', N'UZB', N'860', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Vanuatu', N'VU', N'VUT', N'548', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Venezuela', N'VE', N'VEN', N'862', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Viet Nam', N'VN', N'VNM', N'704', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Virgin Islands (British)', N'VG', N'VGB', N'092', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Virgin Islands (U.S.)', N'VI', N'VIR', N'850', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Wallis and Futuna Islands', N'WF', N'WLF', N'876', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Western Sahara', N'EH', N'ESH', N'732', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Yemen', N'YE', N'YEM', N'887', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Yugoslavia', N'YU', N'YUG', N'891', 1, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Zambia', N'ZM', N'ZMB', N'894', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())
INSERT INTO [dbo].[Country] ([Name], [TwoLetterISOCode], [ThreeLetterISOCode], [NumericISOCode], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [PostalCodeRequired], [PostalCodeRegex], [PostalCodeExample], [UpdatedOn]) VALUES (N'Zimbabwe', N'ZW', N'ZWE', N'716', 0, 2, NULL, GETDATE(), 1, NULL, NULL, GETDATE())

SET IDENTITY_INSERT [dbo].[Customer] ON
print N'Inserting into [dbo].[Customer]'
INSERT INTO [dbo].[Customer] ([CustomerID], [CustomerLevelID], [StoreID], [RegisterDate], [Email], [Password], [SaltKey], [Gender], [FirstName], [LastName], [Notes], [SkinID], [Phone], [FAX], [AffiliateID], [Referrer], [CouponCode], [OkToEmail], [IsAdmin], [BillingEqualsShipping], [LastIPAddress], [OrderNotes], [RTShipRequest], [RTShipResponse], [OrderOptions], [LocaleSetting], [MicroPayBalance], [RecurringShippingMethodID], [RecurringShippingMethod], [BillingAddressID], [ShippingAddressID], [ExtensionData], [FinalizationData], [Deleted], [CreatedOn], [Over13Checked], [CurrencySetting], [VATSetting], [VATRegistrationID], [StoreCCInDB], [IsRegistered], [LockedUntil], [AdminCanViewCC], [PwdChanged], [BadLoginCount], [LastBadLogin], [Active], [PwdChangeRequired], [RequestedPaymentMethod], [BuySafe], [CIM_ProfileId], [UpdatedOn]) VALUES (58639, 0, 1, GETDATE(), N'admin@aspdotnetstorefront.com', N'Admin$11', -1, NULL, N'Admin', N'User', NULL, 1, NULL, NULL, NULL, NULL, NULL, 1, 3, 0, NULL, NULL, NULL, NULL, NULL, N'en-US', 0.0000, 1, NULL, 1, 1, NULL, NULL, 0, GETDATE(), 1, NULL, 2, N'', 1, 1, NULL, 1, GETDATE(), 0, NULL, 1, 1, NULL, NULL, NULL, GETDATE())
SET IDENTITY_INSERT [dbo].[Customer] OFF

SET IDENTITY_INSERT [dbo].[SalesPrompt] ON
print N'Inserting into [dbo].[SalesPrompt]'
INSERT INTO [dbo].[SalesPrompt] ([SalesPromptID], [Name], [ExtensionData], [Deleted], [CreatedOn], [UpdatedOn]) VALUES (1, N'On Sale For', NULL, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[SalesPrompt] ([SalesPromptID], [Name], [ExtensionData], [Deleted], [CreatedOn], [UpdatedOn]) VALUES (2, N'Special Introductory Price', NULL, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[SalesPrompt] ([SalesPromptID], [Name], [ExtensionData], [Deleted], [CreatedOn], [UpdatedOn]) VALUES (3, N'On Sale Now', NULL, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[SalesPrompt] ([SalesPromptID], [Name], [ExtensionData], [Deleted], [CreatedOn], [UpdatedOn]) VALUES (4, N'Member Price', NULL, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[SalesPrompt] ([SalesPromptID], [Name], [ExtensionData], [Deleted], [CreatedOn], [UpdatedOn]) VALUES (5, N'Special Affiliate Price', NULL, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[SalesPrompt] ([SalesPromptID], [Name], [ExtensionData], [Deleted], [CreatedOn], [UpdatedOn]) VALUES (6, N'Grand Opening Sale Price', NULL, 0, GETDATE(), GETDATE())
SET IDENTITY_INSERT [dbo].[SalesPrompt] OFF

SET IDENTITY_INSERT [dbo].[ShippingCalculation] ON
print N'Inserting into [dbo].[ShippingCalculation]'
INSERT INTO [dbo].[ShippingCalculation] ([ShippingCalculationID], [Name], [Selected], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (1, N'Calculate Shipping By Weight', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ShippingCalculation] ([ShippingCalculationID], [Name], [Selected], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (2, N'Calculate Shipping By Total', 1, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ShippingCalculation] ([ShippingCalculationID], [Name], [Selected], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (3, N'Use Fixed Prices', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ShippingCalculation] ([ShippingCalculationID], [Name], [Selected], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (4, N'All Orders Have Free Shipping', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ShippingCalculation] ([ShippingCalculationID], [Name], [Selected], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (5, N'Use Fixed Percentage Of Total', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ShippingCalculation] ([ShippingCalculationID], [Name], [Selected], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (6, N'Use Individual Item Shipping Costs', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ShippingCalculation] ([ShippingCalculationID], [Name], [Selected], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (7, N'Use Real Time Rates', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ShippingCalculation] ([ShippingCalculationID], [Name], [Selected], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (8, N'Calculate Shipping By Weight & Zone', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ShippingCalculation] ([ShippingCalculationID], [Name], [Selected], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (9, N'Calculate Shipping By Total & Zone', 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[ShippingCalculation] ([ShippingCalculationID], [Name], [Selected], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (10, N'Calculate Shipping By Total & Percent', 0, 1, GETDATE(), GETDATE())
SET IDENTITY_INSERT [dbo].[ShippingCalculation] OFF

SET IDENTITY_INSERT [dbo].[KitGroupType] ON
print N'Inserting into [dbo].[KitGroupType]'
INSERT INTO [dbo].[KitGroupType] ([KitGroupTypeID], [Name], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (1, N'Single Select Dropdown List', 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[KitGroupType] ([KitGroupTypeID], [Name], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (2, N'Single Select Radio List', 2, GETDATE(), GETDATE())
INSERT INTO [dbo].[KitGroupType] ([KitGroupTypeID], [Name], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (3, N'Multi Select Checkbox', 3, GETDATE(), GETDATE())
INSERT INTO [dbo].[KitGroupType] ([KitGroupTypeID], [Name], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (4, N'Textbox', 4, GETDATE(), GETDATE())
INSERT INTO [dbo].[KitGroupType] ([KitGroupTypeID], [Name], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (5, N'Text Area', 5, GETDATE(), GETDATE())
INSERT INTO [dbo].[KitGroupType] ([KitGroupTypeID], [Name], [DisplayOrder], [CreatedOn], [UpdatedOn]) VALUES (6, N'File Upload', 6, GETDATE(), GETDATE())
SET IDENTITY_INSERT [dbo].[KitGroupType] OFF

SET IDENTITY_INSERT [dbo].[CreditCardType] ON
print N'Inserting into [dbo].[CreditCardType]'
INSERT INTO [dbo].[CreditCardType] ([CardTypeID], [CardType], [Accepted], [CreatedOn], [UpdatedOn]) VALUES (1, N'VISA', 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[CreditCardType] ([CardTypeID], [CardType], [Accepted], [CreatedOn], [UpdatedOn]) VALUES (2, N'MasterCard', 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[CreditCardType] ([CardTypeID], [CardType], [Accepted], [CreatedOn], [UpdatedOn]) VALUES (3, N'AMEX', 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[CreditCardType] ([CardTypeID], [CardType], [Accepted], [CreatedOn], [UpdatedOn]) VALUES (4, N'DISCOVER', 1, GETDATE(), GETDATE())
SET IDENTITY_INSERT [dbo].[CreditCardType] OFF

SET IDENTITY_INSERT [dbo].[Address] ON
print N'Inserting into [dbo].[Address]'
INSERT INTO [dbo].[Address] ([AddressID], [CustomerID], [NickName], [FirstName], [LastName], [Company], [Address1], [Address2], [Suite], [City], [State], [Zip], [Country], [ResidenceType], [Phone], [Email], [PaymentMethodLastUsed], [CardType], [CardName], [CardNumber], [CardExpirationMonth], [CardExpirationYear], [CardStartDate], [CardIssueNumber], [PONumber], [ExtensionData], [Deleted], [CreatedOn], [Crypt], [UpdatedOn], [OffsiteSource]) VALUES (1, 58639, N'', N'Admin', N'User', N'', N'2245 Ashland St', N'', N'', N'Ashland', N'OR', N'97520', N'United States', 0, N'123-456-7890', N'admin@aspdotnetstorefront.com', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, GETDATE(), 1, GETDATE(), NULL)
SET IDENTITY_INSERT [dbo].[Address] OFF

print N'Inserting into [dbo].[State]'
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Alabama', 1, N'AL', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Alaska', 1, N'AK', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'American Samoa', 1, N'AS', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'AA (Armed Forces Americas)', 1, N'AA', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'AE (Armed Forces Europe)', 1, N'AE', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'AP (Armed Forces Pacific)', 1, N'AP', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Arizona', 1, N'AZ', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Arkansas', 1, N'AR', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'California', 1, N'CA', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Colorado', 1, N'CO', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Connecticut', 1, N'CT', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Delaware', 1, N'DE', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'District of Columbia', 1, N'DC', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Federated States of Micronesia', 1, N'FM', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Florida', 1, N'FL', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Georgia', 1, N'GA', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Guam', 1, N'GU', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Hawaii', 1, N'HI', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Idaho', 1, N'ID', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Illinois', 1, N'IL', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Indiana', 1, N'IN', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Iowa', 1, N'IA', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Kansas', 1, N'KS', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Kentucky', 1, N'KY', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Louisiana', 1, N'LA', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Maine', 1, N'ME', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Marshall Islands', 1, N'MH', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Maryland', 1, N'MD', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Massachusetts', 1, N'MA', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Michigan', 1, N'MI', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Minnesota', 1, N'MN', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Mississippi', 1, N'MS', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Missouri', 1, N'MO', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Montana', 1, N'MT', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Northern Mariana Islands', 1, N'MP', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Nebraska', 1, N'NE', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Nevada', 1, N'NV', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'New Hampshire', 1, N'NH', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'New Jersey', 1, N'NJ', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'New Mexico', 1, N'NM', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'New York', 1, N'NY', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'North Carolina', 1, N'NC', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'North Dakota', 1, N'ND', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Ohio', 1, N'OH', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Oklahoma', 1, N'OK', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Oregon', 1, N'OR', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Palau', 1, N'PW', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Pennsylvania', 1, N'PA', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Puerto Rico', 1, N'PR', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Rhode Island', 1, N'RI', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'South Carolina', 1, N'SC', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'South Dakota', 1, N'SD', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Tennessee', 1, N'TN', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Texas', 1, N'TX', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Utah', 1, N'UT', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Vermont', 1, N'VT', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Virgin Islands', 1, N'VI', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Virginia', 1, N'VA', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Washington', 1, N'WA', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'West Virginia', 1, N'WV', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Wisconsin', 1, N'WI', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Wyoming', 1, N'WY', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Alberta', 2, N'AB', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'British Columbia', 2, N'BC', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Manitoba', 2, N'MB', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'New Brunswick', 2, N'NB', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Newfoundland and Labrador', 2, N'NL', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Northwest Territories', 2, N'NT', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Nova Scotia', 2, N'NS', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Nunavut', 2, N'NU', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Ontario', 2, N'ON', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Prince Edward Island', 2, N'PE', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Quebec', 2, N'QC', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Saskatchewan', 2, N'SK', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Yukon Territory', 2, N'YT', 1, 1, NULL, GETDATE(), GETDATE())
INSERT INTO [dbo].[State] ([Name], [CountryID], [Abbreviation], [Published], [DisplayOrder], [ExtensionData], [CreatedOn], [UpdatedOn]) VALUES (N'Other (Non U.S.)', NULL, N'--', 1, 1, NULL, GETDATE(), GETDATE())

print N'Inserting into [dbo].[LocaleSetting]'
INSERT INTO [dbo].[LocaleSetting] ([Name], [Description], [DisplayOrder], [CreatedOn], [DefaultCurrencyID], [UpdatedOn]) VALUES (N'en-US', N'United States', 1, GETDATE(), 1, GETDATE())

print N'Inserting into [dbo].[GlobalConfig]'
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowProductFiltering', N'Indicator of whether or not to filter products by store', N'false', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowEntityFiltering', N'Indicator of whether or not to filter Entities by store', N'false', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowCustomerFiltering', N'Indicator of whether or not to filter Customers by store', N'false', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowNewsFiltering', N'Indicator of whether or not to filter News by store', N'false', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowTopicFiltering', N'Indicator of whether or not to filter Topic by store', N'false', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowOrderOptionFiltering', N'Indicator of whether or not to filter Order Option by store', N'false', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowPromotionFiltering', N'Indicator of whether or not to filter Coupon by store', N'false', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowShoppingcartFiltering', N'Indicator of whether or not to filter Products added to Shoppingcart from different stores', N'true', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowAffiliateFiltering', N'Indicator of whether or not to filter Affiliate by store', N'false', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowShippingFiltering', N'Indicator of whether or not to filter shipping calculation mode and methods on a per store basis', N'false', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowGiftCardFiltering', N'Indicator of whether or not to filter Gift Card by store', N'false', N'boolean', N'MULTISTORE', NULL, 1, 0, 1, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'AllowTemplateSwitchingByLocale', N'Indicator of whether the site should attempt to load different masterpage skins based on the current locale of the browsing customer.  This should only be enabled if you have multiple locales and have created different masterpages for each of your locales (eg. template.en-us.master, template.en-gb.master, etc...).  Enabling this when you do not have multiple locales or when you have not create multiple masterpages that vary by locale can hinder the performance of your site.', N'false', N'boolean', N'DISPLAY', NULL, 1, 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'BuySafe.Enabled', N'To enable BuySafe set this to true. If this is false, BuySafe will be disabled.', N'false', N'boolean', N'BUYSAFE', NULL, 1, 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'BuySafe.EndPoint', N'The buySAFE API endpoint.', N'https://api.buysafe.com/BuySafeWS/RegistrationAPI.dll', N'string', N'BUYSAFE', NULL, 1, 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'BuySafe.UserName', N'Your BuySafe user name', N'', N'string', N'BUYSAFE', NULL, 1, 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'BuySafe.Hash', N'The buySAFE Hash value is the unique identifier for your buySAFE account. Please contact buySAFE if you have any questions.', N'', N'string', N'BUYSAFE', NULL, 1, 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'BuySafe.GMS', N'Your BuySafe GMS', N'1000.00', N'decimal', N'BUYSAFE', NULL, 1, 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'BuySafe.TrialStartDate', N'The date on which your 30 BuySafe trial started', N'', N'string', N'BUYSAFE', NULL, 1, 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'BuySafe.RollOverJSLocation', N'Do not change this value.', N'https://seal.buysafe.com/private/rollover/rollover.js', N'string', N'BUYSAFE', NULL, 1, 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'UrlMode', N'Choose the mode that AspDotNetStorefront will use to recognize and generate URL''s. Note that no matter what mode is chosen, the site will always recognize modern URL''s.

Legacy Only: This site will only use URL''s compatible with AspDotNetStorefront 9.5.1 where possible. The site will still generate modern-style URL''s when there is no corresponding legacy page.

Modern with Legacy 301 Redirects: The site will only generate modern URL''s, but if any links come in on a legacy URL it will be redirected to the modern URL with a 301 redirect.

Modern Only: The site will only generate and recognize modern-style URL''s

If no option is chosen, the default is "Modern Only".', N'Modern Only', N'enum', N'ROUTING', N'Legacy Only,Modern with Legacy 301 Redirects,Modern Only', 0, 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'EnableSeNameOnlyUrls', N'Set this to true to allow the site to recognize product and entity links that contain the SEName without an ID.

To use this feature, you must guarantee that every product and entity in your site has the SEName field populated in the database and that each SEName is unique among the products or entities of the same type.', N'false', N'boolean', N'ROUTING', NULL, 0, 0, 0, GETDATE(), GETDATE())

INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'KeyEncryptionKey', N'This is a system level option only, do not change this value or you will no longer be able to recover encrypted data.', N'', N'string', 'ENCRYPTION', NULL, 1, 0, 0, GETDATE(), GETDATE())
INSERT INTO [dbo].[GlobalConfig] ([Name], [Description], [ConfigValue], [ValueType], [GroupName], [EnumValues], [SuperOnly], [Hidden], [IsMultiStore], [CreatedOn], [UpdatedOn]) VALUES (N'LicenseServiceUrl', N'Do not change this value.', N'https://licensecheck.api.aspdotnetstorefront.com/licensevalidation/validatelicense', N'string', N'LICENSING', NULL, 1, 0, 0, GETDATE(), GETDATE())

print N'Inserting into [dbo].[CurrencyExceptions]'
INSERT INTO [dbo].[CurrencyExceptions] ([CurrencyCode], [AmountToSmallestUnit], [UpdatedOn], [CreatedOn]) VALUES (N'VND', 10, GETDATE(), GETDATE())
INSERT INTO [dbo].[CurrencyExceptions] ([CurrencyCode], [AmountToSmallestUnit], [UpdatedOn], [CreatedOn]) VALUES (N'TND', 1000, GETDATE(), GETDATE())
INSERT INTO [dbo].[CurrencyExceptions] ([CurrencyCode], [AmountToSmallestUnit], [UpdatedOn], [CreatedOn]) VALUES (N'OMR', 1000, GETDATE(), GETDATE())
INSERT INTO [dbo].[CurrencyExceptions] ([CurrencyCode], [AmountToSmallestUnit], [UpdatedOn], [CreatedOn]) VALUES (N'MRO', 5, GETDATE(), GETDATE())
INSERT INTO [dbo].[CurrencyExceptions] ([CurrencyCode], [AmountToSmallestUnit], [UpdatedOn], [CreatedOn]) VALUES (N'MGA', 5, GETDATE(), GETDATE())
INSERT INTO [dbo].[CurrencyExceptions] ([CurrencyCode], [AmountToSmallestUnit], [UpdatedOn], [CreatedOn]) VALUES (N'LYD', 1000, GETDATE(), GETDATE())
INSERT INTO [dbo].[CurrencyExceptions] ([CurrencyCode], [AmountToSmallestUnit], [UpdatedOn], [CreatedOn]) VALUES (N'KWD', 1000, GETDATE(), GETDATE())
INSERT INTO [dbo].[CurrencyExceptions] ([CurrencyCode], [AmountToSmallestUnit], [UpdatedOn], [CreatedOn]) VALUES (N'IQD', 1000, GETDATE(), GETDATE())
INSERT INTO [dbo].[CurrencyExceptions] ([CurrencyCode], [AmountToSmallestUnit], [UpdatedOn], [CreatedOn]) VALUES (N'BHD', 1000, GETDATE(), GETDATE())

ALTER TABLE [dbo].[PromotionLineItem]
    WITH NOCHECK ADD CONSTRAINT [FK_PromotionLineItem_PromotionUsageId] FOREIGN KEY ([PromotionUsageId]) REFERENCES [dbo].[PromotionUsage] ([Id]) ON DELETE CASCADE
ALTER TABLE [dbo].[PromotionStore]
    WITH NOCHECK ADD CONSTRAINT [FK_PromotionStore_PromotionId] FOREIGN KEY ([PromotionID]) REFERENCES [dbo].[Promotions] ([Id]) ON DELETE CASCADE
ALTER TABLE [dbo].[PromotionStore]
    WITH NOCHECK ADD CONSTRAINT [FK_PromotionStore_StoreID] FOREIGN KEY ([StoreID]) REFERENCES [dbo].[Store] ([StoreID]) ON DELETE CASCADE
ALTER TABLE [dbo].[PromotionUsage]
    WITH NOCHECK ADD CONSTRAINT [FK_PromotionUsage_PromotionId] FOREIGN KEY ([PromotionId]) REFERENCES [dbo].[Promotions] ([Id])
COMMIT TRANSACTION

PRINT 'Data population complete'
SET NOCOUNT OFF
GO

-- Update store version
PRINT 'Updating Store Version...'
UPDATE [dbo].[AppConfig] SET [ConfigValue] = '10.0.15' WHERE [Name] = 'StoreVersion'
PRINT 'Database creation complete'
